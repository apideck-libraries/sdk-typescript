/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCreditNotesCreate } from "../funcs/accountingCreditNotesCreate.js";
import { accountingCreditNotesDelete } from "../funcs/accountingCreditNotesDelete.js";
import { accountingCreditNotesGet } from "../funcs/accountingCreditNotesGet.js";
import { accountingCreditNotesList } from "../funcs/accountingCreditNotesList.js";
import { accountingCreditNotesUpdate } from "../funcs/accountingCreditNotesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CreditNotes extends ClientSDK {
  /**
   * List Credit Notes
   *
   * @remarks
   * List Credit Notes
   */
  async list(
    request: operations.AccountingCreditNotesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesAllResponse> {
    return unwrapAsync(accountingCreditNotesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Credit Note
   *
   * @remarks
   * Create Credit Note
   */
  async create(
    request: operations.AccountingCreditNotesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesAddResponse> {
    return unwrapAsync(accountingCreditNotesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Credit Note
   *
   * @remarks
   * Get Credit Note
   */
  async get(
    request: operations.AccountingCreditNotesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesOneResponse> {
    return unwrapAsync(accountingCreditNotesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Credit Note
   *
   * @remarks
   * Update Credit Note
   */
  async update(
    request: operations.AccountingCreditNotesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesUpdateResponse> {
    return unwrapAsync(accountingCreditNotesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Credit Note
   *
   * @remarks
   * Delete Credit Note
   */
  async delete(
    request: operations.AccountingCreditNotesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesDeleteResponse> {
    return unwrapAsync(accountingCreditNotesDelete(
      this,
      request,
      options,
    ));
  }
}
