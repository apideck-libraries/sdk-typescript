/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { issueTrackingCollectionUsersGet } from "../funcs/issueTrackingCollectionUsersGet.js";
import { issueTrackingCollectionUsersList } from "../funcs/issueTrackingCollectionUsersList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CollectionUsers extends ClientSDK {
  /**
   * Get user
   *
   * @remarks
   * Get user
   */
  async get(
    request: operations.IssueTrackingCollectionUsersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionUsersOneResponse> {
    return unwrapAsync(issueTrackingCollectionUsersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Users
   *
   * @remarks
   * List Users
   */
  async list(
    request: operations.IssueTrackingCollectionUsersAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.IssueTrackingCollectionUsersAllResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(issueTrackingCollectionUsersList(
      this,
      request,
      options,
    ));
  }
}
