/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsAtsApplicantsAdd } from "../funcs/atsAtsApplicantsAdd.js";
import { atsAtsApplicantsAll } from "../funcs/atsAtsApplicantsAll.js";
import { atsAtsApplicantsDelete } from "../funcs/atsAtsApplicantsDelete.js";
import { atsAtsApplicantsOne } from "../funcs/atsAtsApplicantsOne.js";
import { atsAtsApplicantsUpdate } from "../funcs/atsAtsApplicantsUpdate.js";
import { atsAtsApplicationsAdd } from "../funcs/atsAtsApplicationsAdd.js";
import { atsAtsApplicationsAll } from "../funcs/atsAtsApplicationsAll.js";
import { atsAtsApplicationsDelete } from "../funcs/atsAtsApplicationsDelete.js";
import { atsAtsApplicationsOne } from "../funcs/atsAtsApplicationsOne.js";
import { atsAtsApplicationsUpdate } from "../funcs/atsAtsApplicationsUpdate.js";
import { atsAtsJobsAll } from "../funcs/atsAtsJobsAll.js";
import { atsAtsJobsOne } from "../funcs/atsAtsJobsOne.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ats extends ClientSDK {
  /**
   * List Jobs
   *
   * @remarks
   * List Jobs
   */
  async atsJobsAll(
    request: operations.AtsJobsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsJobsAllResponse> {
    return unwrapAsync(atsAtsJobsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Job
   *
   * @remarks
   * Get Job
   */
  async atsJobsOne(
    request: operations.AtsJobsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsJobsOneResponse> {
    return unwrapAsync(atsAtsJobsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Applicants
   *
   * @remarks
   * List Applicants
   */
  async atsApplicantsAll(
    request: operations.AtsApplicantsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsAllResponse> {
    return unwrapAsync(atsAtsApplicantsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Applicant
   *
   * @remarks
   * Create Applicant
   */
  async atsApplicantsAdd(
    request: operations.AtsApplicantsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsAddResponse> {
    return unwrapAsync(atsAtsApplicantsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Applicant
   *
   * @remarks
   * Get Applicant
   */
  async atsApplicantsOne(
    request: operations.AtsApplicantsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsOneResponse> {
    return unwrapAsync(atsAtsApplicantsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Applicant
   *
   * @remarks
   * Update Applicant
   */
  async atsApplicantsUpdate(
    request: operations.AtsApplicantsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsUpdateResponse> {
    return unwrapAsync(atsAtsApplicantsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Applicant
   *
   * @remarks
   * Delete Applicant
   */
  async atsApplicantsDelete(
    request: operations.AtsApplicantsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsDeleteResponse> {
    return unwrapAsync(atsAtsApplicantsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Applications
   *
   * @remarks
   * List Applications
   */
  async atsApplicationsAll(
    request: operations.AtsApplicationsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsAllResponse> {
    return unwrapAsync(atsAtsApplicationsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Application
   *
   * @remarks
   * Create Application
   */
  async atsApplicationsAdd(
    request: operations.AtsApplicationsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsAddResponse> {
    return unwrapAsync(atsAtsApplicationsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Application
   *
   * @remarks
   * Get Application
   */
  async atsApplicationsOne(
    request: operations.AtsApplicationsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsOneResponse> {
    return unwrapAsync(atsAtsApplicationsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Application
   *
   * @remarks
   * Update Application
   */
  async atsApplicationsUpdate(
    request: operations.AtsApplicationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsUpdateResponse> {
    return unwrapAsync(atsAtsApplicationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Application
   *
   * @remarks
   * Delete Application
   */
  async atsApplicationsDelete(
    request: operations.AtsApplicationsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsDeleteResponse> {
    return unwrapAsync(atsAtsApplicationsDelete(
      this,
      request,
      options,
    ));
  }
}
