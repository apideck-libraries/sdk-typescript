/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingQuotesCreate } from "../funcs/accountingQuotesCreate.js";
import { accountingQuotesDelete } from "../funcs/accountingQuotesDelete.js";
import { accountingQuotesGet } from "../funcs/accountingQuotesGet.js";
import { accountingQuotesList } from "../funcs/accountingQuotesList.js";
import { accountingQuotesUpdate } from "../funcs/accountingQuotesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Quotes extends ClientSDK {
  /**
   * List Quotes
   *
   * @remarks
   * List Quotes
   */
  async list(
    request: operations.AccountingQuotesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AccountingQuotesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(accountingQuotesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Quote
   *
   * @remarks
   * Create Quote
   */
  async create(
    request: operations.AccountingQuotesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingQuotesAddResponse> {
    return unwrapAsync(accountingQuotesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Quote
   *
   * @remarks
   * Get Quote
   */
  async get(
    request: operations.AccountingQuotesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingQuotesOneResponse> {
    return unwrapAsync(accountingQuotesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Quote
   *
   * @remarks
   * Update Quote
   */
  async update(
    request: operations.AccountingQuotesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingQuotesUpdateResponse> {
    return unwrapAsync(accountingQuotesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Quote
   *
   * @remarks
   * Delete Quote
   */
  async delete(
    request: operations.AccountingQuotesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingQuotesDeleteResponse> {
    return unwrapAsync(accountingQuotesDelete(
      this,
      request,
      options,
    ));
  }
}
