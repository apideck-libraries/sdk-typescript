/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingBankFeedAccountsCreate } from "../funcs/accountingBankFeedAccountsCreate.js";
import { accountingBankFeedAccountsDelete } from "../funcs/accountingBankFeedAccountsDelete.js";
import { accountingBankFeedAccountsGet } from "../funcs/accountingBankFeedAccountsGet.js";
import { accountingBankFeedAccountsList } from "../funcs/accountingBankFeedAccountsList.js";
import { accountingBankFeedAccountsUpdate } from "../funcs/accountingBankFeedAccountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class BankFeedAccounts extends ClientSDK {
  /**
   * List Bank Feed Accounts
   *
   * @remarks
   * List Bank Feed Accounts
   */
  async list(
    request: operations.AccountingBankFeedAccountsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingBankFeedAccountsAllResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingBankFeedAccountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bank Feed Account
   *
   * @remarks
   * Create Bank Feed Account
   */
  async create(
    request: operations.AccountingBankFeedAccountsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedAccountsAddResponse> {
    return unwrapAsync(accountingBankFeedAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bank Feed Account
   *
   * @remarks
   * Get Bank Feed Account
   */
  async get(
    request: operations.AccountingBankFeedAccountsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedAccountsOneResponse> {
    return unwrapAsync(accountingBankFeedAccountsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Bank Feed Account
   *
   * @remarks
   * Update Bank Feed Account
   */
  async update(
    request: operations.AccountingBankFeedAccountsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedAccountsUpdateResponse> {
    return unwrapAsync(accountingBankFeedAccountsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bank Feed Account
   *
   * @remarks
   * Delete Bank Feed Account
   */
  async delete(
    request: operations.AccountingBankFeedAccountsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedAccountsDeleteResponse> {
    return unwrapAsync(accountingBankFeedAccountsDelete(
      this,
      request,
      options,
    ));
  }
}
