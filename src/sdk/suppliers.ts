/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingSuppliersCreate } from "../funcs/accountingSuppliersCreate.js";
import { accountingSuppliersDelete } from "../funcs/accountingSuppliersDelete.js";
import { accountingSuppliersGet } from "../funcs/accountingSuppliersGet.js";
import { accountingSuppliersList } from "../funcs/accountingSuppliersList.js";
import { accountingSuppliersUpdate } from "../funcs/accountingSuppliersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Suppliers extends ClientSDK {
  /**
   * List Suppliers
   *
   * @remarks
   * List Suppliers
   */
  async list(
    request: operations.AccountingSuppliersAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AccountingSuppliersAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(accountingSuppliersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Supplier
   *
   * @remarks
   * Create Supplier
   */
  async create(
    request: operations.AccountingSuppliersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersAddResponse> {
    return unwrapAsync(accountingSuppliersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Supplier
   *
   * @remarks
   * Get Supplier
   */
  async get(
    request: operations.AccountingSuppliersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersOneResponse> {
    return unwrapAsync(accountingSuppliersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Supplier
   *
   * @remarks
   * Update Supplier
   */
  async update(
    request: operations.AccountingSuppliersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersUpdateResponse> {
    return unwrapAsync(accountingSuppliersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Supplier
   *
   * @remarks
   * Delete Supplier
   */
  async delete(
    request: operations.AccountingSuppliersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersDeleteResponse> {
    return unwrapAsync(accountingSuppliersDelete(
      this,
      request,
      options,
    ));
  }
}
