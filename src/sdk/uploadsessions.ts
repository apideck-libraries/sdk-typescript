/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageUploadSessionsCreate } from "../funcs/fileStorageUploadSessionsCreate.js";
import { fileStorageUploadSessionsDelete } from "../funcs/fileStorageUploadSessionsDelete.js";
import { fileStorageUploadSessionsFinish } from "../funcs/fileStorageUploadSessionsFinish.js";
import { fileStorageUploadSessionsGet } from "../funcs/fileStorageUploadSessionsGet.js";
import { fileStorageUploadSessionsUpload } from "../funcs/fileStorageUploadSessionsUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UploadSessions extends ClientSDK {
  /**
   * Start Upload Session
   *
   * @remarks
   * Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async create(
    request: operations.FileStorageUploadSessionsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsAddResponse> {
    return unwrapAsync(fileStorageUploadSessionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Upload Session
   *
   * @remarks
   * Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async get(
    request: operations.FileStorageUploadSessionsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsOneResponse> {
    return unwrapAsync(fileStorageUploadSessionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload part of File to Upload Session
   *
   * @remarks
   * Upload part of File to Upload Session (max 100MB). Get `part_size` from [Get Upload Session](#operation/uploadSessionsOne) first. Every File part (except the last one) uploaded to this endpoint should have Content-Length equal to `part_size`. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async upload(
    request: operations.FileStorageUploadSessionsUploadRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsUploadResponse> {
    return unwrapAsync(fileStorageUploadSessionsUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Abort Upload Session
   *
   * @remarks
   * Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async delete(
    request: operations.FileStorageUploadSessionsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsDeleteResponse> {
    return unwrapAsync(fileStorageUploadSessionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Finish Upload Session
   *
   * @remarks
   * Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async finish(
    request: operations.FileStorageUploadSessionsFinishRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsFinishResponse> {
    return unwrapAsync(fileStorageUploadSessionsFinish(
      this,
      request,
      options,
    ));
  }
}
