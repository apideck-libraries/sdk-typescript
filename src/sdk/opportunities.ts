/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmOpportunitiesCreate } from "../funcs/crmOpportunitiesCreate.js";
import { crmOpportunitiesDelete } from "../funcs/crmOpportunitiesDelete.js";
import { crmOpportunitiesGet } from "../funcs/crmOpportunitiesGet.js";
import { crmOpportunitiesList } from "../funcs/crmOpportunitiesList.js";
import { crmOpportunitiesUpdate } from "../funcs/crmOpportunitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Opportunities extends ClientSDK {
  /**
   * Get opportunity
   *
   * @remarks
   * Get opportunity
   */
  async get(
    request: operations.CrmOpportunitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesOneResponse> {
    return unwrapAsync(crmOpportunitiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update opportunity
   *
   * @remarks
   * Update opportunity
   */
  async update(
    request: operations.CrmOpportunitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesUpdateResponse> {
    return unwrapAsync(crmOpportunitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete opportunity
   *
   * @remarks
   * Delete opportunity
   */
  async delete(
    request: operations.CrmOpportunitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesDeleteResponse> {
    return unwrapAsync(crmOpportunitiesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List opportunities
   *
   * @remarks
   * List opportunities
   */
  async list(
    request: operations.CrmOpportunitiesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.CrmOpportunitiesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(crmOpportunitiesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create opportunity
   *
   * @remarks
   * Create opportunity
   */
  async create(
    request: operations.CrmOpportunitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesAddResponse> {
    return unwrapAsync(crmOpportunitiesCreate(
      this,
      request,
      options,
    ));
  }
}
