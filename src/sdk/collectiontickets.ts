/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { issueTrackingCollectionTicketsCreate } from "../funcs/issueTrackingCollectionTicketsCreate.js";
import { issueTrackingCollectionTicketsDelete } from "../funcs/issueTrackingCollectionTicketsDelete.js";
import { issueTrackingCollectionTicketsGet } from "../funcs/issueTrackingCollectionTicketsGet.js";
import { issueTrackingCollectionTicketsList } from "../funcs/issueTrackingCollectionTicketsList.js";
import { issueTrackingCollectionTicketsUpdate } from "../funcs/issueTrackingCollectionTicketsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CollectionTickets extends ClientSDK {
  /**
   * List Tickets
   *
   * @remarks
   * List Tickets
   */
  async list(
    request: operations.IssueTrackingCollectionTicketsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsAllResponse> {
    return unwrapAsync(issueTrackingCollectionTicketsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Ticket
   *
   * @remarks
   * Create Ticket
   */
  async create(
    request: operations.IssueTrackingCollectionTicketsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsAddResponse> {
    return unwrapAsync(issueTrackingCollectionTicketsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket
   *
   * @remarks
   * Get Ticket
   */
  async get(
    request: operations.IssueTrackingCollectionTicketsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsOneResponse> {
    return unwrapAsync(issueTrackingCollectionTicketsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket
   *
   * @remarks
   * Update Ticket
   */
  async update(
    request: operations.IssueTrackingCollectionTicketsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsUpdateResponse> {
    return unwrapAsync(issueTrackingCollectionTicketsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Ticket
   *
   * @remarks
   * Delete Ticket
   */
  async delete(
    request: operations.IssueTrackingCollectionTicketsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsDeleteResponse> {
    return unwrapAsync(issueTrackingCollectionTicketsDelete(
      this,
      request,
      options,
    ));
  }
}
