/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { issueTrackingIssueTrackingCollectionsAll } from "../funcs/issueTrackingIssueTrackingCollectionsAll.js";
import { issueTrackingIssueTrackingCollectionsOne } from "../funcs/issueTrackingIssueTrackingCollectionsOne.js";
import { issueTrackingIssueTrackingCollectionTagsAll } from "../funcs/issueTrackingIssueTrackingCollectionTagsAll.js";
import { issueTrackingIssueTrackingCollectionTicketCommentsAdd } from "../funcs/issueTrackingIssueTrackingCollectionTicketCommentsAdd.js";
import { issueTrackingIssueTrackingCollectionTicketCommentsAll } from "../funcs/issueTrackingIssueTrackingCollectionTicketCommentsAll.js";
import { issueTrackingIssueTrackingCollectionTicketCommentsDelete } from "../funcs/issueTrackingIssueTrackingCollectionTicketCommentsDelete.js";
import { issueTrackingIssueTrackingCollectionTicketCommentsOne } from "../funcs/issueTrackingIssueTrackingCollectionTicketCommentsOne.js";
import { issueTrackingIssueTrackingCollectionTicketCommentsUpdate } from "../funcs/issueTrackingIssueTrackingCollectionTicketCommentsUpdate.js";
import { issueTrackingIssueTrackingCollectionTicketsAdd } from "../funcs/issueTrackingIssueTrackingCollectionTicketsAdd.js";
import { issueTrackingIssueTrackingCollectionTicketsAll } from "../funcs/issueTrackingIssueTrackingCollectionTicketsAll.js";
import { issueTrackingIssueTrackingCollectionTicketsDelete } from "../funcs/issueTrackingIssueTrackingCollectionTicketsDelete.js";
import { issueTrackingIssueTrackingCollectionTicketsOne } from "../funcs/issueTrackingIssueTrackingCollectionTicketsOne.js";
import { issueTrackingIssueTrackingCollectionTicketsUpdate } from "../funcs/issueTrackingIssueTrackingCollectionTicketsUpdate.js";
import { issueTrackingIssueTrackingCollectionUsersAll } from "../funcs/issueTrackingIssueTrackingCollectionUsersAll.js";
import { issueTrackingIssueTrackingCollectionUsersOne } from "../funcs/issueTrackingIssueTrackingCollectionUsersOne.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IssueTracking extends ClientSDK {
  /**
   * List Collections
   *
   * @remarks
   * List Collections
   */
  async issueTrackingCollectionsAll(
    request: operations.IssueTrackingCollectionsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionsAllResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Collection
   *
   * @remarks
   * Get Collection
   */
  async issueTrackingCollectionsOne(
    request: operations.IssueTrackingCollectionsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionsOneResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tickets
   *
   * @remarks
   * List Tickets
   */
  async issueTrackingCollectionTicketsAll(
    request: operations.IssueTrackingCollectionTicketsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsAllResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Ticket
   *
   * @remarks
   * Create Ticket
   */
  async issueTrackingCollectionTicketsAdd(
    request: operations.IssueTrackingCollectionTicketsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsAddResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ticket
   *
   * @remarks
   * Get Ticket
   */
  async issueTrackingCollectionTicketsOne(
    request: operations.IssueTrackingCollectionTicketsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsOneResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ticket
   *
   * @remarks
   * Update Ticket
   */
  async issueTrackingCollectionTicketsUpdate(
    request: operations.IssueTrackingCollectionTicketsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsUpdateResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Ticket
   *
   * @remarks
   * Delete Ticket
   */
  async issueTrackingCollectionTicketsDelete(
    request: operations.IssueTrackingCollectionTicketsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketsDeleteResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Comments
   *
   * @remarks
   * List Comments
   */
  async issueTrackingCollectionTicketCommentsAll(
    request: operations.IssueTrackingCollectionTicketCommentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsAllResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketCommentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Comment
   *
   * @remarks
   * Create Comment
   */
  async issueTrackingCollectionTicketCommentsAdd(
    request: operations.IssueTrackingCollectionTicketCommentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsAddResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketCommentsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Comment
   *
   * @remarks
   * Get Comment
   */
  async issueTrackingCollectionTicketCommentsOne(
    request: operations.IssueTrackingCollectionTicketCommentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsOneResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketCommentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Comment
   *
   * @remarks
   * Update Comment
   */
  async issueTrackingCollectionTicketCommentsUpdate(
    request: operations.IssueTrackingCollectionTicketCommentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsUpdateResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketCommentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Comment
   *
   * @remarks
   * Delete Comment
   */
  async issueTrackingCollectionTicketCommentsDelete(
    request: operations.IssueTrackingCollectionTicketCommentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsDeleteResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTicketCommentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Users
   *
   * @remarks
   * List Users
   */
  async issueTrackingCollectionUsersAll(
    request: operations.IssueTrackingCollectionUsersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionUsersAllResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionUsersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   *
   * @remarks
   * Get user
   */
  async issueTrackingCollectionUsersOne(
    request: operations.IssueTrackingCollectionUsersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionUsersOneResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionUsersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tags
   *
   * @remarks
   * List Tags
   */
  async issueTrackingCollectionTagsAll(
    request: operations.IssueTrackingCollectionTagsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTagsAllResponse> {
    return unwrapAsync(issueTrackingIssueTrackingCollectionTagsAll(
      this,
      request,
      options,
    ));
  }
}
