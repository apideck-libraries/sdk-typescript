/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingProjectsCreate } from "../funcs/accountingProjectsCreate.js";
import { accountingProjectsDelete } from "../funcs/accountingProjectsDelete.js";
import { accountingProjectsGet } from "../funcs/accountingProjectsGet.js";
import { accountingProjectsList } from "../funcs/accountingProjectsList.js";
import { accountingProjectsUpdate } from "../funcs/accountingProjectsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Projects extends ClientSDK {
  /**
   * List projects
   *
   * @remarks
   * List projects
   */
  async list(
    request: operations.AccountingProjectsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AccountingProjectsAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(accountingProjectsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create project
   *
   * @remarks
   * Create project
   */
  async create(
    request: operations.AccountingProjectsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingProjectsAddResponse> {
    return unwrapAsync(accountingProjectsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get project
   *
   * @remarks
   * Get project
   */
  async get(
    request: operations.AccountingProjectsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingProjectsOneResponse> {
    return unwrapAsync(accountingProjectsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update project
   *
   * @remarks
   * Update project
   */
  async update(
    request: operations.AccountingProjectsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingProjectsUpdateResponse> {
    return unwrapAsync(accountingProjectsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete project
   *
   * @remarks
   * Delete project
   */
  async delete(
    request: operations.AccountingProjectsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingProjectsDeleteResponse> {
    return unwrapAsync(accountingProjectsDelete(
      this,
      request,
      options,
    ));
  }
}
