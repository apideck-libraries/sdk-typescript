/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingExpensesCreate } from "../funcs/accountingExpensesCreate.js";
import { accountingExpensesDelete } from "../funcs/accountingExpensesDelete.js";
import { accountingExpensesGet } from "../funcs/accountingExpensesGet.js";
import { accountingExpensesList } from "../funcs/accountingExpensesList.js";
import { accountingExpensesUpdate } from "../funcs/accountingExpensesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Expenses extends ClientSDK {
  /**
   * List Expenses
   *
   * @remarks
   * List Expenses
   */
  async list(
    request: operations.AccountingExpensesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesAllResponse> {
    return unwrapAsync(accountingExpensesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Expense
   *
   * @remarks
   * Create Expense
   */
  async create(
    request: operations.AccountingExpensesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesAddResponse> {
    return unwrapAsync(accountingExpensesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Expense
   *
   * @remarks
   * Get Expense
   */
  async get(
    request: operations.AccountingExpensesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesOneResponse> {
    return unwrapAsync(accountingExpensesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Expense
   *
   * @remarks
   * Update Expense
   */
  async update(
    request: operations.AccountingExpensesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesUpdateResponse> {
    return unwrapAsync(accountingExpensesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Expense
   *
   * @remarks
   * Delete Expense
   */
  async delete(
    request: operations.AccountingExpensesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesDeleteResponse> {
    return unwrapAsync(accountingExpensesDelete(
      this,
      request,
      options,
    ));
  }
}
