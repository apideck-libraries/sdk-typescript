/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmActivitiesCreate } from "../funcs/crmActivitiesCreate.js";
import { crmActivitiesDelete } from "../funcs/crmActivitiesDelete.js";
import { crmActivitiesGet } from "../funcs/crmActivitiesGet.js";
import { crmActivitiesList } from "../funcs/crmActivitiesList.js";
import { crmActivitiesUpdate } from "../funcs/crmActivitiesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Activities extends ClientSDK {
  /**
   * List activities
   *
   * @remarks
   * List activities
   */
  async list(
    request: operations.CrmActivitiesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.CrmActivitiesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(crmActivitiesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create activity
   *
   * @remarks
   * Create activity
   */
  async create(
    request: operations.CrmActivitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesAddResponse> {
    return unwrapAsync(crmActivitiesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get activity
   *
   * @remarks
   * Get activity
   */
  async get(
    request: operations.CrmActivitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesOneResponse> {
    return unwrapAsync(crmActivitiesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update activity
   *
   * @remarks
   * Update activity
   */
  async update(
    request: operations.CrmActivitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesUpdateResponse> {
    return unwrapAsync(crmActivitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete activity
   *
   * @remarks
   * Delete activity
   */
  async delete(
    request: operations.CrmActivitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesDeleteResponse> {
    return unwrapAsync(crmActivitiesDelete(
      this,
      request,
      options,
    ));
  }
}
