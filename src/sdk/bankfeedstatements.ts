/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingBankFeedStatementsCreate } from "../funcs/accountingBankFeedStatementsCreate.js";
import { accountingBankFeedStatementsDelete } from "../funcs/accountingBankFeedStatementsDelete.js";
import { accountingBankFeedStatementsGet } from "../funcs/accountingBankFeedStatementsGet.js";
import { accountingBankFeedStatementsList } from "../funcs/accountingBankFeedStatementsList.js";
import { accountingBankFeedStatementsUpdate } from "../funcs/accountingBankFeedStatementsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class BankFeedStatements extends ClientSDK {
  /**
   * List Bank Feed Statements
   *
   * @remarks
   * List Bank Feed Statements
   */
  async list(
    request: operations.AccountingBankFeedStatementsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingBankFeedStatementsAllResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingBankFeedStatementsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bank Feed Statement
   *
   * @remarks
   * Create Bank Feed Statement
   */
  async create(
    request: operations.AccountingBankFeedStatementsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedStatementsAddResponse> {
    return unwrapAsync(accountingBankFeedStatementsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bank Feed Statement
   *
   * @remarks
   * Get Bank Feed Statement
   */
  async get(
    request: operations.AccountingBankFeedStatementsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedStatementsOneResponse> {
    return unwrapAsync(accountingBankFeedStatementsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Bank Feed Statement
   *
   * @remarks
   * Update Bank Feed Statement
   */
  async update(
    request: operations.AccountingBankFeedStatementsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedStatementsUpdateResponse> {
    return unwrapAsync(accountingBankFeedStatementsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bank Feed Statement
   *
   * @remarks
   * Delete Bank Feed Statement
   */
  async delete(
    request: operations.AccountingBankFeedStatementsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankFeedStatementsDeleteResponse> {
    return unwrapAsync(accountingBankFeedStatementsDelete(
      this,
      request,
      options,
    ));
  }
}
