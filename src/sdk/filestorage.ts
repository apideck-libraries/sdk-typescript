/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageFileStorageDriveGroupsAdd } from "../funcs/fileStorageFileStorageDriveGroupsAdd.js";
import { fileStorageFileStorageDriveGroupsAll } from "../funcs/fileStorageFileStorageDriveGroupsAll.js";
import { fileStorageFileStorageDriveGroupsDelete } from "../funcs/fileStorageFileStorageDriveGroupsDelete.js";
import { fileStorageFileStorageDriveGroupsOne } from "../funcs/fileStorageFileStorageDriveGroupsOne.js";
import { fileStorageFileStorageDriveGroupsUpdate } from "../funcs/fileStorageFileStorageDriveGroupsUpdate.js";
import { fileStorageFileStorageDrivesAdd } from "../funcs/fileStorageFileStorageDrivesAdd.js";
import { fileStorageFileStorageDrivesAll } from "../funcs/fileStorageFileStorageDrivesAll.js";
import { fileStorageFileStorageDrivesDelete } from "../funcs/fileStorageFileStorageDrivesDelete.js";
import { fileStorageFileStorageDrivesOne } from "../funcs/fileStorageFileStorageDrivesOne.js";
import { fileStorageFileStorageDrivesUpdate } from "../funcs/fileStorageFileStorageDrivesUpdate.js";
import { fileStorageFileStorageFilesAll } from "../funcs/fileStorageFileStorageFilesAll.js";
import { fileStorageFileStorageFilesDelete } from "../funcs/fileStorageFileStorageFilesDelete.js";
import {
  FileStorageFilesDownloadAcceptEnum,
  fileStorageFileStorageFilesDownload,
} from "../funcs/fileStorageFileStorageFilesDownload.js";
import {
  FileStorageFilesExportAcceptEnum,
  fileStorageFileStorageFilesExport,
} from "../funcs/fileStorageFileStorageFilesExport.js";
import { fileStorageFileStorageFilesOne } from "../funcs/fileStorageFileStorageFilesOne.js";
import { fileStorageFileStorageFilesSearch } from "../funcs/fileStorageFileStorageFilesSearch.js";
import { fileStorageFileStorageFilesUpdate } from "../funcs/fileStorageFileStorageFilesUpdate.js";
import { fileStorageFileStorageFoldersAdd } from "../funcs/fileStorageFileStorageFoldersAdd.js";
import { fileStorageFileStorageFoldersCopy } from "../funcs/fileStorageFileStorageFoldersCopy.js";
import { fileStorageFileStorageFoldersDelete } from "../funcs/fileStorageFileStorageFoldersDelete.js";
import { fileStorageFileStorageFoldersOne } from "../funcs/fileStorageFileStorageFoldersOne.js";
import { fileStorageFileStorageFoldersUpdate } from "../funcs/fileStorageFileStorageFoldersUpdate.js";
import { fileStorageFileStorageSharedLinksAdd } from "../funcs/fileStorageFileStorageSharedLinksAdd.js";
import { fileStorageFileStorageSharedLinksAll } from "../funcs/fileStorageFileStorageSharedLinksAll.js";
import { fileStorageFileStorageSharedLinksDelete } from "../funcs/fileStorageFileStorageSharedLinksDelete.js";
import { fileStorageFileStorageSharedLinksOne } from "../funcs/fileStorageFileStorageSharedLinksOne.js";
import { fileStorageFileStorageSharedLinksUpdate } from "../funcs/fileStorageFileStorageSharedLinksUpdate.js";
import { fileStorageFileStorageUploadSessionsAdd } from "../funcs/fileStorageFileStorageUploadSessionsAdd.js";
import { fileStorageFileStorageUploadSessionsDelete } from "../funcs/fileStorageFileStorageUploadSessionsDelete.js";
import { fileStorageFileStorageUploadSessionsFinish } from "../funcs/fileStorageFileStorageUploadSessionsFinish.js";
import { fileStorageFileStorageUploadSessionsOne } from "../funcs/fileStorageFileStorageUploadSessionsOne.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { FileStorageFilesDownloadAcceptEnum } from "../funcs/fileStorageFileStorageFilesDownload.js";

export { FileStorageFilesExportAcceptEnum } from "../funcs/fileStorageFileStorageFilesExport.js";

export class FileStorage extends ClientSDK {
  /**
   * List Files
   *
   * @remarks
   * List Files
   */
  async fileStorageFilesAll(
    request: operations.FileStorageFilesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesAllResponse> {
    return unwrapAsync(fileStorageFileStorageFilesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Search Files
   *
   * @remarks
   * Search Files
   */
  async fileStorageFilesSearch(
    request: operations.FileStorageFilesSearchRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesSearchResponse> {
    return unwrapAsync(fileStorageFileStorageFilesSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Get File
   *
   * @remarks
   * Get File
   */
  async fileStorageFilesOne(
    request: operations.FileStorageFilesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesOneResponse> {
    return unwrapAsync(fileStorageFileStorageFilesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Rename or move File
   *
   * @remarks
   * Rename or move File
   */
  async fileStorageFilesUpdate(
    request: operations.FileStorageFilesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesUpdateResponse> {
    return unwrapAsync(fileStorageFileStorageFilesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete File
   *
   * @remarks
   * Delete File
   */
  async fileStorageFilesDelete(
    request: operations.FileStorageFilesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageFilesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Download File
   *
   * @remarks
   * Download File
   */
  async fileStorageFilesDownload(
    request: operations.FileStorageFilesDownloadRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: FileStorageFilesDownloadAcceptEnum;
    },
  ): Promise<operations.FileStorageFilesDownloadResponse> {
    return unwrapAsync(fileStorageFileStorageFilesDownload(
      this,
      request,
      options,
    ));
  }

  /**
   * Export File
   *
   * @remarks
   * Export File
   */
  async fileStorageFilesExport(
    request: operations.FileStorageFilesExportRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: FileStorageFilesExportAcceptEnum;
    },
  ): Promise<operations.FileStorageFilesExportResponse> {
    return unwrapAsync(fileStorageFileStorageFilesExport(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Folder
   *
   * @remarks
   * Create Folder
   */
  async fileStorageFoldersAdd(
    request: operations.FileStorageFoldersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersAddResponse> {
    return unwrapAsync(fileStorageFileStorageFoldersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Folder
   *
   * @remarks
   * Get Folder
   */
  async fileStorageFoldersOne(
    request: operations.FileStorageFoldersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersOneResponse> {
    return unwrapAsync(fileStorageFileStorageFoldersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Rename or move Folder
   *
   * @remarks
   * Rename or move Folder
   */
  async fileStorageFoldersUpdate(
    request: operations.FileStorageFoldersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersUpdateResponse> {
    return unwrapAsync(fileStorageFileStorageFoldersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Folder
   *
   * @remarks
   * Delete Folder
   */
  async fileStorageFoldersDelete(
    request: operations.FileStorageFoldersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageFoldersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Copy Folder
   *
   * @remarks
   * Copy Folder
   */
  async fileStorageFoldersCopy(
    request: operations.FileStorageFoldersCopyRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersCopyResponse> {
    return unwrapAsync(fileStorageFileStorageFoldersCopy(
      this,
      request,
      options,
    ));
  }

  /**
   * List SharedLinks
   *
   * @remarks
   * List SharedLinks
   */
  async fileStorageSharedLinksAll(
    request: operations.FileStorageSharedLinksAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksAllResponse> {
    return unwrapAsync(fileStorageFileStorageSharedLinksAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Shared Link
   *
   * @remarks
   * Create Shared Link
   */
  async fileStorageSharedLinksAdd(
    request: operations.FileStorageSharedLinksAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksAddResponse> {
    return unwrapAsync(fileStorageFileStorageSharedLinksAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Shared Link
   *
   * @remarks
   * Get Shared Link
   */
  async fileStorageSharedLinksOne(
    request: operations.FileStorageSharedLinksOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksOneResponse> {
    return unwrapAsync(fileStorageFileStorageSharedLinksOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Shared Link
   *
   * @remarks
   * Update Shared Link
   */
  async fileStorageSharedLinksUpdate(
    request: operations.FileStorageSharedLinksUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksUpdateResponse> {
    return unwrapAsync(fileStorageFileStorageSharedLinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Shared Link
   *
   * @remarks
   * Delete Shared Link
   */
  async fileStorageSharedLinksDelete(
    request: operations.FileStorageSharedLinksDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageSharedLinksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Start Upload Session
   *
   * @remarks
   * Start an Upload Session. Upload sessions are used to upload large files, use the [Upload File](#operation/filesUpload) endpoint to upload smaller files (up to 100MB). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async fileStorageUploadSessionsAdd(
    request: operations.FileStorageUploadSessionsAddRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<operations.FileStorageUploadSessionsAddResponse> {
    return unwrapAsync(fileStorageFileStorageUploadSessionsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Upload Session
   *
   * @remarks
   * Get Upload Session. Use the `part_size` to split your file into parts. Upload the parts to the [Upload part of File](#operation/uploadSessionsUpload) endpoint. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async fileStorageUploadSessionsOne(
    request: operations.FileStorageUploadSessionsOneRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<operations.FileStorageUploadSessionsOneResponse> {
    return unwrapAsync(fileStorageFileStorageUploadSessionsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Abort Upload Session
   *
   * @remarks
   * Abort Upload Session. Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async fileStorageUploadSessionsDelete(
    request: operations.FileStorageUploadSessionsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageUploadSessionsDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageUploadSessionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Finish Upload Session
   *
   * @remarks
   * Finish Upload Session. Only call this endpoint after all File parts have been uploaded to [Upload part of File](#operation/uploadSessionsUpload). Note that the base URL is upload.apideck.com instead of unify.apideck.com. For more information on uploads, refer to the [file upload guide](/guides/file-upload).
   */
  async fileStorageUploadSessionsFinish(
    request: operations.FileStorageUploadSessionsFinishRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<operations.FileStorageUploadSessionsFinishResponse> {
    return unwrapAsync(fileStorageFileStorageUploadSessionsFinish(
      this,
      request,
      options,
    ));
  }

  /**
   * List Drives
   *
   * @remarks
   * List Drives
   */
  async fileStorageDrivesAll(
    request: operations.FileStorageDrivesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesAllResponse> {
    return unwrapAsync(fileStorageFileStorageDrivesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Drive
   *
   * @remarks
   * Create Drive
   */
  async fileStorageDrivesAdd(
    request: operations.FileStorageDrivesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesAddResponse> {
    return unwrapAsync(fileStorageFileStorageDrivesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Drive
   *
   * @remarks
   * Get Drive
   */
  async fileStorageDrivesOne(
    request: operations.FileStorageDrivesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesOneResponse> {
    return unwrapAsync(fileStorageFileStorageDrivesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Drive
   *
   * @remarks
   * Update Drive
   */
  async fileStorageDrivesUpdate(
    request: operations.FileStorageDrivesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesUpdateResponse> {
    return unwrapAsync(fileStorageFileStorageDrivesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Drive
   *
   * @remarks
   * Delete Drive
   */
  async fileStorageDrivesDelete(
    request: operations.FileStorageDrivesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageDrivesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List DriveGroups
   *
   * @remarks
   * List DriveGroups
   */
  async fileStorageDriveGroupsAll(
    request: operations.FileStorageDriveGroupsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsAllResponse> {
    return unwrapAsync(fileStorageFileStorageDriveGroupsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create DriveGroup
   *
   * @remarks
   * Create DriveGroup
   */
  async fileStorageDriveGroupsAdd(
    request: operations.FileStorageDriveGroupsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsAddResponse> {
    return unwrapAsync(fileStorageFileStorageDriveGroupsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get DriveGroup
   *
   * @remarks
   * Get DriveGroup
   */
  async fileStorageDriveGroupsOne(
    request: operations.FileStorageDriveGroupsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsOneResponse> {
    return unwrapAsync(fileStorageFileStorageDriveGroupsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update DriveGroup
   *
   * @remarks
   * Update DriveGroup
   */
  async fileStorageDriveGroupsUpdate(
    request: operations.FileStorageDriveGroupsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsUpdateResponse> {
    return unwrapAsync(fileStorageFileStorageDriveGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete DriveGroup
   *
   * @remarks
   * Delete DriveGroup
   */
  async fileStorageDriveGroupsDelete(
    request: operations.FileStorageDriveGroupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsDeleteResponse> {
    return unwrapAsync(fileStorageFileStorageDriveGroupsDelete(
      this,
      request,
      options,
    ));
  }
}
