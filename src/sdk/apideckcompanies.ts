/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisCompaniesCreate } from "../funcs/hrisCompaniesCreate.js";
import { hrisCompaniesDelete } from "../funcs/hrisCompaniesDelete.js";
import { hrisCompaniesGet } from "../funcs/hrisCompaniesGet.js";
import { hrisCompaniesList } from "../funcs/hrisCompaniesList.js";
import { hrisCompaniesUpdate } from "../funcs/hrisCompaniesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ApideckCompanies extends ClientSDK {
  /**
   * List Companies
   *
   * @remarks
   * List Companies
   */
  async list(
    request: operations.HrisCompaniesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisCompaniesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisCompaniesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Company
   *
   * @remarks
   * Create Company
   */
  async create(
    request: operations.HrisCompaniesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesAddResponse> {
    return unwrapAsync(hrisCompaniesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company
   *
   * @remarks
   * Get Company
   */
  async get(
    request: operations.HrisCompaniesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesOneResponse> {
    return unwrapAsync(hrisCompaniesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Company
   *
   * @remarks
   * Update Company
   */
  async update(
    request: operations.HrisCompaniesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesUpdateResponse> {
    return unwrapAsync(hrisCompaniesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Company
   *
   * @remarks
   * Delete Company
   */
  async delete(
    request: operations.HrisCompaniesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesDeleteResponse> {
    return unwrapAsync(hrisCompaniesDelete(
      this,
      request,
      options,
    ));
  }
}
