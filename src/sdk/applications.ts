/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsApplicationsCreate } from "../funcs/atsApplicationsCreate.js";
import { atsApplicationsDelete } from "../funcs/atsApplicationsDelete.js";
import { atsApplicationsGet } from "../funcs/atsApplicationsGet.js";
import { atsApplicationsList } from "../funcs/atsApplicationsList.js";
import { atsApplicationsUpdate } from "../funcs/atsApplicationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Applications extends ClientSDK {
  /**
   * List Applications
   *
   * @remarks
   * List Applications
   */
  async list(
    request: operations.AtsApplicationsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AtsApplicationsAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(atsApplicationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Application
   *
   * @remarks
   * Create Application
   */
  async create(
    request: operations.AtsApplicationsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsAddResponse> {
    return unwrapAsync(atsApplicationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Application
   *
   * @remarks
   * Get Application
   */
  async get(
    request: operations.AtsApplicationsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsOneResponse> {
    return unwrapAsync(atsApplicationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Application
   *
   * @remarks
   * Update Application
   */
  async update(
    request: operations.AtsApplicationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsUpdateResponse> {
    return unwrapAsync(atsApplicationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Application
   *
   * @remarks
   * Delete Application
   */
  async delete(
    request: operations.AtsApplicationsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicationsDeleteResponse> {
    return unwrapAsync(atsApplicationsDelete(
      this,
      request,
      options,
    ));
  }
}
