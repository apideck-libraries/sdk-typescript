/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingCustomersCreate } from "../funcs/accountingCustomersCreate.js";
import { accountingCustomersDelete } from "../funcs/accountingCustomersDelete.js";
import { accountingCustomersGet } from "../funcs/accountingCustomersGet.js";
import { accountingCustomersList } from "../funcs/accountingCustomersList.js";
import { accountingCustomersUpdate } from "../funcs/accountingCustomersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Customers extends ClientSDK {
  /**
   * List Customers
   *
   * @remarks
   * List Customers
   */
  async list(
    request: operations.AccountingCustomersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersAllResponse> {
    return unwrapAsync(accountingCustomersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Customer
   *
   * @remarks
   * Create Customer
   */
  async create(
    request: operations.AccountingCustomersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersAddResponse> {
    return unwrapAsync(accountingCustomersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Customer
   *
   * @remarks
   * Get Customer
   */
  async get(
    request: operations.AccountingCustomersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersOneResponse> {
    return unwrapAsync(accountingCustomersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Customer
   *
   * @remarks
   * Update Customer
   */
  async update(
    request: operations.AccountingCustomersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersUpdateResponse> {
    return unwrapAsync(accountingCustomersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Customer
   *
   * @remarks
   * Delete Customer
   */
  async delete(
    request: operations.AccountingCustomersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersDeleteResponse> {
    return unwrapAsync(accountingCustomersDelete(
      this,
      request,
      options,
    ));
  }
}
