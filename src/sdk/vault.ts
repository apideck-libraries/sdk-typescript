/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { vaultVaultConnectionCustomMappingsAll } from "../funcs/vaultVaultConnectionCustomMappingsAll.js";
import { vaultVaultConnectionsAll } from "../funcs/vaultVaultConnectionsAll.js";
import { vaultVaultConnectionsDelete } from "../funcs/vaultVaultConnectionsDelete.js";
import { vaultVaultConnectionSettingsAll } from "../funcs/vaultVaultConnectionSettingsAll.js";
import { vaultVaultConnectionSettingsUpdate } from "../funcs/vaultVaultConnectionSettingsUpdate.js";
import { vaultVaultConnectionsImport } from "../funcs/vaultVaultConnectionsImport.js";
import { vaultVaultConnectionsOne } from "../funcs/vaultVaultConnectionsOne.js";
import { vaultVaultConnectionsToken } from "../funcs/vaultVaultConnectionsToken.js";
import { vaultVaultConnectionsUpdate } from "../funcs/vaultVaultConnectionsUpdate.js";
import { vaultVaultConsumerRequestCountsAll } from "../funcs/vaultVaultConsumerRequestCountsAll.js";
import { vaultVaultConsumersAdd } from "../funcs/vaultVaultConsumersAdd.js";
import { vaultVaultConsumersAll } from "../funcs/vaultVaultConsumersAll.js";
import { vaultVaultConsumersDelete } from "../funcs/vaultVaultConsumersDelete.js";
import { vaultVaultConsumersOne } from "../funcs/vaultVaultConsumersOne.js";
import { vaultVaultConsumersUpdate } from "../funcs/vaultVaultConsumersUpdate.js";
import { vaultVaultCreateCallbackState } from "../funcs/vaultVaultCreateCallbackState.js";
import { vaultVaultCustomFieldsAll } from "../funcs/vaultVaultCustomFieldsAll.js";
import { vaultVaultCustomMappingsAll } from "../funcs/vaultVaultCustomMappingsAll.js";
import { vaultVaultLogsAll } from "../funcs/vaultVaultLogsAll.js";
import { vaultVaultSessionsCreate } from "../funcs/vaultVaultSessionsCreate.js";
import { vaultVaultValidateConnectionState } from "../funcs/vaultVaultValidateConnectionState.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Vault extends ClientSDK {
  /**
   * Create consumer
   *
   * @remarks
   * Create a consumer
   */
  async vaultConsumersAdd(
    request: components.ConsumerInput,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumersAddResponse> {
    return unwrapAsync(vaultVaultConsumersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all consumers
   *
   * @remarks
   * This endpoint includes all application consumers, along with an aggregated count of requests made.
   */
  async vaultConsumersAll(
    request: operations.VaultConsumersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumersAllResponse> {
    return unwrapAsync(vaultVaultConsumersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get consumer
   *
   * @remarks
   * Consumer detail including their aggregated counts with the connections they have authorized.
   */
  async vaultConsumersOne(
    request: operations.VaultConsumersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumersOneResponse> {
    return unwrapAsync(vaultVaultConsumersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update consumer
   *
   * @remarks
   * Update consumer metadata such as name and email.
   */
  async vaultConsumersUpdate(
    request: operations.VaultConsumersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumersUpdateResponse> {
    return unwrapAsync(vaultVaultConsumersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete consumer
   *
   * @remarks
   * Delete consumer and all their connections, including credentials.
   */
  async vaultConsumersDelete(
    request: operations.VaultConsumersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumersDeleteResponse> {
    return unwrapAsync(vaultVaultConsumersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Consumer request counts
   *
   * @remarks
   * Get consumer request counts within a given datetime range.
   */
  async vaultConsumerRequestCountsAll(
    request: operations.VaultConsumerRequestCountsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConsumerRequestCountsAllResponse> {
    return unwrapAsync(vaultVaultConsumerRequestCountsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all connections
   *
   * @remarks
   * This endpoint includes all the configured integrations and contains the required assets
   * to build an integrations page where your users can install integrations.
   * OAuth2 supported integrations will contain authorize and revoke links to handle the authentication flows.
   */
  async vaultConnectionsAll(
    request: operations.VaultConnectionsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsAllResponse> {
    return unwrapAsync(vaultVaultConnectionsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get connection
   *
   * @remarks
   * Get a connection
   */
  async vaultConnectionsOne(
    request: operations.VaultConnectionsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsOneResponse> {
    return unwrapAsync(vaultVaultConnectionsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update connection
   *
   * @remarks
   * Update a connection
   */
  async vaultConnectionsUpdate(
    request: operations.VaultConnectionsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsUpdateResponse> {
    return unwrapAsync(vaultVaultConnectionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a connection
   *
   * @remarks
   * Deletes a connection
   */
  async vaultConnectionsDelete(
    request: operations.VaultConnectionsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsDeleteResponse> {
    return unwrapAsync(vaultVaultConnectionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Import connection
   *
   * @remarks
   * Import an authorized connection.
   */
  async vaultConnectionsImport(
    request: operations.VaultConnectionsImportRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsImportResponse> {
    return unwrapAsync(vaultVaultConnectionsImport(
      this,
      request,
      options,
    ));
  }

  /**
   * Authorize Access Token
   *
   * @remarks
   * Triggers exchanging persisted connection credentials for an access token and store it in Vault. Currently supported for connections with the `client_credentials` or `password` OAuth grant type.
   *
   * Note:
   *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the exchange of persisted connection credentials for an access token.
   *   - The access token will not be returned in the response. A 200 response code indicates the authorization was successful and that a valid access token was stored on the connection.
   *   - The access token will be used for subsequent API requests.
   */
  async vaultConnectionsToken(
    request: operations.VaultConnectionsTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionsTokenResponse> {
    return unwrapAsync(vaultVaultConnectionsToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate Connection State
   *
   * @remarks
   * This endpoint validates the current state of a given connection. This will perform different checks based on the connection auth type. For basic and apiKey auth types, the presence of required fields is checked.
   * For connectors that implement OAuth2, this operation forces the refresh flow for an access token regardless of its expiry.
   *
   * Note:
   *   - Do not include any credentials in the request body. This operation does not persist changes, but only triggers the validation of connection state.
   *   - If a refresh token flow was performed and successful, the new access token will then be used for subsequent API requests.
   */
  async vaultValidateConnectionState(
    request: operations.VaultValidateConnectionStateRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultValidateConnectionStateResponse> {
    return unwrapAsync(vaultVaultValidateConnectionState(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Callback State
   *
   * @remarks
   * This endpoint creates a callback state that can be used to issue requests to the callback endpoint.
   */
  async vaultCreateCallbackState(
    request: operations.VaultCreateCallbackStateRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultCreateCallbackStateResponse> {
    return unwrapAsync(vaultVaultCreateCallbackState(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resource settings
   *
   * @remarks
   * This endpoint returns custom settings and their defaults required by connection for a given resource.
   */
  async vaultConnectionSettingsAll(
    request: operations.VaultConnectionSettingsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionSettingsAllResponse> {
    return unwrapAsync(vaultVaultConnectionSettingsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Update settings
   *
   * @remarks
   * Update default values for a connection's resource settings
   */
  async vaultConnectionSettingsUpdate(
    request: operations.VaultConnectionSettingsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionSettingsUpdateResponse> {
    return unwrapAsync(vaultVaultConnectionSettingsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resource custom fields
   *
   * @remarks
   * This endpoint returns an custom fields on a connection resource.
   */
  async vaultCustomFieldsAll(
    request: operations.VaultCustomFieldsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultCustomFieldsAllResponse> {
    return unwrapAsync(vaultVaultCustomFieldsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * List connection custom mappings
   *
   * @remarks
   * This endpoint returns a list of custom mappings for a connection.
   */
  async vaultConnectionCustomMappingsAll(
    request: operations.VaultConnectionCustomMappingsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultConnectionCustomMappingsAllResponse> {
    return unwrapAsync(vaultVaultConnectionCustomMappingsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * List custom mappings
   *
   * @remarks
   * This endpoint returns a list of custom mappings.
   */
  async vaultCustomMappingsAll(
    request: operations.VaultCustomMappingsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultCustomMappingsAllResponse> {
    return unwrapAsync(vaultVaultCustomMappingsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Session
   *
   * @remarks
   * Making a POST request to this endpoint will initiate a Hosted Vault session. Redirect the consumer to the returned
   * URL to allow temporary access to manage their integrations and settings.
   *
   * Note: This is a short lived token that will expire after 1 hour (TTL: 3600).
   */
  async vaultSessionsCreate(
    request?: components.Session | undefined,
    options?: RequestOptions,
  ): Promise<operations.VaultSessionsCreateResponse> {
    return unwrapAsync(vaultVaultSessionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all consumer request logs
   *
   * @remarks
   * This endpoint includes all consumer request logs.
   */
  async vaultLogsAll(
    request: operations.VaultLogsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.VaultLogsAllResponse> {
    return unwrapAsync(vaultVaultLogsAll(
      this,
      request,
      options,
    ));
  }
}
