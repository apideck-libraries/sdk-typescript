/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingLocationsCreate } from "../funcs/accountingLocationsCreate.js";
import { accountingLocationsDelete } from "../funcs/accountingLocationsDelete.js";
import { accountingLocationsGet } from "../funcs/accountingLocationsGet.js";
import { accountingLocationsList } from "../funcs/accountingLocationsList.js";
import { accountingLocationsUpdate } from "../funcs/accountingLocationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Locations extends ClientSDK {
  /**
   * List Locations
   *
   * @remarks
   * List Locations
   */
  async list(
    request: operations.AccountingLocationsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsAllResponse> {
    return unwrapAsync(accountingLocationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Location
   *
   * @remarks
   * Create Location
   */
  async create(
    request: operations.AccountingLocationsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsAddResponse> {
    return unwrapAsync(accountingLocationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Location
   *
   * @remarks
   * Get Location
   */
  async get(
    request: operations.AccountingLocationsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsOneResponse> {
    return unwrapAsync(accountingLocationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Location
   *
   * @remarks
   * Update Location
   */
  async update(
    request: operations.AccountingLocationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsUpdateResponse> {
    return unwrapAsync(accountingLocationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Location
   *
   * @remarks
   * Delete Location
   */
  async delete(
    request: operations.AccountingLocationsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsDeleteResponse> {
    return unwrapAsync(accountingLocationsDelete(
      this,
      request,
      options,
    ));
  }
}
