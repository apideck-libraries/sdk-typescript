/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookWebhooksCreate } from "../funcs/webhookWebhooksCreate.js";
import { webhookWebhooksDelete } from "../funcs/webhookWebhooksDelete.js";
import { webhookWebhooksGet } from "../funcs/webhookWebhooksGet.js";
import { webhookWebhooksList } from "../funcs/webhookWebhooksList.js";
import { webhookWebhooksUpdate } from "../funcs/webhookWebhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Webhooks extends ClientSDK {
  /**
   * List webhook subscriptions
   *
   * @remarks
   * List all webhook subscriptions
   */
  async list(
    request: operations.WebhookWebhooksAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.WebhookWebhooksAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(webhookWebhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create webhook subscription
   *
   * @remarks
   * Create a webhook subscription to receive events
   */
  async create(
    request: operations.WebhookWebhooksAddRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksAddResponse> {
    return unwrapAsync(webhookWebhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get webhook subscription
   *
   * @remarks
   * Get the webhook subscription details
   */
  async get(
    request: operations.WebhookWebhooksOneRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksOneResponse> {
    return unwrapAsync(webhookWebhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update webhook subscription
   *
   * @remarks
   * Update a webhook subscription
   */
  async update(
    request: operations.WebhookWebhooksUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksUpdateResponse> {
    return unwrapAsync(webhookWebhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete webhook subscription
   *
   * @remarks
   * Delete a webhook subscription
   */
  async delete(
    request: operations.WebhookWebhooksDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksDeleteResponse> {
    return unwrapAsync(webhookWebhooksDelete(
      this,
      request,
      options,
    ));
  }
}
