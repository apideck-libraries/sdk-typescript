/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisDepartmentsCreate } from "../funcs/hrisDepartmentsCreate.js";
import { hrisDepartmentsDelete } from "../funcs/hrisDepartmentsDelete.js";
import { hrisDepartmentsGet } from "../funcs/hrisDepartmentsGet.js";
import { hrisDepartmentsList } from "../funcs/hrisDepartmentsList.js";
import { hrisDepartmentsUpdate } from "../funcs/hrisDepartmentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Departments extends ClientSDK {
  /**
   * List Departments
   *
   * @remarks
   * List Departments
   */
  async list(
    request: operations.HrisDepartmentsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisDepartmentsAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisDepartmentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Department
   *
   * @remarks
   * Create Department
   */
  async create(
    request: operations.HrisDepartmentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsAddResponse> {
    return unwrapAsync(hrisDepartmentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Department
   *
   * @remarks
   * Get Department
   */
  async get(
    request: operations.HrisDepartmentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsOneResponse> {
    return unwrapAsync(hrisDepartmentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Department
   *
   * @remarks
   * Update Department
   */
  async update(
    request: operations.HrisDepartmentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsUpdateResponse> {
    return unwrapAsync(hrisDepartmentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Department
   *
   * @remarks
   * Delete Department
   */
  async delete(
    request: operations.HrisDepartmentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsDeleteResponse> {
    return unwrapAsync(hrisDepartmentsDelete(
      this,
      request,
      options,
    ));
  }
}
