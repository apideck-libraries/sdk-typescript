/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageFilesDelete } from "../funcs/fileStorageFilesDelete.js";
import {
  DownloadAcceptEnum,
  fileStorageFilesDownload,
} from "../funcs/fileStorageFilesDownload.js";
import {
  ExportAcceptEnum,
  fileStorageFilesExport,
} from "../funcs/fileStorageFilesExport.js";
import { fileStorageFilesGet } from "../funcs/fileStorageFilesGet.js";
import { fileStorageFilesList } from "../funcs/fileStorageFilesList.js";
import { fileStorageFilesSearch } from "../funcs/fileStorageFilesSearch.js";
import { fileStorageFilesUpdate } from "../funcs/fileStorageFilesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export { DownloadAcceptEnum } from "../funcs/fileStorageFilesDownload.js";

export { ExportAcceptEnum } from "../funcs/fileStorageFilesExport.js";

export class Files extends ClientSDK {
  /**
   * List Files
   *
   * @remarks
   * List Files
   */
  async list(
    request: operations.FileStorageFilesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.FileStorageFilesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(fileStorageFilesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Search Files
   *
   * @remarks
   * Search Files
   */
  async search(
    request: operations.FileStorageFilesSearchRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesSearchResponse> {
    return unwrapAsync(fileStorageFilesSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Get File
   *
   * @remarks
   * Get File
   */
  async get(
    request: operations.FileStorageFilesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesOneResponse> {
    return unwrapAsync(fileStorageFilesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Rename or move File
   *
   * @remarks
   * Rename or move File
   */
  async update(
    request: operations.FileStorageFilesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesUpdateResponse> {
    return unwrapAsync(fileStorageFilesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete File
   *
   * @remarks
   * Delete File
   */
  async delete(
    request: operations.FileStorageFilesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFilesDeleteResponse> {
    return unwrapAsync(fileStorageFilesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Download File
   *
   * @remarks
   * Download File
   */
  async download(
    request: operations.FileStorageFilesDownloadRequest,
    options?: RequestOptions & { acceptHeaderOverride?: DownloadAcceptEnum },
  ): Promise<operations.FileStorageFilesDownloadResponse> {
    return unwrapAsync(fileStorageFilesDownload(
      this,
      request,
      options,
    ));
  }

  /**
   * Export File
   *
   * @remarks
   * Export File
   */
  async export(
    request: operations.FileStorageFilesExportRequest,
    options?: RequestOptions & { acceptHeaderOverride?: ExportAcceptEnum },
  ): Promise<operations.FileStorageFilesExportResponse> {
    return unwrapAsync(fileStorageFilesExport(
      this,
      request,
      options,
    ));
  }
}
