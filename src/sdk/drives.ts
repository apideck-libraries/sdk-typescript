/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageDrivesCreate } from "../funcs/fileStorageDrivesCreate.js";
import { fileStorageDrivesDelete } from "../funcs/fileStorageDrivesDelete.js";
import { fileStorageDrivesGet } from "../funcs/fileStorageDrivesGet.js";
import { fileStorageDrivesList } from "../funcs/fileStorageDrivesList.js";
import { fileStorageDrivesUpdate } from "../funcs/fileStorageDrivesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Drives extends ClientSDK {
  /**
   * List Drives
   *
   * @remarks
   * List Drives
   */
  async list(
    request: operations.FileStorageDrivesAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.FileStorageDrivesAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(fileStorageDrivesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Drive
   *
   * @remarks
   * Create Drive
   */
  async create(
    request: operations.FileStorageDrivesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesAddResponse> {
    return unwrapAsync(fileStorageDrivesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Drive
   *
   * @remarks
   * Get Drive
   */
  async get(
    request: operations.FileStorageDrivesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesOneResponse> {
    return unwrapAsync(fileStorageDrivesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Drive
   *
   * @remarks
   * Update Drive
   */
  async update(
    request: operations.FileStorageDrivesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesUpdateResponse> {
    return unwrapAsync(fileStorageDrivesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Drive
   *
   * @remarks
   * Delete Drive
   */
  async delete(
    request: operations.FileStorageDrivesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDrivesDeleteResponse> {
    return unwrapAsync(fileStorageDrivesDelete(
      this,
      request,
      options,
    ));
  }
}
