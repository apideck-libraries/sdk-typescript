/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingInvoiceItemsCreate } from "../funcs/accountingInvoiceItemsCreate.js";
import { accountingInvoiceItemsDelete } from "../funcs/accountingInvoiceItemsDelete.js";
import { accountingInvoiceItemsGet } from "../funcs/accountingInvoiceItemsGet.js";
import { accountingInvoiceItemsList } from "../funcs/accountingInvoiceItemsList.js";
import { accountingInvoiceItemsUpdate } from "../funcs/accountingInvoiceItemsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class InvoiceItems extends ClientSDK {
  /**
   * List Invoice Items
   *
   * @remarks
   * List Invoice Items
   */
  async list(
    request: operations.AccountingInvoiceItemsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingInvoiceItemsAllResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingInvoiceItemsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Invoice Item
   *
   * @remarks
   * Create Invoice Item
   */
  async create(
    request: operations.AccountingInvoiceItemsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsAddResponse> {
    return unwrapAsync(accountingInvoiceItemsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Invoice Item
   *
   * @remarks
   * Get Invoice Item
   */
  async get(
    request: operations.AccountingInvoiceItemsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsOneResponse> {
    return unwrapAsync(accountingInvoiceItemsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Invoice Item
   *
   * @remarks
   * Update Invoice Item
   */
  async update(
    request: operations.AccountingInvoiceItemsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsUpdateResponse> {
    return unwrapAsync(accountingInvoiceItemsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Invoice Item
   *
   * @remarks
   * Delete Invoice Item
   */
  async delete(
    request: operations.AccountingInvoiceItemsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsDeleteResponse> {
    return unwrapAsync(accountingInvoiceItemsDelete(
      this,
      request,
      options,
    ));
  }
}
