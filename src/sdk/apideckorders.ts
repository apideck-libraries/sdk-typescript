/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { posOrdersCreate } from "../funcs/posOrdersCreate.js";
import { posOrdersDelete } from "../funcs/posOrdersDelete.js";
import { posOrdersGet } from "../funcs/posOrdersGet.js";
import { posOrdersList } from "../funcs/posOrdersList.js";
import { posOrdersPay } from "../funcs/posOrdersPay.js";
import { posOrdersUpdate } from "../funcs/posOrdersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ApideckOrders extends ClientSDK {
  /**
   * List Orders
   *
   * @remarks
   * List Orders
   */
  async list(
    request: operations.PosOrdersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersAllResponse> {
    return unwrapAsync(posOrdersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Order
   *
   * @remarks
   * Create Order
   */
  async create(
    request: operations.PosOrdersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersAddResponse> {
    return unwrapAsync(posOrdersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Order
   *
   * @remarks
   * Get Order
   */
  async get(
    request: operations.PosOrdersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersOneResponse> {
    return unwrapAsync(posOrdersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Order
   *
   * @remarks
   * Updates an open order by adding, replacing, or deleting fields. Square-only: Orders with a `completed` or `canceled` status cannot be updated. To pay for an order, use the [payments endpoint](#tag/Payments).
   */
  async update(
    request: operations.PosOrdersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersUpdateResponse> {
    return unwrapAsync(posOrdersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Order
   *
   * @remarks
   * Delete Order
   */
  async delete(
    request: operations.PosOrdersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersDeleteResponse> {
    return unwrapAsync(posOrdersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Pay Order
   *
   * @remarks
   * Pay Order
   */
  async pay(
    request: operations.PosOrdersPayRequest,
    options?: RequestOptions,
  ): Promise<operations.PosOrdersPayResponse> {
    return unwrapAsync(posOrdersPay(
      this,
      request,
      options,
    ));
  }
}
