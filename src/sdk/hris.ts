/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisHrisCompaniesAdd } from "../funcs/hrisHrisCompaniesAdd.js";
import { hrisHrisCompaniesAll } from "../funcs/hrisHrisCompaniesAll.js";
import { hrisHrisCompaniesDelete } from "../funcs/hrisHrisCompaniesDelete.js";
import { hrisHrisCompaniesOne } from "../funcs/hrisHrisCompaniesOne.js";
import { hrisHrisCompaniesUpdate } from "../funcs/hrisHrisCompaniesUpdate.js";
import { hrisHrisDepartmentsAdd } from "../funcs/hrisHrisDepartmentsAdd.js";
import { hrisHrisDepartmentsAll } from "../funcs/hrisHrisDepartmentsAll.js";
import { hrisHrisDepartmentsDelete } from "../funcs/hrisHrisDepartmentsDelete.js";
import { hrisHrisDepartmentsOne } from "../funcs/hrisHrisDepartmentsOne.js";
import { hrisHrisDepartmentsUpdate } from "../funcs/hrisHrisDepartmentsUpdate.js";
import { hrisHrisEmployeePayrollsAll } from "../funcs/hrisHrisEmployeePayrollsAll.js";
import { hrisHrisEmployeePayrollsOne } from "../funcs/hrisHrisEmployeePayrollsOne.js";
import { hrisHrisEmployeesAdd } from "../funcs/hrisHrisEmployeesAdd.js";
import { hrisHrisEmployeesAll } from "../funcs/hrisHrisEmployeesAll.js";
import { hrisHrisEmployeeSchedulesAll } from "../funcs/hrisHrisEmployeeSchedulesAll.js";
import { hrisHrisEmployeesDelete } from "../funcs/hrisHrisEmployeesDelete.js";
import { hrisHrisEmployeesOne } from "../funcs/hrisHrisEmployeesOne.js";
import { hrisHrisEmployeesUpdate } from "../funcs/hrisHrisEmployeesUpdate.js";
import { hrisHrisPayrollsAll } from "../funcs/hrisHrisPayrollsAll.js";
import { hrisHrisPayrollsOne } from "../funcs/hrisHrisPayrollsOne.js";
import { hrisHrisTimeOffRequestsAdd } from "../funcs/hrisHrisTimeOffRequestsAdd.js";
import { hrisHrisTimeOffRequestsAll } from "../funcs/hrisHrisTimeOffRequestsAll.js";
import { hrisHrisTimeOffRequestsDelete } from "../funcs/hrisHrisTimeOffRequestsDelete.js";
import { hrisHrisTimeOffRequestsOne } from "../funcs/hrisHrisTimeOffRequestsOne.js";
import { hrisHrisTimeOffRequestsUpdate } from "../funcs/hrisHrisTimeOffRequestsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Hris extends ClientSDK {
  /**
   * List Employees
   *
   * @remarks
   * Apideck operates as a stateless Unified API, which means that the list endpoint only provides a portion of the employee model. This is due to the fact that most HRIS systems do not readily provide all data in every call. However, you can access the complete employee model through an employee detail call.
   */
  async hrisEmployeesAll(
    request: operations.HrisEmployeesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeesAllResponse> {
    return unwrapAsync(hrisHrisEmployeesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Employee
   *
   * @remarks
   * Create Employee
   */
  async hrisEmployeesAdd(
    request: operations.HrisEmployeesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeesAddResponse> {
    return unwrapAsync(hrisHrisEmployeesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee
   *
   * @remarks
   * Get Employee
   */
  async hrisEmployeesOne(
    request: operations.HrisEmployeesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeesOneResponse> {
    return unwrapAsync(hrisHrisEmployeesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Employee
   *
   * @remarks
   * Update Employee
   */
  async hrisEmployeesUpdate(
    request: operations.HrisEmployeesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeesUpdateResponse> {
    return unwrapAsync(hrisHrisEmployeesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Employee
   *
   * @remarks
   * Delete Employee
   */
  async hrisEmployeesDelete(
    request: operations.HrisEmployeesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeesDeleteResponse> {
    return unwrapAsync(hrisHrisEmployeesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Companies
   *
   * @remarks
   * List Companies
   */
  async hrisCompaniesAll(
    request: operations.HrisCompaniesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesAllResponse> {
    return unwrapAsync(hrisHrisCompaniesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Company
   *
   * @remarks
   * Create Company
   */
  async hrisCompaniesAdd(
    request: operations.HrisCompaniesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesAddResponse> {
    return unwrapAsync(hrisHrisCompaniesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Company
   *
   * @remarks
   * Get Company
   */
  async hrisCompaniesOne(
    request: operations.HrisCompaniesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesOneResponse> {
    return unwrapAsync(hrisHrisCompaniesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Company
   *
   * @remarks
   * Update Company
   */
  async hrisCompaniesUpdate(
    request: operations.HrisCompaniesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesUpdateResponse> {
    return unwrapAsync(hrisHrisCompaniesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Company
   *
   * @remarks
   * Delete Company
   */
  async hrisCompaniesDelete(
    request: operations.HrisCompaniesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisCompaniesDeleteResponse> {
    return unwrapAsync(hrisHrisCompaniesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Departments
   *
   * @remarks
   * List Departments
   */
  async hrisDepartmentsAll(
    request: operations.HrisDepartmentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsAllResponse> {
    return unwrapAsync(hrisHrisDepartmentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Department
   *
   * @remarks
   * Create Department
   */
  async hrisDepartmentsAdd(
    request: operations.HrisDepartmentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsAddResponse> {
    return unwrapAsync(hrisHrisDepartmentsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Department
   *
   * @remarks
   * Get Department
   */
  async hrisDepartmentsOne(
    request: operations.HrisDepartmentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsOneResponse> {
    return unwrapAsync(hrisHrisDepartmentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Department
   *
   * @remarks
   * Update Department
   */
  async hrisDepartmentsUpdate(
    request: operations.HrisDepartmentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsUpdateResponse> {
    return unwrapAsync(hrisHrisDepartmentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Department
   *
   * @remarks
   * Delete Department
   */
  async hrisDepartmentsDelete(
    request: operations.HrisDepartmentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisDepartmentsDeleteResponse> {
    return unwrapAsync(hrisHrisDepartmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Payroll
   *
   * @remarks
   * List Payroll
   */
  async hrisPayrollsAll(
    request: operations.HrisPayrollsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisPayrollsAllResponse> {
    return unwrapAsync(hrisHrisPayrollsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Payroll
   *
   * @remarks
   * Get Payroll
   */
  async hrisPayrollsOne(
    request: operations.HrisPayrollsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisPayrollsOneResponse> {
    return unwrapAsync(hrisHrisPayrollsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Payrolls
   *
   * @remarks
   * List payrolls for employee
   */
  async hrisEmployeePayrollsAll(
    request: operations.HrisEmployeePayrollsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeePayrollsAllResponse> {
    return unwrapAsync(hrisHrisEmployeePayrollsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Employee Payroll
   *
   * @remarks
   * Get payroll for employee
   */
  async hrisEmployeePayrollsOne(
    request: operations.HrisEmployeePayrollsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeePayrollsOneResponse> {
    return unwrapAsync(hrisHrisEmployeePayrollsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Employee Schedules
   *
   * @remarks
   * List schedules for employee, a schedule is a work pattern, not the actual worked hours, for an employee.
   */
  async hrisEmployeeSchedulesAll(
    request: operations.HrisEmployeeSchedulesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisEmployeeSchedulesAllResponse> {
    return unwrapAsync(hrisHrisEmployeeSchedulesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * List Time Off Requests
   *
   * @remarks
   * List Time Off Requests
   */
  async hrisTimeOffRequestsAll(
    request: operations.HrisTimeOffRequestsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsAllResponse> {
    return unwrapAsync(hrisHrisTimeOffRequestsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Time Off Request
   *
   * @remarks
   * Create Time Off Request
   */
  async hrisTimeOffRequestsAdd(
    request: operations.HrisTimeOffRequestsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsAddResponse> {
    return unwrapAsync(hrisHrisTimeOffRequestsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Time Off Request
   *
   * @remarks
   * Get Time Off Request
   */
  async hrisTimeOffRequestsOne(
    request: operations.HrisTimeOffRequestsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsOneResponse> {
    return unwrapAsync(hrisHrisTimeOffRequestsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Time Off Request
   *
   * @remarks
   * Update Time Off Request
   */
  async hrisTimeOffRequestsUpdate(
    request: operations.HrisTimeOffRequestsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsUpdateResponse> {
    return unwrapAsync(hrisHrisTimeOffRequestsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Time Off Request
   *
   * @remarks
   * Delete Time Off Request
   */
  async hrisTimeOffRequestsDelete(
    request: operations.HrisTimeOffRequestsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsDeleteResponse> {
    return unwrapAsync(hrisHrisTimeOffRequestsDelete(
      this,
      request,
      options,
    ));
  }
}
