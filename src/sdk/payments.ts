/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingPaymentsCreate } from "../funcs/accountingPaymentsCreate.js";
import { accountingPaymentsDelete } from "../funcs/accountingPaymentsDelete.js";
import { accountingPaymentsGet } from "../funcs/accountingPaymentsGet.js";
import { accountingPaymentsList } from "../funcs/accountingPaymentsList.js";
import { accountingPaymentsUpdate } from "../funcs/accountingPaymentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Payments extends ClientSDK {
  /**
   * List Payments
   *
   * @remarks
   * List Payments
   */
  async list(
    request: operations.AccountingPaymentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsAllResponse> {
    return unwrapAsync(accountingPaymentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Payment
   *
   * @remarks
   * Create Payment
   */
  async create(
    request: operations.AccountingPaymentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsAddResponse> {
    return unwrapAsync(accountingPaymentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Payment
   *
   * @remarks
   * Get Payment
   */
  async get(
    request: operations.AccountingPaymentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsOneResponse> {
    return unwrapAsync(accountingPaymentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Payment
   *
   * @remarks
   * Update Payment
   */
  async update(
    request: operations.AccountingPaymentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsUpdateResponse> {
    return unwrapAsync(accountingPaymentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Payment
   *
   * @remarks
   * Delete Payment
   */
  async delete(
    request: operations.AccountingPaymentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsDeleteResponse> {
    return unwrapAsync(accountingPaymentsDelete(
      this,
      request,
      options,
    ));
  }
}
