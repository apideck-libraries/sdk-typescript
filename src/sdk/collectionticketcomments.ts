/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { issueTrackingCollectionTicketCommentsCreate } from "../funcs/issueTrackingCollectionTicketCommentsCreate.js";
import { issueTrackingCollectionTicketCommentsDelete } from "../funcs/issueTrackingCollectionTicketCommentsDelete.js";
import { issueTrackingCollectionTicketCommentsGet } from "../funcs/issueTrackingCollectionTicketCommentsGet.js";
import { issueTrackingCollectionTicketCommentsList } from "../funcs/issueTrackingCollectionTicketCommentsList.js";
import { issueTrackingCollectionTicketCommentsUpdate } from "../funcs/issueTrackingCollectionTicketCommentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CollectionTicketComments extends ClientSDK {
  /**
   * List Comments
   *
   * @remarks
   * List Comments
   */
  async list(
    request: operations.IssueTrackingCollectionTicketCommentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsAllResponse> {
    return unwrapAsync(issueTrackingCollectionTicketCommentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Comment
   *
   * @remarks
   * Create Comment
   */
  async create(
    request: operations.IssueTrackingCollectionTicketCommentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsAddResponse> {
    return unwrapAsync(issueTrackingCollectionTicketCommentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Comment
   *
   * @remarks
   * Get Comment
   */
  async get(
    request: operations.IssueTrackingCollectionTicketCommentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsOneResponse> {
    return unwrapAsync(issueTrackingCollectionTicketCommentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Comment
   *
   * @remarks
   * Update Comment
   */
  async update(
    request: operations.IssueTrackingCollectionTicketCommentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsUpdateResponse> {
    return unwrapAsync(issueTrackingCollectionTicketCommentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Comment
   *
   * @remarks
   * Delete Comment
   */
  async delete(
    request: operations.IssueTrackingCollectionTicketCommentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.IssueTrackingCollectionTicketCommentsDeleteResponse> {
    return unwrapAsync(issueTrackingCollectionTicketCommentsDelete(
      this,
      request,
      options,
    ));
  }
}
