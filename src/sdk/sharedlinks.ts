/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageSharedLinksCreate } from "../funcs/fileStorageSharedLinksCreate.js";
import { fileStorageSharedLinksDelete } from "../funcs/fileStorageSharedLinksDelete.js";
import { fileStorageSharedLinksGet } from "../funcs/fileStorageSharedLinksGet.js";
import { fileStorageSharedLinksList } from "../funcs/fileStorageSharedLinksList.js";
import { fileStorageSharedLinksUpdate } from "../funcs/fileStorageSharedLinksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SharedLinks extends ClientSDK {
  /**
   * List SharedLinks
   *
   * @remarks
   * List SharedLinks
   */
  async list(
    request: operations.FileStorageSharedLinksAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksAllResponse> {
    return unwrapAsync(fileStorageSharedLinksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Shared Link
   *
   * @remarks
   * Create Shared Link
   */
  async create(
    request: operations.FileStorageSharedLinksAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksAddResponse> {
    return unwrapAsync(fileStorageSharedLinksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Shared Link
   *
   * @remarks
   * Get Shared Link
   */
  async get(
    request: operations.FileStorageSharedLinksOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksOneResponse> {
    return unwrapAsync(fileStorageSharedLinksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Shared Link
   *
   * @remarks
   * Update Shared Link
   */
  async update(
    request: operations.FileStorageSharedLinksUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksUpdateResponse> {
    return unwrapAsync(fileStorageSharedLinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Shared Link
   *
   * @remarks
   * Delete Shared Link
   */
  async delete(
    request: operations.FileStorageSharedLinksDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageSharedLinksDeleteResponse> {
    return unwrapAsync(fileStorageSharedLinksDelete(
      this,
      request,
      options,
    ));
  }
}
