/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmCompaniesCreate } from "../funcs/crmCompaniesCreate.js";
import { crmCompaniesDelete } from "../funcs/crmCompaniesDelete.js";
import { crmCompaniesGet } from "../funcs/crmCompaniesGet.js";
import { crmCompaniesList } from "../funcs/crmCompaniesList.js";
import { crmCompaniesUpdate } from "../funcs/crmCompaniesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Companies extends ClientSDK {
  /**
   * List companies
   *
   * @remarks
   * List companies
   */
  async list(
    request: operations.CrmCompaniesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesAllResponse> {
    return unwrapAsync(crmCompaniesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create company
   *
   * @remarks
   * Create company
   */
  async create(
    request: operations.CrmCompaniesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesAddResponse> {
    return unwrapAsync(crmCompaniesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get company
   *
   * @remarks
   * Get company
   */
  async get(
    request: operations.CrmCompaniesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesOneResponse> {
    return unwrapAsync(crmCompaniesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update company
   *
   * @remarks
   * Update company
   */
  async update(
    request: operations.CrmCompaniesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesUpdateResponse> {
    return unwrapAsync(crmCompaniesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete company
   *
   * @remarks
   * Delete company
   */
  async delete(
    request: operations.CrmCompaniesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesDeleteResponse> {
    return unwrapAsync(crmCompaniesDelete(
      this,
      request,
      options,
    ));
  }
}
