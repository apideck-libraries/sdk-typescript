/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookWebhookEventLogsAll } from "../funcs/webhookWebhookEventLogsAll.js";
import { webhookWebhookWebhooksAdd } from "../funcs/webhookWebhookWebhooksAdd.js";
import { webhookWebhookWebhooksAll } from "../funcs/webhookWebhookWebhooksAll.js";
import { webhookWebhookWebhooksDelete } from "../funcs/webhookWebhookWebhooksDelete.js";
import { webhookWebhookWebhooksOne } from "../funcs/webhookWebhookWebhooksOne.js";
import { webhookWebhookWebhooksUpdate } from "../funcs/webhookWebhookWebhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Webhook extends ClientSDK {
  /**
   * List webhook subscriptions
   *
   * @remarks
   * List all webhook subscriptions
   */
  async webhookWebhooksAll(
    request: operations.WebhookWebhooksAllRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksAllResponse> {
    return unwrapAsync(webhookWebhookWebhooksAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create webhook subscription
   *
   * @remarks
   * Create a webhook subscription to receive events
   */
  async webhookWebhooksAdd(
    request: components.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksAddResponse> {
    return unwrapAsync(webhookWebhookWebhooksAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get webhook subscription
   *
   * @remarks
   * Get the webhook subscription details
   */
  async webhookWebhooksOne(
    request: operations.WebhookWebhooksOneRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksOneResponse> {
    return unwrapAsync(webhookWebhookWebhooksOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update webhook subscription
   *
   * @remarks
   * Update a webhook subscription
   */
  async webhookWebhooksUpdate(
    request: operations.WebhookWebhooksUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksUpdateResponse> {
    return unwrapAsync(webhookWebhookWebhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete webhook subscription
   *
   * @remarks
   * Delete a webhook subscription
   */
  async webhookWebhooksDelete(
    request: operations.WebhookWebhooksDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookWebhooksDeleteResponse> {
    return unwrapAsync(webhookWebhookWebhooksDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List event logs
   *
   * @remarks
   * List event logs
   */
  async webhookEventLogsAll(
    request: operations.WebhookEventLogsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.WebhookEventLogsAllResponse> {
    return unwrapAsync(webhookWebhookEventLogsAll(
      this,
      request,
      options,
    ));
  }
}
