/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageDriveGroupsCreate } from "../funcs/fileStorageDriveGroupsCreate.js";
import { fileStorageDriveGroupsDelete } from "../funcs/fileStorageDriveGroupsDelete.js";
import { fileStorageDriveGroupsGet } from "../funcs/fileStorageDriveGroupsGet.js";
import { fileStorageDriveGroupsList } from "../funcs/fileStorageDriveGroupsList.js";
import { fileStorageDriveGroupsUpdate } from "../funcs/fileStorageDriveGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DriveGroups extends ClientSDK {
  /**
   * List DriveGroups
   *
   * @remarks
   * List DriveGroups
   */
  async list(
    request: operations.FileStorageDriveGroupsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsAllResponse> {
    return unwrapAsync(fileStorageDriveGroupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create DriveGroup
   *
   * @remarks
   * Create DriveGroup
   */
  async create(
    request: operations.FileStorageDriveGroupsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsAddResponse> {
    return unwrapAsync(fileStorageDriveGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get DriveGroup
   *
   * @remarks
   * Get DriveGroup
   */
  async get(
    request: operations.FileStorageDriveGroupsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsOneResponse> {
    return unwrapAsync(fileStorageDriveGroupsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update DriveGroup
   *
   * @remarks
   * Update DriveGroup
   */
  async update(
    request: operations.FileStorageDriveGroupsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsUpdateResponse> {
    return unwrapAsync(fileStorageDriveGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete DriveGroup
   *
   * @remarks
   * Delete DriveGroup
   */
  async delete(
    request: operations.FileStorageDriveGroupsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageDriveGroupsDeleteResponse> {
    return unwrapAsync(fileStorageDriveGroupsDelete(
      this,
      request,
      options,
    ));
  }
}
