/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { hrisTimeOffRequestsCreate } from "../funcs/hrisTimeOffRequestsCreate.js";
import { hrisTimeOffRequestsDelete } from "../funcs/hrisTimeOffRequestsDelete.js";
import { hrisTimeOffRequestsGet } from "../funcs/hrisTimeOffRequestsGet.js";
import { hrisTimeOffRequestsList } from "../funcs/hrisTimeOffRequestsList.js";
import { hrisTimeOffRequestsUpdate } from "../funcs/hrisTimeOffRequestsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class TimeOffRequests extends ClientSDK {
  /**
   * List Time Off Requests
   *
   * @remarks
   * List Time Off Requests
   */
  async list(
    request: operations.HrisTimeOffRequestsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.HrisTimeOffRequestsAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(hrisTimeOffRequestsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Time Off Request
   *
   * @remarks
   * Create Time Off Request
   */
  async create(
    request: operations.HrisTimeOffRequestsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsAddResponse> {
    return unwrapAsync(hrisTimeOffRequestsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Time Off Request
   *
   * @remarks
   * Get Time Off Request
   */
  async get(
    request: operations.HrisTimeOffRequestsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsOneResponse> {
    return unwrapAsync(hrisTimeOffRequestsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Time Off Request
   *
   * @remarks
   * Update Time Off Request
   */
  async update(
    request: operations.HrisTimeOffRequestsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsUpdateResponse> {
    return unwrapAsync(hrisTimeOffRequestsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Time Off Request
   *
   * @remarks
   * Delete Time Off Request
   */
  async delete(
    request: operations.HrisTimeOffRequestsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.HrisTimeOffRequestsDeleteResponse> {
    return unwrapAsync(hrisTimeOffRequestsDelete(
      this,
      request,
      options,
    ));
  }
}
