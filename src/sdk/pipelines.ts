/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmPipelinesCreate } from "../funcs/crmPipelinesCreate.js";
import { crmPipelinesDelete } from "../funcs/crmPipelinesDelete.js";
import { crmPipelinesGet } from "../funcs/crmPipelinesGet.js";
import { crmPipelinesList } from "../funcs/crmPipelinesList.js";
import { crmPipelinesUpdate } from "../funcs/crmPipelinesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Pipelines extends ClientSDK {
  /**
   * List pipelines
   *
   * @remarks
   * List pipelines
   */
  async list(
    request: operations.CrmPipelinesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesAllResponse> {
    return unwrapAsync(crmPipelinesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create pipeline
   *
   * @remarks
   * Create pipeline
   */
  async create(
    request: operations.CrmPipelinesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesAddResponse> {
    return unwrapAsync(crmPipelinesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pipeline
   *
   * @remarks
   * Get pipeline
   */
  async get(
    request: operations.CrmPipelinesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesOneResponse> {
    return unwrapAsync(crmPipelinesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update pipeline
   *
   * @remarks
   * Update pipeline
   */
  async update(
    request: operations.CrmPipelinesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesUpdateResponse> {
    return unwrapAsync(crmPipelinesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete pipeline
   *
   * @remarks
   * Delete pipeline
   */
  async delete(
    request: operations.CrmPipelinesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesDeleteResponse> {
    return unwrapAsync(crmPipelinesDelete(
      this,
      request,
      options,
    ));
  }
}
