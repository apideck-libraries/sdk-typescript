/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingTaxRatesCreate } from "../funcs/accountingTaxRatesCreate.js";
import { accountingTaxRatesDelete } from "../funcs/accountingTaxRatesDelete.js";
import { accountingTaxRatesGet } from "../funcs/accountingTaxRatesGet.js";
import { accountingTaxRatesList } from "../funcs/accountingTaxRatesList.js";
import { accountingTaxRatesUpdate } from "../funcs/accountingTaxRatesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TaxRates extends ClientSDK {
  /**
   * List Tax Rates
   *
   * @remarks
   * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
   */
  async list(
    request: operations.AccountingTaxRatesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesAllResponse> {
    return unwrapAsync(accountingTaxRatesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Tax Rate
   *
   * @remarks
   * Create Tax Rate
   */
  async create(
    request: operations.AccountingTaxRatesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesAddResponse> {
    return unwrapAsync(accountingTaxRatesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tax Rate
   *
   * @remarks
   * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
   */
  async get(
    request: operations.AccountingTaxRatesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesOneResponse> {
    return unwrapAsync(accountingTaxRatesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Tax Rate
   *
   * @remarks
   * Update Tax Rate
   */
  async update(
    request: operations.AccountingTaxRatesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesUpdateResponse> {
    return unwrapAsync(accountingTaxRatesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Tax Rate
   *
   * @remarks
   * Delete Tax Rate
   */
  async delete(
    request: operations.AccountingTaxRatesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesDeleteResponse> {
    return unwrapAsync(accountingTaxRatesDelete(
      this,
      request,
      options,
    ));
  }
}
