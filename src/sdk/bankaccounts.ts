/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingBankAccountsCreate } from "../funcs/accountingBankAccountsCreate.js";
import { accountingBankAccountsDelete } from "../funcs/accountingBankAccountsDelete.js";
import { accountingBankAccountsGet } from "../funcs/accountingBankAccountsGet.js";
import { accountingBankAccountsList } from "../funcs/accountingBankAccountsList.js";
import { accountingBankAccountsUpdate } from "../funcs/accountingBankAccountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class BankAccounts extends ClientSDK {
  /**
   * List Bank Accounts
   *
   * @remarks
   * List Bank Accounts
   */
  async list(
    request: operations.AccountingBankAccountsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.AccountingBankAccountsAllResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(accountingBankAccountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bank Account
   *
   * @remarks
   * Create Bank Account
   */
  async create(
    request: operations.AccountingBankAccountsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankAccountsAddResponse> {
    return unwrapAsync(accountingBankAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bank Account
   *
   * @remarks
   * Get Bank Account
   */
  async get(
    request: operations.AccountingBankAccountsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankAccountsOneResponse> {
    return unwrapAsync(accountingBankAccountsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Bank Account
   *
   * @remarks
   * Update Bank Account
   */
  async update(
    request: operations.AccountingBankAccountsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankAccountsUpdateResponse> {
    return unwrapAsync(accountingBankAccountsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bank Account
   *
   * @remarks
   * Delete Bank Account
   */
  async delete(
    request: operations.AccountingBankAccountsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBankAccountsDeleteResponse> {
    return unwrapAsync(accountingBankAccountsDelete(
      this,
      request,
      options,
    ));
  }
}
