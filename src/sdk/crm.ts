/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { crmCrmActivitiesAdd } from "../funcs/crmCrmActivitiesAdd.js";
import { crmCrmActivitiesAll } from "../funcs/crmCrmActivitiesAll.js";
import { crmCrmActivitiesDelete } from "../funcs/crmCrmActivitiesDelete.js";
import { crmCrmActivitiesOne } from "../funcs/crmCrmActivitiesOne.js";
import { crmCrmActivitiesUpdate } from "../funcs/crmCrmActivitiesUpdate.js";
import { crmCrmCompaniesAdd } from "../funcs/crmCrmCompaniesAdd.js";
import { crmCrmCompaniesAll } from "../funcs/crmCrmCompaniesAll.js";
import { crmCrmCompaniesDelete } from "../funcs/crmCrmCompaniesDelete.js";
import { crmCrmCompaniesOne } from "../funcs/crmCrmCompaniesOne.js";
import { crmCrmCompaniesUpdate } from "../funcs/crmCrmCompaniesUpdate.js";
import { crmCrmContactsAdd } from "../funcs/crmCrmContactsAdd.js";
import { crmCrmContactsAll } from "../funcs/crmCrmContactsAll.js";
import { crmCrmContactsDelete } from "../funcs/crmCrmContactsDelete.js";
import { crmCrmContactsOne } from "../funcs/crmCrmContactsOne.js";
import { crmCrmContactsUpdate } from "../funcs/crmCrmContactsUpdate.js";
import { crmCrmLeadsAdd } from "../funcs/crmCrmLeadsAdd.js";
import { crmCrmLeadsAll } from "../funcs/crmCrmLeadsAll.js";
import { crmCrmLeadsDelete } from "../funcs/crmCrmLeadsDelete.js";
import { crmCrmLeadsOne } from "../funcs/crmCrmLeadsOne.js";
import { crmCrmLeadsUpdate } from "../funcs/crmCrmLeadsUpdate.js";
import { crmCrmNotesAdd } from "../funcs/crmCrmNotesAdd.js";
import { crmCrmNotesAll } from "../funcs/crmCrmNotesAll.js";
import { crmCrmNotesDelete } from "../funcs/crmCrmNotesDelete.js";
import { crmCrmNotesOne } from "../funcs/crmCrmNotesOne.js";
import { crmCrmNotesUpdate } from "../funcs/crmCrmNotesUpdate.js";
import { crmCrmOpportunitiesAdd } from "../funcs/crmCrmOpportunitiesAdd.js";
import { crmCrmOpportunitiesAll } from "../funcs/crmCrmOpportunitiesAll.js";
import { crmCrmOpportunitiesDelete } from "../funcs/crmCrmOpportunitiesDelete.js";
import { crmCrmOpportunitiesOne } from "../funcs/crmCrmOpportunitiesOne.js";
import { crmCrmOpportunitiesUpdate } from "../funcs/crmCrmOpportunitiesUpdate.js";
import { crmCrmPipelinesAdd } from "../funcs/crmCrmPipelinesAdd.js";
import { crmCrmPipelinesAll } from "../funcs/crmCrmPipelinesAll.js";
import { crmCrmPipelinesDelete } from "../funcs/crmCrmPipelinesDelete.js";
import { crmCrmPipelinesOne } from "../funcs/crmCrmPipelinesOne.js";
import { crmCrmPipelinesUpdate } from "../funcs/crmCrmPipelinesUpdate.js";
import { crmCrmUsersAdd } from "../funcs/crmCrmUsersAdd.js";
import { crmCrmUsersAll } from "../funcs/crmCrmUsersAll.js";
import { crmCrmUsersDelete } from "../funcs/crmCrmUsersDelete.js";
import { crmCrmUsersOne } from "../funcs/crmCrmUsersOne.js";
import { crmCrmUsersUpdate } from "../funcs/crmCrmUsersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Crm extends ClientSDK {
  /**
   * List companies
   *
   * @remarks
   * List companies
   */
  async crmCompaniesAll(
    request: operations.CrmCompaniesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesAllResponse> {
    return unwrapAsync(crmCrmCompaniesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create company
   *
   * @remarks
   * Create company
   */
  async crmCompaniesAdd(
    request: operations.CrmCompaniesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesAddResponse> {
    return unwrapAsync(crmCrmCompaniesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get company
   *
   * @remarks
   * Get company
   */
  async crmCompaniesOne(
    request: operations.CrmCompaniesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesOneResponse> {
    return unwrapAsync(crmCrmCompaniesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update company
   *
   * @remarks
   * Update company
   */
  async crmCompaniesUpdate(
    request: operations.CrmCompaniesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesUpdateResponse> {
    return unwrapAsync(crmCrmCompaniesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete company
   *
   * @remarks
   * Delete company
   */
  async crmCompaniesDelete(
    request: operations.CrmCompaniesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmCompaniesDeleteResponse> {
    return unwrapAsync(crmCrmCompaniesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List contacts
   *
   * @remarks
   * List contacts
   */
  async crmContactsAll(
    request: operations.CrmContactsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmContactsAllResponse> {
    return unwrapAsync(crmCrmContactsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create contact
   *
   * @remarks
   * Create contact
   */
  async crmContactsAdd(
    request: operations.CrmContactsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmContactsAddResponse> {
    return unwrapAsync(crmCrmContactsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get contact
   *
   * @remarks
   * Get contact
   */
  async crmContactsOne(
    request: operations.CrmContactsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmContactsOneResponse> {
    return unwrapAsync(crmCrmContactsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update contact
   *
   * @remarks
   * Update contact
   */
  async crmContactsUpdate(
    request: operations.CrmContactsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmContactsUpdateResponse> {
    return unwrapAsync(crmCrmContactsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete contact
   *
   * @remarks
   * Delete contact
   */
  async crmContactsDelete(
    request: operations.CrmContactsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmContactsDeleteResponse> {
    return unwrapAsync(crmCrmContactsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List opportunities
   *
   * @remarks
   * List opportunities
   */
  async crmOpportunitiesAll(
    request: operations.CrmOpportunitiesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesAllResponse> {
    return unwrapAsync(crmCrmOpportunitiesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create opportunity
   *
   * @remarks
   * Create opportunity
   */
  async crmOpportunitiesAdd(
    request: operations.CrmOpportunitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesAddResponse> {
    return unwrapAsync(crmCrmOpportunitiesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get opportunity
   *
   * @remarks
   * Get opportunity
   */
  async crmOpportunitiesOne(
    request: operations.CrmOpportunitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesOneResponse> {
    return unwrapAsync(crmCrmOpportunitiesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update opportunity
   *
   * @remarks
   * Update opportunity
   */
  async crmOpportunitiesUpdate(
    request: operations.CrmOpportunitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesUpdateResponse> {
    return unwrapAsync(crmCrmOpportunitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete opportunity
   *
   * @remarks
   * Delete opportunity
   */
  async crmOpportunitiesDelete(
    request: operations.CrmOpportunitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmOpportunitiesDeleteResponse> {
    return unwrapAsync(crmCrmOpportunitiesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List leads
   *
   * @remarks
   * List leads
   */
  async crmLeadsAll(
    request: operations.CrmLeadsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmLeadsAllResponse> {
    return unwrapAsync(crmCrmLeadsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create lead
   *
   * @remarks
   * Create lead
   */
  async crmLeadsAdd(
    request: operations.CrmLeadsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmLeadsAddResponse> {
    return unwrapAsync(crmCrmLeadsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get lead
   *
   * @remarks
   * Get lead
   */
  async crmLeadsOne(
    request: operations.CrmLeadsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmLeadsOneResponse> {
    return unwrapAsync(crmCrmLeadsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update lead
   *
   * @remarks
   * Update lead
   */
  async crmLeadsUpdate(
    request: operations.CrmLeadsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmLeadsUpdateResponse> {
    return unwrapAsync(crmCrmLeadsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete lead
   *
   * @remarks
   * Delete lead
   */
  async crmLeadsDelete(
    request: operations.CrmLeadsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmLeadsDeleteResponse> {
    return unwrapAsync(crmCrmLeadsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List pipelines
   *
   * @remarks
   * List pipelines
   */
  async crmPipelinesAll(
    request: operations.CrmPipelinesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesAllResponse> {
    return unwrapAsync(crmCrmPipelinesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create pipeline
   *
   * @remarks
   * Create pipeline
   */
  async crmPipelinesAdd(
    request: operations.CrmPipelinesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesAddResponse> {
    return unwrapAsync(crmCrmPipelinesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pipeline
   *
   * @remarks
   * Get pipeline
   */
  async crmPipelinesOne(
    request: operations.CrmPipelinesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesOneResponse> {
    return unwrapAsync(crmCrmPipelinesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update pipeline
   *
   * @remarks
   * Update pipeline
   */
  async crmPipelinesUpdate(
    request: operations.CrmPipelinesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesUpdateResponse> {
    return unwrapAsync(crmCrmPipelinesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete pipeline
   *
   * @remarks
   * Delete pipeline
   */
  async crmPipelinesDelete(
    request: operations.CrmPipelinesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmPipelinesDeleteResponse> {
    return unwrapAsync(crmCrmPipelinesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List notes
   *
   * @remarks
   * List notes
   */
  async crmNotesAll(
    request: operations.CrmNotesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesAllResponse> {
    return unwrapAsync(crmCrmNotesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create note
   *
   * @remarks
   * Create note
   */
  async crmNotesAdd(
    request: operations.CrmNotesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesAddResponse> {
    return unwrapAsync(crmCrmNotesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get note
   *
   * @remarks
   * Get note
   */
  async crmNotesOne(
    request: operations.CrmNotesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesOneResponse> {
    return unwrapAsync(crmCrmNotesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update note
   *
   * @remarks
   * Update note
   */
  async crmNotesUpdate(
    request: operations.CrmNotesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesUpdateResponse> {
    return unwrapAsync(crmCrmNotesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete note
   *
   * @remarks
   * Delete note
   */
  async crmNotesDelete(
    request: operations.CrmNotesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmNotesDeleteResponse> {
    return unwrapAsync(crmCrmNotesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List users
   *
   * @remarks
   * List users
   */
  async crmUsersAll(
    request: operations.CrmUsersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmUsersAllResponse> {
    return unwrapAsync(crmCrmUsersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create user
   *
   * @remarks
   * Create user
   */
  async crmUsersAdd(
    request: operations.CrmUsersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmUsersAddResponse> {
    return unwrapAsync(crmCrmUsersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user
   *
   * @remarks
   * Get user
   */
  async crmUsersOne(
    request: operations.CrmUsersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmUsersOneResponse> {
    return unwrapAsync(crmCrmUsersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update user
   *
   * @remarks
   * Update user
   */
  async crmUsersUpdate(
    request: operations.CrmUsersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmUsersUpdateResponse> {
    return unwrapAsync(crmCrmUsersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete user
   *
   * @remarks
   * Delete user
   */
  async crmUsersDelete(
    request: operations.CrmUsersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmUsersDeleteResponse> {
    return unwrapAsync(crmCrmUsersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List activities
   *
   * @remarks
   * List activities
   */
  async crmActivitiesAll(
    request: operations.CrmActivitiesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesAllResponse> {
    return unwrapAsync(crmCrmActivitiesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create activity
   *
   * @remarks
   * Create activity
   */
  async crmActivitiesAdd(
    request: operations.CrmActivitiesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesAddResponse> {
    return unwrapAsync(crmCrmActivitiesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get activity
   *
   * @remarks
   * Get activity
   */
  async crmActivitiesOne(
    request: operations.CrmActivitiesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesOneResponse> {
    return unwrapAsync(crmCrmActivitiesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update activity
   *
   * @remarks
   * Update activity
   */
  async crmActivitiesUpdate(
    request: operations.CrmActivitiesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesUpdateResponse> {
    return unwrapAsync(crmCrmActivitiesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete activity
   *
   * @remarks
   * Delete activity
   */
  async crmActivitiesDelete(
    request: operations.CrmActivitiesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.CrmActivitiesDeleteResponse> {
    return unwrapAsync(crmCrmActivitiesDelete(
      this,
      request,
      options,
    ));
  }
}
