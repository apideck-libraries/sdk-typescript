/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountingAccountingAttachmentsAll } from "../funcs/accountingAccountingAttachmentsAll.js";
import { accountingAccountingAttachmentsDelete } from "../funcs/accountingAccountingAttachmentsDelete.js";
import {
  accountingAccountingAttachmentsDownload,
  AccountingAttachmentsDownloadAcceptEnum,
} from "../funcs/accountingAccountingAttachmentsDownload.js";
import { accountingAccountingAttachmentsOne } from "../funcs/accountingAccountingAttachmentsOne.js";
import { accountingAccountingBalanceSheetOne } from "../funcs/accountingAccountingBalanceSheetOne.js";
import { accountingAccountingBillPaymentsAdd } from "../funcs/accountingAccountingBillPaymentsAdd.js";
import { accountingAccountingBillPaymentsAll } from "../funcs/accountingAccountingBillPaymentsAll.js";
import { accountingAccountingBillPaymentsDelete } from "../funcs/accountingAccountingBillPaymentsDelete.js";
import { accountingAccountingBillPaymentsOne } from "../funcs/accountingAccountingBillPaymentsOne.js";
import { accountingAccountingBillPaymentsUpdate } from "../funcs/accountingAccountingBillPaymentsUpdate.js";
import { accountingAccountingBillsAdd } from "../funcs/accountingAccountingBillsAdd.js";
import { accountingAccountingBillsAll } from "../funcs/accountingAccountingBillsAll.js";
import { accountingAccountingBillsDelete } from "../funcs/accountingAccountingBillsDelete.js";
import { accountingAccountingBillsOne } from "../funcs/accountingAccountingBillsOne.js";
import { accountingAccountingBillsUpdate } from "../funcs/accountingAccountingBillsUpdate.js";
import { accountingAccountingCompanyInfoOne } from "../funcs/accountingAccountingCompanyInfoOne.js";
import { accountingAccountingCreditNotesAdd } from "../funcs/accountingAccountingCreditNotesAdd.js";
import { accountingAccountingCreditNotesAll } from "../funcs/accountingAccountingCreditNotesAll.js";
import { accountingAccountingCreditNotesDelete } from "../funcs/accountingAccountingCreditNotesDelete.js";
import { accountingAccountingCreditNotesOne } from "../funcs/accountingAccountingCreditNotesOne.js";
import { accountingAccountingCreditNotesUpdate } from "../funcs/accountingAccountingCreditNotesUpdate.js";
import { accountingAccountingCustomersAdd } from "../funcs/accountingAccountingCustomersAdd.js";
import { accountingAccountingCustomersAll } from "../funcs/accountingAccountingCustomersAll.js";
import { accountingAccountingCustomersDelete } from "../funcs/accountingAccountingCustomersDelete.js";
import { accountingAccountingCustomersOne } from "../funcs/accountingAccountingCustomersOne.js";
import { accountingAccountingCustomersUpdate } from "../funcs/accountingAccountingCustomersUpdate.js";
import { accountingAccountingDepartmentsAdd } from "../funcs/accountingAccountingDepartmentsAdd.js";
import { accountingAccountingDepartmentsAll } from "../funcs/accountingAccountingDepartmentsAll.js";
import { accountingAccountingDepartmentsDelete } from "../funcs/accountingAccountingDepartmentsDelete.js";
import { accountingAccountingDepartmentsOne } from "../funcs/accountingAccountingDepartmentsOne.js";
import { accountingAccountingDepartmentsUpdate } from "../funcs/accountingAccountingDepartmentsUpdate.js";
import { accountingAccountingExpensesAdd } from "../funcs/accountingAccountingExpensesAdd.js";
import { accountingAccountingExpensesAll } from "../funcs/accountingAccountingExpensesAll.js";
import { accountingAccountingExpensesDelete } from "../funcs/accountingAccountingExpensesDelete.js";
import { accountingAccountingExpensesOne } from "../funcs/accountingAccountingExpensesOne.js";
import { accountingAccountingExpensesUpdate } from "../funcs/accountingAccountingExpensesUpdate.js";
import { accountingAccountingInvoiceItemsAdd } from "../funcs/accountingAccountingInvoiceItemsAdd.js";
import { accountingAccountingInvoiceItemsAll } from "../funcs/accountingAccountingInvoiceItemsAll.js";
import { accountingAccountingInvoiceItemsDelete } from "../funcs/accountingAccountingInvoiceItemsDelete.js";
import { accountingAccountingInvoiceItemsOne } from "../funcs/accountingAccountingInvoiceItemsOne.js";
import { accountingAccountingInvoiceItemsUpdate } from "../funcs/accountingAccountingInvoiceItemsUpdate.js";
import { accountingAccountingInvoicesAdd } from "../funcs/accountingAccountingInvoicesAdd.js";
import { accountingAccountingInvoicesAll } from "../funcs/accountingAccountingInvoicesAll.js";
import { accountingAccountingInvoicesDelete } from "../funcs/accountingAccountingInvoicesDelete.js";
import { accountingAccountingInvoicesOne } from "../funcs/accountingAccountingInvoicesOne.js";
import { accountingAccountingInvoicesUpdate } from "../funcs/accountingAccountingInvoicesUpdate.js";
import { accountingAccountingJournalEntriesAdd } from "../funcs/accountingAccountingJournalEntriesAdd.js";
import { accountingAccountingJournalEntriesAll } from "../funcs/accountingAccountingJournalEntriesAll.js";
import { accountingAccountingJournalEntriesDelete } from "../funcs/accountingAccountingJournalEntriesDelete.js";
import { accountingAccountingJournalEntriesOne } from "../funcs/accountingAccountingJournalEntriesOne.js";
import { accountingAccountingJournalEntriesUpdate } from "../funcs/accountingAccountingJournalEntriesUpdate.js";
import { accountingAccountingLedgerAccountsAdd } from "../funcs/accountingAccountingLedgerAccountsAdd.js";
import { accountingAccountingLedgerAccountsAll } from "../funcs/accountingAccountingLedgerAccountsAll.js";
import { accountingAccountingLedgerAccountsDelete } from "../funcs/accountingAccountingLedgerAccountsDelete.js";
import { accountingAccountingLedgerAccountsOne } from "../funcs/accountingAccountingLedgerAccountsOne.js";
import { accountingAccountingLedgerAccountsUpdate } from "../funcs/accountingAccountingLedgerAccountsUpdate.js";
import { accountingAccountingLocationsAdd } from "../funcs/accountingAccountingLocationsAdd.js";
import { accountingAccountingLocationsAll } from "../funcs/accountingAccountingLocationsAll.js";
import { accountingAccountingLocationsDelete } from "../funcs/accountingAccountingLocationsDelete.js";
import { accountingAccountingLocationsOne } from "../funcs/accountingAccountingLocationsOne.js";
import { accountingAccountingLocationsUpdate } from "../funcs/accountingAccountingLocationsUpdate.js";
import { accountingAccountingPaymentsAdd } from "../funcs/accountingAccountingPaymentsAdd.js";
import { accountingAccountingPaymentsAll } from "../funcs/accountingAccountingPaymentsAll.js";
import { accountingAccountingPaymentsDelete } from "../funcs/accountingAccountingPaymentsDelete.js";
import { accountingAccountingPaymentsOne } from "../funcs/accountingAccountingPaymentsOne.js";
import { accountingAccountingPaymentsUpdate } from "../funcs/accountingAccountingPaymentsUpdate.js";
import { accountingAccountingProfitAndLossOne } from "../funcs/accountingAccountingProfitAndLossOne.js";
import { accountingAccountingPurchaseOrdersAdd } from "../funcs/accountingAccountingPurchaseOrdersAdd.js";
import { accountingAccountingPurchaseOrdersAll } from "../funcs/accountingAccountingPurchaseOrdersAll.js";
import { accountingAccountingPurchaseOrdersDelete } from "../funcs/accountingAccountingPurchaseOrdersDelete.js";
import { accountingAccountingPurchaseOrdersOne } from "../funcs/accountingAccountingPurchaseOrdersOne.js";
import { accountingAccountingPurchaseOrdersUpdate } from "../funcs/accountingAccountingPurchaseOrdersUpdate.js";
import { accountingAccountingSubsidiariesAdd } from "../funcs/accountingAccountingSubsidiariesAdd.js";
import { accountingAccountingSubsidiariesAll } from "../funcs/accountingAccountingSubsidiariesAll.js";
import { accountingAccountingSubsidiariesDelete } from "../funcs/accountingAccountingSubsidiariesDelete.js";
import { accountingAccountingSubsidiariesOne } from "../funcs/accountingAccountingSubsidiariesOne.js";
import { accountingAccountingSubsidiariesUpdate } from "../funcs/accountingAccountingSubsidiariesUpdate.js";
import { accountingAccountingSuppliersAdd } from "../funcs/accountingAccountingSuppliersAdd.js";
import { accountingAccountingSuppliersAll } from "../funcs/accountingAccountingSuppliersAll.js";
import { accountingAccountingSuppliersDelete } from "../funcs/accountingAccountingSuppliersDelete.js";
import { accountingAccountingSuppliersOne } from "../funcs/accountingAccountingSuppliersOne.js";
import { accountingAccountingSuppliersUpdate } from "../funcs/accountingAccountingSuppliersUpdate.js";
import { accountingAccountingTaxRatesAdd } from "../funcs/accountingAccountingTaxRatesAdd.js";
import { accountingAccountingTaxRatesAll } from "../funcs/accountingAccountingTaxRatesAll.js";
import { accountingAccountingTaxRatesDelete } from "../funcs/accountingAccountingTaxRatesDelete.js";
import { accountingAccountingTaxRatesOne } from "../funcs/accountingAccountingTaxRatesOne.js";
import { accountingAccountingTaxRatesUpdate } from "../funcs/accountingAccountingTaxRatesUpdate.js";
import { accountingAccountingTrackingCategoriesAdd } from "../funcs/accountingAccountingTrackingCategoriesAdd.js";
import { accountingAccountingTrackingCategoriesAll } from "../funcs/accountingAccountingTrackingCategoriesAll.js";
import { accountingAccountingTrackingCategoriesDelete } from "../funcs/accountingAccountingTrackingCategoriesDelete.js";
import { accountingAccountingTrackingCategoriesOne } from "../funcs/accountingAccountingTrackingCategoriesOne.js";
import { accountingAccountingTrackingCategoriesUpdate } from "../funcs/accountingAccountingTrackingCategoriesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { AccountingAttachmentsDownloadAcceptEnum } from "../funcs/accountingAccountingAttachmentsDownload.js";

export class Accounting extends ClientSDK {
  /**
   * List Tax Rates
   *
   * @remarks
   * List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
   */
  async accountingTaxRatesAll(
    request: operations.AccountingTaxRatesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesAllResponse> {
    return unwrapAsync(accountingAccountingTaxRatesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Tax Rate
   *
   * @remarks
   * Create Tax Rate
   */
  async accountingTaxRatesAdd(
    request: operations.AccountingTaxRatesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesAddResponse> {
    return unwrapAsync(accountingAccountingTaxRatesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tax Rate
   *
   * @remarks
   * Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
   */
  async accountingTaxRatesOne(
    request: operations.AccountingTaxRatesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesOneResponse> {
    return unwrapAsync(accountingAccountingTaxRatesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Tax Rate
   *
   * @remarks
   * Update Tax Rate
   */
  async accountingTaxRatesUpdate(
    request: operations.AccountingTaxRatesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesUpdateResponse> {
    return unwrapAsync(accountingAccountingTaxRatesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Tax Rate
   *
   * @remarks
   * Delete Tax Rate
   */
  async accountingTaxRatesDelete(
    request: operations.AccountingTaxRatesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTaxRatesDeleteResponse> {
    return unwrapAsync(accountingAccountingTaxRatesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Bills
   *
   * @remarks
   * List Bills
   */
  async accountingBillsAll(
    request: operations.AccountingBillsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillsAllResponse> {
    return unwrapAsync(accountingAccountingBillsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bill
   *
   * @remarks
   * Create Bill
   */
  async accountingBillsAdd(
    request: operations.AccountingBillsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillsAddResponse> {
    return unwrapAsync(accountingAccountingBillsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bill
   *
   * @remarks
   * Get Bill
   */
  async accountingBillsOne(
    request: operations.AccountingBillsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillsOneResponse> {
    return unwrapAsync(accountingAccountingBillsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Bill
   *
   * @remarks
   * Update Bill
   */
  async accountingBillsUpdate(
    request: operations.AccountingBillsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillsUpdateResponse> {
    return unwrapAsync(accountingAccountingBillsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bill
   *
   * @remarks
   * Delete Bill
   */
  async accountingBillsDelete(
    request: operations.AccountingBillsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillsDeleteResponse> {
    return unwrapAsync(accountingAccountingBillsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Invoices
   *
   * @remarks
   * List Invoices
   */
  async accountingInvoicesAll(
    request: operations.AccountingInvoicesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoicesAllResponse> {
    return unwrapAsync(accountingAccountingInvoicesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Invoice
   *
   * @remarks
   * Create Invoice
   */
  async accountingInvoicesAdd(
    request: operations.AccountingInvoicesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoicesAddResponse> {
    return unwrapAsync(accountingAccountingInvoicesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Invoice
   *
   * @remarks
   * Get Invoice
   */
  async accountingInvoicesOne(
    request: operations.AccountingInvoicesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoicesOneResponse> {
    return unwrapAsync(accountingAccountingInvoicesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Invoice
   *
   * @remarks
   * Update Invoice
   */
  async accountingInvoicesUpdate(
    request: operations.AccountingInvoicesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoicesUpdateResponse> {
    return unwrapAsync(accountingAccountingInvoicesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Invoice
   *
   * @remarks
   * Delete Invoice
   */
  async accountingInvoicesDelete(
    request: operations.AccountingInvoicesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoicesDeleteResponse> {
    return unwrapAsync(accountingAccountingInvoicesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Ledger Accounts
   *
   * @remarks
   * List Ledger Accounts
   */
  async accountingLedgerAccountsAll(
    request: operations.AccountingLedgerAccountsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLedgerAccountsAllResponse> {
    return unwrapAsync(accountingAccountingLedgerAccountsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Ledger Account
   *
   * @remarks
   * Create Ledger Account
   */
  async accountingLedgerAccountsAdd(
    request: operations.AccountingLedgerAccountsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLedgerAccountsAddResponse> {
    return unwrapAsync(accountingAccountingLedgerAccountsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Ledger Account
   *
   * @remarks
   * Get Ledger Account
   */
  async accountingLedgerAccountsOne(
    request: operations.AccountingLedgerAccountsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLedgerAccountsOneResponse> {
    return unwrapAsync(accountingAccountingLedgerAccountsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Ledger Account
   *
   * @remarks
   * Update Ledger Account
   */
  async accountingLedgerAccountsUpdate(
    request: operations.AccountingLedgerAccountsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLedgerAccountsUpdateResponse> {
    return unwrapAsync(accountingAccountingLedgerAccountsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Ledger Account
   *
   * @remarks
   * Delete Ledger Account
   */
  async accountingLedgerAccountsDelete(
    request: operations.AccountingLedgerAccountsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLedgerAccountsDeleteResponse> {
    return unwrapAsync(accountingAccountingLedgerAccountsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Invoice Items
   *
   * @remarks
   * List Invoice Items
   */
  async accountingInvoiceItemsAll(
    request: operations.AccountingInvoiceItemsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsAllResponse> {
    return unwrapAsync(accountingAccountingInvoiceItemsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Invoice Item
   *
   * @remarks
   * Create Invoice Item
   */
  async accountingInvoiceItemsAdd(
    request: operations.AccountingInvoiceItemsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsAddResponse> {
    return unwrapAsync(accountingAccountingInvoiceItemsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Invoice Item
   *
   * @remarks
   * Get Invoice Item
   */
  async accountingInvoiceItemsOne(
    request: operations.AccountingInvoiceItemsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsOneResponse> {
    return unwrapAsync(accountingAccountingInvoiceItemsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Invoice Item
   *
   * @remarks
   * Update Invoice Item
   */
  async accountingInvoiceItemsUpdate(
    request: operations.AccountingInvoiceItemsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsUpdateResponse> {
    return unwrapAsync(accountingAccountingInvoiceItemsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Invoice Item
   *
   * @remarks
   * Delete Invoice Item
   */
  async accountingInvoiceItemsDelete(
    request: operations.AccountingInvoiceItemsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingInvoiceItemsDeleteResponse> {
    return unwrapAsync(accountingAccountingInvoiceItemsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Credit Notes
   *
   * @remarks
   * List Credit Notes
   */
  async accountingCreditNotesAll(
    request: operations.AccountingCreditNotesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesAllResponse> {
    return unwrapAsync(accountingAccountingCreditNotesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Credit Note
   *
   * @remarks
   * Create Credit Note
   */
  async accountingCreditNotesAdd(
    request: operations.AccountingCreditNotesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesAddResponse> {
    return unwrapAsync(accountingAccountingCreditNotesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Credit Note
   *
   * @remarks
   * Get Credit Note
   */
  async accountingCreditNotesOne(
    request: operations.AccountingCreditNotesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesOneResponse> {
    return unwrapAsync(accountingAccountingCreditNotesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Credit Note
   *
   * @remarks
   * Update Credit Note
   */
  async accountingCreditNotesUpdate(
    request: operations.AccountingCreditNotesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesUpdateResponse> {
    return unwrapAsync(accountingAccountingCreditNotesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Credit Note
   *
   * @remarks
   * Delete Credit Note
   */
  async accountingCreditNotesDelete(
    request: operations.AccountingCreditNotesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCreditNotesDeleteResponse> {
    return unwrapAsync(accountingAccountingCreditNotesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Customers
   *
   * @remarks
   * List Customers
   */
  async accountingCustomersAll(
    request: operations.AccountingCustomersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersAllResponse> {
    return unwrapAsync(accountingAccountingCustomersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Customer
   *
   * @remarks
   * Create Customer
   */
  async accountingCustomersAdd(
    request: operations.AccountingCustomersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersAddResponse> {
    return unwrapAsync(accountingAccountingCustomersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Customer
   *
   * @remarks
   * Get Customer
   */
  async accountingCustomersOne(
    request: operations.AccountingCustomersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersOneResponse> {
    return unwrapAsync(accountingAccountingCustomersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Customer
   *
   * @remarks
   * Update Customer
   */
  async accountingCustomersUpdate(
    request: operations.AccountingCustomersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersUpdateResponse> {
    return unwrapAsync(accountingAccountingCustomersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Customer
   *
   * @remarks
   * Delete Customer
   */
  async accountingCustomersDelete(
    request: operations.AccountingCustomersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCustomersDeleteResponse> {
    return unwrapAsync(accountingAccountingCustomersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Suppliers
   *
   * @remarks
   * List Suppliers
   */
  async accountingSuppliersAll(
    request: operations.AccountingSuppliersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersAllResponse> {
    return unwrapAsync(accountingAccountingSuppliersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Supplier
   *
   * @remarks
   * Create Supplier
   */
  async accountingSuppliersAdd(
    request: operations.AccountingSuppliersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersAddResponse> {
    return unwrapAsync(accountingAccountingSuppliersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Supplier
   *
   * @remarks
   * Get Supplier
   */
  async accountingSuppliersOne(
    request: operations.AccountingSuppliersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersOneResponse> {
    return unwrapAsync(accountingAccountingSuppliersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Supplier
   *
   * @remarks
   * Update Supplier
   */
  async accountingSuppliersUpdate(
    request: operations.AccountingSuppliersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersUpdateResponse> {
    return unwrapAsync(accountingAccountingSuppliersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Supplier
   *
   * @remarks
   * Delete Supplier
   */
  async accountingSuppliersDelete(
    request: operations.AccountingSuppliersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSuppliersDeleteResponse> {
    return unwrapAsync(accountingAccountingSuppliersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Payments
   *
   * @remarks
   * List Payments
   */
  async accountingPaymentsAll(
    request: operations.AccountingPaymentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsAllResponse> {
    return unwrapAsync(accountingAccountingPaymentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Payment
   *
   * @remarks
   * Create Payment
   */
  async accountingPaymentsAdd(
    request: operations.AccountingPaymentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsAddResponse> {
    return unwrapAsync(accountingAccountingPaymentsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Payment
   *
   * @remarks
   * Get Payment
   */
  async accountingPaymentsOne(
    request: operations.AccountingPaymentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsOneResponse> {
    return unwrapAsync(accountingAccountingPaymentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Payment
   *
   * @remarks
   * Update Payment
   */
  async accountingPaymentsUpdate(
    request: operations.AccountingPaymentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsUpdateResponse> {
    return unwrapAsync(accountingAccountingPaymentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Payment
   *
   * @remarks
   * Delete Payment
   */
  async accountingPaymentsDelete(
    request: operations.AccountingPaymentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPaymentsDeleteResponse> {
    return unwrapAsync(accountingAccountingPaymentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get company info
   *
   * @remarks
   * Get company info
   */
  async accountingCompanyInfoOne(
    request: operations.AccountingCompanyInfoOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingCompanyInfoOneResponse> {
    return unwrapAsync(accountingAccountingCompanyInfoOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Get BalanceSheet
   *
   * @remarks
   * Get BalanceSheet
   */
  async accountingBalanceSheetOne(
    request: operations.AccountingBalanceSheetOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBalanceSheetOneResponse> {
    return unwrapAsync(accountingAccountingBalanceSheetOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Profit and Loss
   *
   * @remarks
   * Get Profit and Loss
   */
  async accountingProfitAndLossOne(
    request: operations.AccountingProfitAndLossOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingProfitAndLossOneResponse> {
    return unwrapAsync(accountingAccountingProfitAndLossOne(
      this,
      request,
      options,
    ));
  }

  /**
   * List Journal Entries
   *
   * @remarks
   * List Journal Entries
   */
  async accountingJournalEntriesAll(
    request: operations.AccountingJournalEntriesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingJournalEntriesAllResponse> {
    return unwrapAsync(accountingAccountingJournalEntriesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Journal Entry
   *
   * @remarks
   * Create Journal Entry
   */
  async accountingJournalEntriesAdd(
    request: operations.AccountingJournalEntriesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingJournalEntriesAddResponse> {
    return unwrapAsync(accountingAccountingJournalEntriesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Journal Entry
   *
   * @remarks
   * Get Journal Entry
   */
  async accountingJournalEntriesOne(
    request: operations.AccountingJournalEntriesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingJournalEntriesOneResponse> {
    return unwrapAsync(accountingAccountingJournalEntriesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Journal Entry
   *
   * @remarks
   * Update Journal Entry
   */
  async accountingJournalEntriesUpdate(
    request: operations.AccountingJournalEntriesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingJournalEntriesUpdateResponse> {
    return unwrapAsync(accountingAccountingJournalEntriesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Journal Entry
   *
   * @remarks
   * Delete Journal Entry
   */
  async accountingJournalEntriesDelete(
    request: operations.AccountingJournalEntriesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingJournalEntriesDeleteResponse> {
    return unwrapAsync(accountingAccountingJournalEntriesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Purchase Orders
   *
   * @remarks
   * List Purchase Orders
   */
  async accountingPurchaseOrdersAll(
    request: operations.AccountingPurchaseOrdersAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPurchaseOrdersAllResponse> {
    return unwrapAsync(accountingAccountingPurchaseOrdersAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Purchase Order
   *
   * @remarks
   * Create Purchase Order
   */
  async accountingPurchaseOrdersAdd(
    request: operations.AccountingPurchaseOrdersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPurchaseOrdersAddResponse> {
    return unwrapAsync(accountingAccountingPurchaseOrdersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Purchase Order
   *
   * @remarks
   * Get Purchase Order
   */
  async accountingPurchaseOrdersOne(
    request: operations.AccountingPurchaseOrdersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPurchaseOrdersOneResponse> {
    return unwrapAsync(accountingAccountingPurchaseOrdersOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Purchase Order
   *
   * @remarks
   * Update Purchase Order
   */
  async accountingPurchaseOrdersUpdate(
    request: operations.AccountingPurchaseOrdersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPurchaseOrdersUpdateResponse> {
    return unwrapAsync(accountingAccountingPurchaseOrdersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Purchase Order
   *
   * @remarks
   * Delete Purchase Order
   */
  async accountingPurchaseOrdersDelete(
    request: operations.AccountingPurchaseOrdersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingPurchaseOrdersDeleteResponse> {
    return unwrapAsync(accountingAccountingPurchaseOrdersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Subsidiaries
   *
   * @remarks
   * List Subsidiaries
   */
  async accountingSubsidiariesAll(
    request: operations.AccountingSubsidiariesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSubsidiariesAllResponse> {
    return unwrapAsync(accountingAccountingSubsidiariesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Subsidiary
   *
   * @remarks
   * Create Subsidiary
   */
  async accountingSubsidiariesAdd(
    request: operations.AccountingSubsidiariesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSubsidiariesAddResponse> {
    return unwrapAsync(accountingAccountingSubsidiariesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Subsidiary
   *
   * @remarks
   * Get Subsidiary
   */
  async accountingSubsidiariesOne(
    request: operations.AccountingSubsidiariesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSubsidiariesOneResponse> {
    return unwrapAsync(accountingAccountingSubsidiariesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Subsidiary
   *
   * @remarks
   * Update Subsidiary
   */
  async accountingSubsidiariesUpdate(
    request: operations.AccountingSubsidiariesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSubsidiariesUpdateResponse> {
    return unwrapAsync(accountingAccountingSubsidiariesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Subsidiary
   *
   * @remarks
   * Delete Subsidiary
   */
  async accountingSubsidiariesDelete(
    request: operations.AccountingSubsidiariesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingSubsidiariesDeleteResponse> {
    return unwrapAsync(accountingAccountingSubsidiariesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Locations
   *
   * @remarks
   * List Locations
   */
  async accountingLocationsAll(
    request: operations.AccountingLocationsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsAllResponse> {
    return unwrapAsync(accountingAccountingLocationsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Location
   *
   * @remarks
   * Create Location
   */
  async accountingLocationsAdd(
    request: operations.AccountingLocationsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsAddResponse> {
    return unwrapAsync(accountingAccountingLocationsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Location
   *
   * @remarks
   * Get Location
   */
  async accountingLocationsOne(
    request: operations.AccountingLocationsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsOneResponse> {
    return unwrapAsync(accountingAccountingLocationsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Location
   *
   * @remarks
   * Update Location
   */
  async accountingLocationsUpdate(
    request: operations.AccountingLocationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsUpdateResponse> {
    return unwrapAsync(accountingAccountingLocationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Location
   *
   * @remarks
   * Delete Location
   */
  async accountingLocationsDelete(
    request: operations.AccountingLocationsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingLocationsDeleteResponse> {
    return unwrapAsync(accountingAccountingLocationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Departments
   *
   * @remarks
   * List Departments
   */
  async accountingDepartmentsAll(
    request: operations.AccountingDepartmentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingDepartmentsAllResponse> {
    return unwrapAsync(accountingAccountingDepartmentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Department
   *
   * @remarks
   * Create Department
   */
  async accountingDepartmentsAdd(
    request: operations.AccountingDepartmentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingDepartmentsAddResponse> {
    return unwrapAsync(accountingAccountingDepartmentsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Department
   *
   * @remarks
   * Get Department
   */
  async accountingDepartmentsOne(
    request: operations.AccountingDepartmentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingDepartmentsOneResponse> {
    return unwrapAsync(accountingAccountingDepartmentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Department
   *
   * @remarks
   * Update Department
   */
  async accountingDepartmentsUpdate(
    request: operations.AccountingDepartmentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingDepartmentsUpdateResponse> {
    return unwrapAsync(accountingAccountingDepartmentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Department
   *
   * @remarks
   * Delete Department
   */
  async accountingDepartmentsDelete(
    request: operations.AccountingDepartmentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingDepartmentsDeleteResponse> {
    return unwrapAsync(accountingAccountingDepartmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Attachments
   *
   * @remarks
   * List Attachments
   */
  async accountingAttachmentsAll(
    request: operations.AccountingAttachmentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingAttachmentsAllResponse> {
    return unwrapAsync(accountingAccountingAttachmentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Attachment
   *
   * @remarks
   * Get Attachment
   */
  async accountingAttachmentsOne(
    request: operations.AccountingAttachmentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingAttachmentsOneResponse> {
    return unwrapAsync(accountingAccountingAttachmentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Attachment
   *
   * @remarks
   * Delete Attachment
   */
  async accountingAttachmentsDelete(
    request: operations.AccountingAttachmentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingAttachmentsDeleteResponse> {
    return unwrapAsync(accountingAccountingAttachmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Download Attachment
   *
   * @remarks
   * Download Attachment
   */
  async accountingAttachmentsDownload(
    request: operations.AccountingAttachmentsDownloadRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: AccountingAttachmentsDownloadAcceptEnum;
    },
  ): Promise<operations.AccountingAttachmentsDownloadResponse> {
    return unwrapAsync(accountingAccountingAttachmentsDownload(
      this,
      request,
      options,
    ));
  }

  /**
   * List Tracking Categories
   *
   * @remarks
   * List Tracking Categories
   */
  async accountingTrackingCategoriesAll(
    request: operations.AccountingTrackingCategoriesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTrackingCategoriesAllResponse> {
    return unwrapAsync(accountingAccountingTrackingCategoriesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Tracking Category
   *
   * @remarks
   * Create Tracking Category
   */
  async accountingTrackingCategoriesAdd(
    request: operations.AccountingTrackingCategoriesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTrackingCategoriesAddResponse> {
    return unwrapAsync(accountingAccountingTrackingCategoriesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tracking Category
   *
   * @remarks
   * Get Tracking Category
   */
  async accountingTrackingCategoriesOne(
    request: operations.AccountingTrackingCategoriesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTrackingCategoriesOneResponse> {
    return unwrapAsync(accountingAccountingTrackingCategoriesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Tracking Category
   *
   * @remarks
   * Update Tracking Category
   */
  async accountingTrackingCategoriesUpdate(
    request: operations.AccountingTrackingCategoriesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTrackingCategoriesUpdateResponse> {
    return unwrapAsync(accountingAccountingTrackingCategoriesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Tracking Category
   *
   * @remarks
   * Delete Tracking Category
   */
  async accountingTrackingCategoriesDelete(
    request: operations.AccountingTrackingCategoriesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingTrackingCategoriesDeleteResponse> {
    return unwrapAsync(accountingAccountingTrackingCategoriesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Bill Payments
   *
   * @remarks
   * List Bill Payments
   */
  async accountingBillPaymentsAll(
    request: operations.AccountingBillPaymentsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillPaymentsAllResponse> {
    return unwrapAsync(accountingAccountingBillPaymentsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Bill Payment
   *
   * @remarks
   * Create Bill Payment
   */
  async accountingBillPaymentsAdd(
    request: operations.AccountingBillPaymentsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillPaymentsAddResponse> {
    return unwrapAsync(accountingAccountingBillPaymentsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Bill Payment
   *
   * @remarks
   * Get Bill Payment
   */
  async accountingBillPaymentsOne(
    request: operations.AccountingBillPaymentsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillPaymentsOneResponse> {
    return unwrapAsync(accountingAccountingBillPaymentsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Bill Payment
   *
   * @remarks
   * Update Bill Payment
   */
  async accountingBillPaymentsUpdate(
    request: operations.AccountingBillPaymentsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillPaymentsUpdateResponse> {
    return unwrapAsync(accountingAccountingBillPaymentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Bill Payment
   *
   * @remarks
   * Delete Bill Payment
   */
  async accountingBillPaymentsDelete(
    request: operations.AccountingBillPaymentsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingBillPaymentsDeleteResponse> {
    return unwrapAsync(accountingAccountingBillPaymentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List Expenses
   *
   * @remarks
   * List Expenses
   */
  async accountingExpensesAll(
    request: operations.AccountingExpensesAllRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesAllResponse> {
    return unwrapAsync(accountingAccountingExpensesAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Expense
   *
   * @remarks
   * Create Expense
   */
  async accountingExpensesAdd(
    request: operations.AccountingExpensesAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesAddResponse> {
    return unwrapAsync(accountingAccountingExpensesAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Expense
   *
   * @remarks
   * Get Expense
   */
  async accountingExpensesOne(
    request: operations.AccountingExpensesOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesOneResponse> {
    return unwrapAsync(accountingAccountingExpensesOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Expense
   *
   * @remarks
   * Update Expense
   */
  async accountingExpensesUpdate(
    request: operations.AccountingExpensesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesUpdateResponse> {
    return unwrapAsync(accountingAccountingExpensesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Expense
   *
   * @remarks
   * Delete Expense
   */
  async accountingExpensesDelete(
    request: operations.AccountingExpensesDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AccountingExpensesDeleteResponse> {
    return unwrapAsync(accountingAccountingExpensesDelete(
      this,
      request,
      options,
    ));
  }
}
