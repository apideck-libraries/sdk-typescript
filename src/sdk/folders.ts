/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fileStorageFoldersCopy } from "../funcs/fileStorageFoldersCopy.js";
import { fileStorageFoldersCreate } from "../funcs/fileStorageFoldersCreate.js";
import { fileStorageFoldersDelete } from "../funcs/fileStorageFoldersDelete.js";
import { fileStorageFoldersGet } from "../funcs/fileStorageFoldersGet.js";
import { fileStorageFoldersUpdate } from "../funcs/fileStorageFoldersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Folders extends ClientSDK {
  /**
   * Create Folder
   *
   * @remarks
   * Create Folder
   */
  async create(
    request: operations.FileStorageFoldersAddRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersAddResponse> {
    return unwrapAsync(fileStorageFoldersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Folder
   *
   * @remarks
   * Get Folder
   */
  async get(
    request: operations.FileStorageFoldersOneRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersOneResponse> {
    return unwrapAsync(fileStorageFoldersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Rename or move Folder
   *
   * @remarks
   * Rename or move Folder
   */
  async update(
    request: operations.FileStorageFoldersUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersUpdateResponse> {
    return unwrapAsync(fileStorageFoldersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Folder
   *
   * @remarks
   * Delete Folder
   */
  async delete(
    request: operations.FileStorageFoldersDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersDeleteResponse> {
    return unwrapAsync(fileStorageFoldersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Copy Folder
   *
   * @remarks
   * Copy Folder
   */
  async copy(
    request: operations.FileStorageFoldersCopyRequest,
    options?: RequestOptions,
  ): Promise<operations.FileStorageFoldersCopyResponse> {
    return unwrapAsync(fileStorageFoldersCopy(
      this,
      request,
      options,
    ));
  }
}
