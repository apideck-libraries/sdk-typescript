/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { leadLeadLeadsAdd } from "../funcs/leadLeadLeadsAdd.js";
import { leadLeadLeadsAll } from "../funcs/leadLeadLeadsAll.js";
import { leadLeadLeadsDelete } from "../funcs/leadLeadLeadsDelete.js";
import { leadLeadLeadsOne } from "../funcs/leadLeadLeadsOne.js";
import { leadLeadLeadsUpdate } from "../funcs/leadLeadLeadsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Lead extends ClientSDK {
  /**
   * List leads
   *
   * @remarks
   * List leads
   */
  async leadLeadsAll(
    request: operations.LeadLeadsAllRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadLeadsAllResponse> {
    return unwrapAsync(leadLeadLeadsAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create lead
   *
   * @remarks
   * Create lead
   */
  async leadLeadsAdd(
    request: operations.LeadLeadsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadLeadsAddResponse> {
    return unwrapAsync(leadLeadLeadsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Get lead
   *
   * @remarks
   * Get lead
   */
  async leadLeadsOne(
    request: operations.LeadLeadsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadLeadsOneResponse> {
    return unwrapAsync(leadLeadLeadsOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Update lead
   *
   * @remarks
   * Update lead
   */
  async leadLeadsUpdate(
    request: operations.LeadLeadsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadLeadsUpdateResponse> {
    return unwrapAsync(leadLeadLeadsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete lead
   *
   * @remarks
   * Delete lead
   */
  async leadLeadsDelete(
    request: operations.LeadLeadsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.LeadLeadsDeleteResponse> {
    return unwrapAsync(leadLeadLeadsDelete(
      this,
      request,
      options,
    ));
  }
}
