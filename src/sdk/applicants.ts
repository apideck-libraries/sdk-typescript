/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { atsApplicantsCreate } from "../funcs/atsApplicantsCreate.js";
import { atsApplicantsDelete } from "../funcs/atsApplicantsDelete.js";
import { atsApplicantsGet } from "../funcs/atsApplicantsGet.js";
import { atsApplicantsList } from "../funcs/atsApplicantsList.js";
import { atsApplicantsUpdate } from "../funcs/atsApplicantsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Applicants extends ClientSDK {
  /**
   * List Applicants
   *
   * @remarks
   * List Applicants
   */
  async list(
    request: operations.AtsApplicantsAllRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.AtsApplicantsAllResponse, { cursor: string }>
  > {
    return unwrapResultIterator(atsApplicantsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Applicant
   *
   * @remarks
   * Create Applicant
   */
  async create(
    request: operations.AtsApplicantsAddRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsAddResponse> {
    return unwrapAsync(atsApplicantsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Applicant
   *
   * @remarks
   * Get Applicant
   */
  async get(
    request: operations.AtsApplicantsOneRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsOneResponse> {
    return unwrapAsync(atsApplicantsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Applicant
   *
   * @remarks
   * Update Applicant
   */
  async update(
    request: operations.AtsApplicantsUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsUpdateResponse> {
    return unwrapAsync(atsApplicantsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Applicant
   *
   * @remarks
   * Delete Applicant
   */
  async delete(
    request: operations.AtsApplicantsDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.AtsApplicantsDeleteResponse> {
    return unwrapAsync(atsApplicantsDelete(
      this,
      request,
      options,
    ));
  }
}
