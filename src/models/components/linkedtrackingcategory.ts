/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedTrackingCategory = {
  /**
   * The unique identifier for the tracking category.
   */
  id?: string | undefined;
  /**
   * The name of the tracking category.
   */
  name?: string | null | undefined;
  /**
   * The unique identifier for the parent tracking category.
   */
  parentId?: string | undefined;
  /**
   * The name of the parent tracking category.
   */
  parentName?: string | null | undefined;
};

/** @internal */
export const LinkedTrackingCategory$inboundSchema: z.ZodType<
  LinkedTrackingCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  parent_id: z.string().optional(),
  parent_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_id": "parentId",
    "parent_name": "parentName",
  });
});

/** @internal */
export type LinkedTrackingCategory$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  parent_id?: string | undefined;
  parent_name?: string | null | undefined;
};

/** @internal */
export const LinkedTrackingCategory$outboundSchema: z.ZodType<
  LinkedTrackingCategory$Outbound,
  z.ZodTypeDef,
  LinkedTrackingCategory
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  parentId: z.string().optional(),
  parentName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    parentId: "parent_id",
    parentName: "parent_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedTrackingCategory$ {
  /** @deprecated use `LinkedTrackingCategory$inboundSchema` instead. */
  export const inboundSchema = LinkedTrackingCategory$inboundSchema;
  /** @deprecated use `LinkedTrackingCategory$outboundSchema` instead. */
  export const outboundSchema = LinkedTrackingCategory$outboundSchema;
  /** @deprecated use `LinkedTrackingCategory$Outbound` instead. */
  export type Outbound = LinkedTrackingCategory$Outbound;
}

export function linkedTrackingCategoryToJSON(
  linkedTrackingCategory: LinkedTrackingCategory,
): string {
  return JSON.stringify(
    LinkedTrackingCategory$outboundSchema.parse(linkedTrackingCategory),
  );
}

export function linkedTrackingCategoryFromJSON(
  jsonString: string,
): SafeParseResult<LinkedTrackingCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedTrackingCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedTrackingCategory' from JSON`,
  );
}
