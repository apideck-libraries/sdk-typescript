/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedBankAccount = {
  /**
   * The unique identifier for the bank account.
   */
  id?: string | undefined;
  /**
   * The name of the bank account
   */
  name?: string | null | undefined;
  /**
   * The bank account number
   */
  accountNumber?: string | null | undefined;
  /**
   * The name of the bank or financial institution
   */
  bankName?: string | null | undefined;
};

/** @internal */
export const LinkedBankAccount$inboundSchema: z.ZodType<
  LinkedBankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  bank_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_number": "accountNumber",
    "bank_name": "bankName",
  });
});

/** @internal */
export type LinkedBankAccount$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  account_number?: string | null | undefined;
  bank_name?: string | null | undefined;
};

/** @internal */
export const LinkedBankAccount$outboundSchema: z.ZodType<
  LinkedBankAccount$Outbound,
  z.ZodTypeDef,
  LinkedBankAccount
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  bankName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountNumber: "account_number",
    bankName: "bank_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedBankAccount$ {
  /** @deprecated use `LinkedBankAccount$inboundSchema` instead. */
  export const inboundSchema = LinkedBankAccount$inboundSchema;
  /** @deprecated use `LinkedBankAccount$outboundSchema` instead. */
  export const outboundSchema = LinkedBankAccount$outboundSchema;
  /** @deprecated use `LinkedBankAccount$Outbound` instead. */
  export type Outbound = LinkedBankAccount$Outbound;
}

export function linkedBankAccountToJSON(
  linkedBankAccount: LinkedBankAccount,
): string {
  return JSON.stringify(
    LinkedBankAccount$outboundSchema.parse(linkedBankAccount),
  );
}

export function linkedBankAccountFromJSON(
  jsonString: string,
): SafeParseResult<LinkedBankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedBankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedBankAccount' from JSON`,
  );
}
