/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedPurchaseOrder = {
  /**
   * The unique identifier for the purchase order.
   */
  id?: string | undefined;
  /**
   * The unique identifier for the purchase order line.
   */
  lineId?: string | null | undefined;
  /**
   * The line number of the purchase order line.
   */
  lineNumber?: string | null | undefined;
};

/** @internal */
export const LinkedPurchaseOrder$inboundSchema: z.ZodType<
  LinkedPurchaseOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  line_id: z.nullable(z.string()).optional(),
  line_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "line_id": "lineId",
    "line_number": "lineNumber",
  });
});

/** @internal */
export type LinkedPurchaseOrder$Outbound = {
  id?: string | undefined;
  line_id?: string | null | undefined;
  line_number?: string | null | undefined;
};

/** @internal */
export const LinkedPurchaseOrder$outboundSchema: z.ZodType<
  LinkedPurchaseOrder$Outbound,
  z.ZodTypeDef,
  LinkedPurchaseOrder
> = z.object({
  id: z.string().optional(),
  lineId: z.nullable(z.string()).optional(),
  lineNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    lineId: "line_id",
    lineNumber: "line_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedPurchaseOrder$ {
  /** @deprecated use `LinkedPurchaseOrder$inboundSchema` instead. */
  export const inboundSchema = LinkedPurchaseOrder$inboundSchema;
  /** @deprecated use `LinkedPurchaseOrder$outboundSchema` instead. */
  export const outboundSchema = LinkedPurchaseOrder$outboundSchema;
  /** @deprecated use `LinkedPurchaseOrder$Outbound` instead. */
  export type Outbound = LinkedPurchaseOrder$Outbound;
}

export function linkedPurchaseOrderToJSON(
  linkedPurchaseOrder: LinkedPurchaseOrder,
): string {
  return JSON.stringify(
    LinkedPurchaseOrder$outboundSchema.parse(linkedPurchaseOrder),
  );
}

export function linkedPurchaseOrderFromJSON(
  jsonString: string,
): SafeParseResult<LinkedPurchaseOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedPurchaseOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedPurchaseOrder' from JSON`,
  );
}
