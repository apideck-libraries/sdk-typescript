/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export type CustomObjectFields = {
  name?: string | undefined;
  value?: string | undefined;
};

export type CustomObject = {
  /**
   * The unique identifier of the custom object
   */
  id?: string | undefined;
  /**
   * The unique identifier of the owner of the custom object
   */
  ownerId?: string | undefined;
  /**
   * The name of the custom object
   */
  name?: string | null | undefined;
  fields?: Array<CustomObjectFields> | undefined;
  /**
   * The unique identifier of the user who last updated the custom object
   */
  updatedBy?: string | undefined;
  /**
   * The unique identifier of the user who created the custom object
   */
  createdBy?: string | undefined;
  /**
   * The timestamp when the custom object was last updated
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp when the custom object was created
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type CustomObjectInput = {
  /**
   * The name of the custom object
   */
  name?: string | null | undefined;
  fields?: Array<CustomObjectFields> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const CustomObjectFields$inboundSchema: z.ZodType<
  CustomObjectFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type CustomObjectFields$Outbound = {
  name?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const CustomObjectFields$outboundSchema: z.ZodType<
  CustomObjectFields$Outbound,
  z.ZodTypeDef,
  CustomObjectFields
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectFields$ {
  /** @deprecated use `CustomObjectFields$inboundSchema` instead. */
  export const inboundSchema = CustomObjectFields$inboundSchema;
  /** @deprecated use `CustomObjectFields$outboundSchema` instead. */
  export const outboundSchema = CustomObjectFields$outboundSchema;
  /** @deprecated use `CustomObjectFields$Outbound` instead. */
  export type Outbound = CustomObjectFields$Outbound;
}

export function customObjectFieldsToJSON(
  customObjectFields: CustomObjectFields,
): string {
  return JSON.stringify(
    CustomObjectFields$outboundSchema.parse(customObjectFields),
  );
}

export function customObjectFieldsFromJSON(
  jsonString: string,
): SafeParseResult<CustomObjectFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObjectFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObjectFields' from JSON`,
  );
}

/** @internal */
export const CustomObject$inboundSchema: z.ZodType<
  CustomObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  owner_id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => CustomObjectFields$inboundSchema)).optional(),
  updated_by: z.string().optional(),
  created_by: z.string().optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CustomObject$Outbound = {
  id?: string | undefined;
  owner_id?: string | undefined;
  name?: string | null | undefined;
  fields?: Array<CustomObjectFields$Outbound> | undefined;
  updated_by?: string | undefined;
  created_by?: string | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const CustomObject$outboundSchema: z.ZodType<
  CustomObject$Outbound,
  z.ZodTypeDef,
  CustomObject
> = z.object({
  id: z.string().optional(),
  ownerId: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => CustomObjectFields$outboundSchema)).optional(),
  updatedBy: z.string().optional(),
  createdBy: z.string().optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObject$ {
  /** @deprecated use `CustomObject$inboundSchema` instead. */
  export const inboundSchema = CustomObject$inboundSchema;
  /** @deprecated use `CustomObject$outboundSchema` instead. */
  export const outboundSchema = CustomObject$outboundSchema;
  /** @deprecated use `CustomObject$Outbound` instead. */
  export type Outbound = CustomObject$Outbound;
}

export function customObjectToJSON(customObject: CustomObject): string {
  return JSON.stringify(CustomObject$outboundSchema.parse(customObject));
}

export function customObjectFromJSON(
  jsonString: string,
): SafeParseResult<CustomObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObject' from JSON`,
  );
}

/** @internal */
export const CustomObjectInput$inboundSchema: z.ZodType<
  CustomObjectInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => CustomObjectFields$inboundSchema)).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CustomObjectInput$Outbound = {
  name?: string | null | undefined;
  fields?: Array<CustomObjectFields$Outbound> | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const CustomObjectInput$outboundSchema: z.ZodType<
  CustomObjectInput$Outbound,
  z.ZodTypeDef,
  CustomObjectInput
> = z.object({
  name: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => CustomObjectFields$outboundSchema)).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectInput$ {
  /** @deprecated use `CustomObjectInput$inboundSchema` instead. */
  export const inboundSchema = CustomObjectInput$inboundSchema;
  /** @deprecated use `CustomObjectInput$outboundSchema` instead. */
  export const outboundSchema = CustomObjectInput$outboundSchema;
  /** @deprecated use `CustomObjectInput$Outbound` instead. */
  export type Outbound = CustomObjectInput$Outbound;
}

export function customObjectInputToJSON(
  customObjectInput: CustomObjectInput,
): string {
  return JSON.stringify(
    CustomObjectInput$outboundSchema.parse(customObjectInput),
  );
}

export function customObjectInputFromJSON(
  jsonString: string,
): SafeParseResult<CustomObjectInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObjectInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObjectInput' from JSON`,
  );
}
