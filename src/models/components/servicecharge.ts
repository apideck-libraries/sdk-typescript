/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * The type of the service charge.
 */
export const ServiceChargeType = {
  AutoGratuity: "auto_gratuity",
  Custom: "custom",
} as const;
/**
 * The type of the service charge.
 */
export type ServiceChargeType = ClosedEnum<typeof ServiceChargeType>;

export type ServiceCharge = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * Service charge name
   */
  name?: string | undefined;
  amount?: number | undefined;
  /**
   * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
   */
  percentage?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  active?: boolean | null | undefined;
  /**
   * The type of the service charge.
   */
  type?: ServiceChargeType | undefined;
};

export type ServiceChargeInput = {
  /**
   * Service charge name
   */
  name?: string | undefined;
  amount?: number | undefined;
  /**
   * Service charge percentage. Use this field to calculate the amount of the service charge. Pass a percentage and amount at the same time.
   */
  percentage?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  active?: boolean | null | undefined;
  /**
   * The type of the service charge.
   */
  type?: ServiceChargeType | undefined;
};

/** @internal */
export const ServiceChargeType$inboundSchema: z.ZodNativeEnum<
  typeof ServiceChargeType
> = z.nativeEnum(ServiceChargeType);

/** @internal */
export const ServiceChargeType$outboundSchema: z.ZodNativeEnum<
  typeof ServiceChargeType
> = ServiceChargeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceChargeType$ {
  /** @deprecated use `ServiceChargeType$inboundSchema` instead. */
  export const inboundSchema = ServiceChargeType$inboundSchema;
  /** @deprecated use `ServiceChargeType$outboundSchema` instead. */
  export const outboundSchema = ServiceChargeType$outboundSchema;
}

/** @internal */
export const ServiceCharge$inboundSchema: z.ZodType<
  ServiceCharge,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  active: z.nullable(z.boolean()).optional(),
  type: ServiceChargeType$inboundSchema.optional(),
});

/** @internal */
export type ServiceCharge$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  currency?: string | null | undefined;
  active?: boolean | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ServiceCharge$outboundSchema: z.ZodType<
  ServiceCharge$Outbound,
  z.ZodTypeDef,
  ServiceCharge
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  active: z.nullable(z.boolean()).optional(),
  type: ServiceChargeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceCharge$ {
  /** @deprecated use `ServiceCharge$inboundSchema` instead. */
  export const inboundSchema = ServiceCharge$inboundSchema;
  /** @deprecated use `ServiceCharge$outboundSchema` instead. */
  export const outboundSchema = ServiceCharge$outboundSchema;
  /** @deprecated use `ServiceCharge$Outbound` instead. */
  export type Outbound = ServiceCharge$Outbound;
}

/** @internal */
export const ServiceChargeInput$inboundSchema: z.ZodType<
  ServiceChargeInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  active: z.nullable(z.boolean()).optional(),
  type: ServiceChargeType$inboundSchema.optional(),
});

/** @internal */
export type ServiceChargeInput$Outbound = {
  name?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  currency?: string | null | undefined;
  active?: boolean | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const ServiceChargeInput$outboundSchema: z.ZodType<
  ServiceChargeInput$Outbound,
  z.ZodTypeDef,
  ServiceChargeInput
> = z.object({
  name: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  active: z.nullable(z.boolean()).optional(),
  type: ServiceChargeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceChargeInput$ {
  /** @deprecated use `ServiceChargeInput$inboundSchema` instead. */
  export const inboundSchema = ServiceChargeInput$inboundSchema;
  /** @deprecated use `ServiceChargeInput$outboundSchema` instead. */
  export const outboundSchema = ServiceChargeInput$outboundSchema;
  /** @deprecated use `ServiceChargeInput$Outbound` instead. */
  export type Outbound = ServiceChargeInput$Outbound;
}
