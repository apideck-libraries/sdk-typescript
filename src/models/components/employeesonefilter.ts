/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmployeesOneFilter = {
  /**
   * Company ID to filter on
   */
  companyId?: string | undefined;
};

/** @internal */
export const EmployeesOneFilter$inboundSchema: z.ZodType<
  EmployeesOneFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
  });
});

/** @internal */
export type EmployeesOneFilter$Outbound = {
  company_id?: string | undefined;
};

/** @internal */
export const EmployeesOneFilter$outboundSchema: z.ZodType<
  EmployeesOneFilter$Outbound,
  z.ZodTypeDef,
  EmployeesOneFilter
> = z.object({
  companyId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeesOneFilter$ {
  /** @deprecated use `EmployeesOneFilter$inboundSchema` instead. */
  export const inboundSchema = EmployeesOneFilter$inboundSchema;
  /** @deprecated use `EmployeesOneFilter$outboundSchema` instead. */
  export const outboundSchema = EmployeesOneFilter$outboundSchema;
  /** @deprecated use `EmployeesOneFilter$Outbound` instead. */
  export type Outbound = EmployeesOneFilter$Outbound;
}

export function employeesOneFilterToJSON(
  employeesOneFilter: EmployeesOneFilter,
): string {
  return JSON.stringify(
    EmployeesOneFilter$outboundSchema.parse(employeesOneFilter),
  );
}

export function employeesOneFilterFromJSON(
  jsonString: string,
): SafeParseResult<EmployeesOneFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeesOneFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeesOneFilter' from JSON`,
  );
}
