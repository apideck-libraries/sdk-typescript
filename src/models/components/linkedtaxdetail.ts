/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedTaxDetail = {
  /**
   * The type of tax.
   */
  type?: string | undefined;
  /**
   * The number of the tax.
   */
  number?: string | null | undefined;
  /**
   * Whether the tax is a transaction tax.
   */
  isTransactionTax?: boolean | undefined;
  /**
   * Whether the tax is a primary tax.
   */
  isPrimaryTax?: boolean | undefined;
};

/** @internal */
export const LinkedTaxDetail$inboundSchema: z.ZodType<
  LinkedTaxDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  number: z.nullable(z.string()).optional(),
  is_transaction_tax: z.boolean().optional(),
  is_primary_tax: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_transaction_tax": "isTransactionTax",
    "is_primary_tax": "isPrimaryTax",
  });
});

/** @internal */
export type LinkedTaxDetail$Outbound = {
  type?: string | undefined;
  number?: string | null | undefined;
  is_transaction_tax?: boolean | undefined;
  is_primary_tax?: boolean | undefined;
};

/** @internal */
export const LinkedTaxDetail$outboundSchema: z.ZodType<
  LinkedTaxDetail$Outbound,
  z.ZodTypeDef,
  LinkedTaxDetail
> = z.object({
  type: z.string().optional(),
  number: z.nullable(z.string()).optional(),
  isTransactionTax: z.boolean().optional(),
  isPrimaryTax: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isTransactionTax: "is_transaction_tax",
    isPrimaryTax: "is_primary_tax",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedTaxDetail$ {
  /** @deprecated use `LinkedTaxDetail$inboundSchema` instead. */
  export const inboundSchema = LinkedTaxDetail$inboundSchema;
  /** @deprecated use `LinkedTaxDetail$outboundSchema` instead. */
  export const outboundSchema = LinkedTaxDetail$outboundSchema;
  /** @deprecated use `LinkedTaxDetail$Outbound` instead. */
  export type Outbound = LinkedTaxDetail$Outbound;
}

export function linkedTaxDetailToJSON(
  linkedTaxDetail: LinkedTaxDetail,
): string {
  return JSON.stringify(LinkedTaxDetail$outboundSchema.parse(linkedTaxDetail));
}

export function linkedTaxDetailFromJSON(
  jsonString: string,
): SafeParseResult<LinkedTaxDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedTaxDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedTaxDetail' from JSON`,
  );
}
