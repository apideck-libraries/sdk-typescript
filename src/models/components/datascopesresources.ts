/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Wildcard indicating all resources and fields when Data Scopes is selected
 */
export const DataScopesResources2 = {
  Wildcard: "*",
} as const;
/**
 * Wildcard indicating all resources and fields when Data Scopes is selected
 */
export type DataScopesResources2 = ClosedEnum<typeof DataScopesResources2>;

export type DataScopesResources1 = {
  /**
   * Whether the field can be read
   */
  read?: boolean | undefined;
  /**
   * Whether the field can be written to
   */
  write?: boolean | undefined;
};

/**
 * Data scopes resource configuration that can be either detailed field permissions or a wildcard
 */
export type DataScopesResources = {
  [k: string]: { [k: string]: DataScopesResources1 };
} | DataScopesResources2;

/** @internal */
export const DataScopesResources2$inboundSchema: z.ZodNativeEnum<
  typeof DataScopesResources2
> = z.nativeEnum(DataScopesResources2);

/** @internal */
export const DataScopesResources2$outboundSchema: z.ZodNativeEnum<
  typeof DataScopesResources2
> = DataScopesResources2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataScopesResources2$ {
  /** @deprecated use `DataScopesResources2$inboundSchema` instead. */
  export const inboundSchema = DataScopesResources2$inboundSchema;
  /** @deprecated use `DataScopesResources2$outboundSchema` instead. */
  export const outboundSchema = DataScopesResources2$outboundSchema;
}

/** @internal */
export const DataScopesResources1$inboundSchema: z.ZodType<
  DataScopesResources1,
  z.ZodTypeDef,
  unknown
> = z.object({
  read: z.boolean().optional(),
  write: z.boolean().optional(),
});

/** @internal */
export type DataScopesResources1$Outbound = {
  read?: boolean | undefined;
  write?: boolean | undefined;
};

/** @internal */
export const DataScopesResources1$outboundSchema: z.ZodType<
  DataScopesResources1$Outbound,
  z.ZodTypeDef,
  DataScopesResources1
> = z.object({
  read: z.boolean().optional(),
  write: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataScopesResources1$ {
  /** @deprecated use `DataScopesResources1$inboundSchema` instead. */
  export const inboundSchema = DataScopesResources1$inboundSchema;
  /** @deprecated use `DataScopesResources1$outboundSchema` instead. */
  export const outboundSchema = DataScopesResources1$outboundSchema;
  /** @deprecated use `DataScopesResources1$Outbound` instead. */
  export type Outbound = DataScopesResources1$Outbound;
}

export function dataScopesResources1ToJSON(
  dataScopesResources1: DataScopesResources1,
): string {
  return JSON.stringify(
    DataScopesResources1$outboundSchema.parse(dataScopesResources1),
  );
}

export function dataScopesResources1FromJSON(
  jsonString: string,
): SafeParseResult<DataScopesResources1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataScopesResources1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataScopesResources1' from JSON`,
  );
}

/** @internal */
export const DataScopesResources$inboundSchema: z.ZodType<
  DataScopesResources,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.record(z.lazy(() => DataScopesResources1$inboundSchema))),
  DataScopesResources2$inboundSchema,
]);

/** @internal */
export type DataScopesResources$Outbound = {
  [k: string]: { [k: string]: DataScopesResources1$Outbound };
} | string;

/** @internal */
export const DataScopesResources$outboundSchema: z.ZodType<
  DataScopesResources$Outbound,
  z.ZodTypeDef,
  DataScopesResources
> = z.union([
  z.record(z.record(z.lazy(() => DataScopesResources1$outboundSchema))),
  DataScopesResources2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataScopesResources$ {
  /** @deprecated use `DataScopesResources$inboundSchema` instead. */
  export const inboundSchema = DataScopesResources$inboundSchema;
  /** @deprecated use `DataScopesResources$outboundSchema` instead. */
  export const outboundSchema = DataScopesResources$outboundSchema;
  /** @deprecated use `DataScopesResources$Outbound` instead. */
  export type Outbound = DataScopesResources$Outbound;
}

export function dataScopesResourcesToJSON(
  dataScopesResources: DataScopesResources,
): string {
  return JSON.stringify(
    DataScopesResources$outboundSchema.parse(dataScopesResources),
  );
}

export function dataScopesResourcesFromJSON(
  jsonString: string,
): SafeParseResult<DataScopesResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataScopesResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataScopesResources' from JSON`,
  );
}
