/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EcommerceOrdersFilter = {
  /**
   * Customer email address to filter on
   */
  email?: string | undefined;
  /**
   * Customer id to filter on
   */
  customerId?: string | undefined;
  /**
   * Minimum date the order was last modified
   */
  updatedSince?: string | undefined;
  /**
   * Minimum date the order was created
   */
  createdSince?: string | undefined;
};

/** @internal */
export const EcommerceOrdersFilter$inboundSchema: z.ZodType<
  EcommerceOrdersFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  customer_id: z.string().optional(),
  updated_since: z.string().optional(),
  created_since: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "updated_since": "updatedSince",
    "created_since": "createdSince",
  });
});

/** @internal */
export type EcommerceOrdersFilter$Outbound = {
  email?: string | undefined;
  customer_id?: string | undefined;
  updated_since?: string | undefined;
  created_since?: string | undefined;
};

/** @internal */
export const EcommerceOrdersFilter$outboundSchema: z.ZodType<
  EcommerceOrdersFilter$Outbound,
  z.ZodTypeDef,
  EcommerceOrdersFilter
> = z.object({
  email: z.string().optional(),
  customerId: z.string().optional(),
  updatedSince: z.string().optional(),
  createdSince: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    updatedSince: "updated_since",
    createdSince: "created_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceOrdersFilter$ {
  /** @deprecated use `EcommerceOrdersFilter$inboundSchema` instead. */
  export const inboundSchema = EcommerceOrdersFilter$inboundSchema;
  /** @deprecated use `EcommerceOrdersFilter$outboundSchema` instead. */
  export const outboundSchema = EcommerceOrdersFilter$outboundSchema;
  /** @deprecated use `EcommerceOrdersFilter$Outbound` instead. */
  export type Outbound = EcommerceOrdersFilter$Outbound;
}

export function ecommerceOrdersFilterToJSON(
  ecommerceOrdersFilter: EcommerceOrdersFilter,
): string {
  return JSON.stringify(
    EcommerceOrdersFilter$outboundSchema.parse(ecommerceOrdersFilter),
  );
}

export function ecommerceOrdersFilterFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceOrdersFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceOrdersFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceOrdersFilter' from JSON`,
  );
}
