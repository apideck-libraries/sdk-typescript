/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * A refund for an ecommerce order.
 */
export type EcommerceOrderRefund = {
  /**
   * A unique identifier for an object.
   */
  id?: string | null | undefined;
  /**
   * The amount of the refund.
   */
  amount?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * The reason for the refund.
   */
  reason?: string | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
};

/** @internal */
export const EcommerceOrderRefund$inboundSchema: z.ZodType<
  EcommerceOrderRefund,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  amount: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  reason: z.string().optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type EcommerceOrderRefund$Outbound = {
  id?: string | null | undefined;
  amount?: string | undefined;
  currency?: string | null | undefined;
  reason?: string | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const EcommerceOrderRefund$outboundSchema: z.ZodType<
  EcommerceOrderRefund$Outbound,
  z.ZodTypeDef,
  EcommerceOrderRefund
> = z.object({
  id: z.nullable(z.string()).optional(),
  amount: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  reason: z.string().optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceOrderRefund$ {
  /** @deprecated use `EcommerceOrderRefund$inboundSchema` instead. */
  export const inboundSchema = EcommerceOrderRefund$inboundSchema;
  /** @deprecated use `EcommerceOrderRefund$outboundSchema` instead. */
  export const outboundSchema = EcommerceOrderRefund$outboundSchema;
  /** @deprecated use `EcommerceOrderRefund$Outbound` instead. */
  export type Outbound = EcommerceOrderRefund$Outbound;
}

export function ecommerceOrderRefundToJSON(
  ecommerceOrderRefund: EcommerceOrderRefund,
): string {
  return JSON.stringify(
    EcommerceOrderRefund$outboundSchema.parse(ecommerceOrderRefund),
  );
}

export function ecommerceOrderRefundFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceOrderRefund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceOrderRefund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceOrderRefund' from JSON`,
  );
}
