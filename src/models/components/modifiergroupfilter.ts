/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ModifierGroupFilter = {
  /**
   * Id of the job to filter on
   */
  modifierGroupId?: string | undefined;
};

/** @internal */
export const ModifierGroupFilter$inboundSchema: z.ZodType<
  ModifierGroupFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  modifier_group_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "modifier_group_id": "modifierGroupId",
  });
});

/** @internal */
export type ModifierGroupFilter$Outbound = {
  modifier_group_id?: string | undefined;
};

/** @internal */
export const ModifierGroupFilter$outboundSchema: z.ZodType<
  ModifierGroupFilter$Outbound,
  z.ZodTypeDef,
  ModifierGroupFilter
> = z.object({
  modifierGroupId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modifierGroupId: "modifier_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifierGroupFilter$ {
  /** @deprecated use `ModifierGroupFilter$inboundSchema` instead. */
  export const inboundSchema = ModifierGroupFilter$inboundSchema;
  /** @deprecated use `ModifierGroupFilter$outboundSchema` instead. */
  export const outboundSchema = ModifierGroupFilter$outboundSchema;
  /** @deprecated use `ModifierGroupFilter$Outbound` instead. */
  export type Outbound = ModifierGroupFilter$Outbound;
}
