/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Deduction = {
  /**
   * The name of the deduction.
   */
  name?: string | null | undefined;
  /**
   * The amount deducted.
   */
  amount?: number | null | undefined;
};

/** @internal */
export const Deduction$inboundSchema: z.ZodType<
  Deduction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/** @internal */
export type Deduction$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
};

/** @internal */
export const Deduction$outboundSchema: z.ZodType<
  Deduction$Outbound,
  z.ZodTypeDef,
  Deduction
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deduction$ {
  /** @deprecated use `Deduction$inboundSchema` instead. */
  export const inboundSchema = Deduction$inboundSchema;
  /** @deprecated use `Deduction$outboundSchema` instead. */
  export const outboundSchema = Deduction$outboundSchema;
  /** @deprecated use `Deduction$Outbound` instead. */
  export type Outbound = Deduction$Outbound;
}
