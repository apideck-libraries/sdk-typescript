/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";
import {
  PaymentCard,
  PaymentCard$inboundSchema,
  PaymentCard$Outbound,
  PaymentCard$outboundSchema,
  PaymentCardInput,
  PaymentCardInput$inboundSchema,
  PaymentCardInput$Outbound,
  PaymentCardInput$outboundSchema,
} from "./paymentcard.js";
import {
  PosBankAccount,
  PosBankAccount$inboundSchema,
  PosBankAccount$Outbound,
  PosBankAccount$outboundSchema,
} from "./posbankaccount.js";
import {
  ServiceCharge,
  ServiceCharge$inboundSchema,
  ServiceCharge$Outbound,
  ServiceCharge$outboundSchema,
  ServiceChargeInput,
  ServiceChargeInput$inboundSchema,
  ServiceChargeInput$Outbound,
  ServiceChargeInput$outboundSchema,
} from "./servicecharge.js";

export const PosPaymentProcessingFeesType = {
  Initial: "initial",
  Adjustment: "adjustment",
} as const;
export type PosPaymentProcessingFeesType = ClosedEnum<
  typeof PosPaymentProcessingFeesType
>;

export type ProcessingFees = {
  amount?: number | undefined;
  effectiveAt?: Date | undefined;
  processingType?: PosPaymentProcessingFeesType | undefined;
};

/**
 * Source of this payment.
 */
export const PosPaymentSource = {
  Card: "card",
  BankAccount: "bank_account",
  Wallet: "wallet",
  Bnpl: "bnpl",
  Cash: "cash",
  External: "external",
  Other: "other",
} as const;
/**
 * Source of this payment.
 */
export type PosPaymentSource = ClosedEnum<typeof PosPaymentSource>;

/**
 * Status of this payment.
 */
export const PosPaymentStatusStatus = {
  Approved: "approved",
  Pending: "pending",
  Completed: "completed",
  Canceled: "canceled",
  Failed: "failed",
  Other: "other",
} as const;
/**
 * Status of this payment.
 */
export type PosPaymentStatusStatus = ClosedEnum<typeof PosPaymentStatusStatus>;

/**
 * Cash details for this payment
 */
export type CashDetails = {
  /**
   * The amount of cash given by the customer.
   */
  amount?: any | undefined;
  /**
   * The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields.
   */
  chargeBackAmount?: any | undefined;
};

export type CardDetails = {
  /**
   * A card's non-confidential details.
   */
  card?: PaymentCard | null | undefined;
};

/**
 * The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
 */
export const PosPaymentWalletStatus = {
  Authorized: "authorized",
  Captured: "captured",
  Voided: "voided",
  Failed: "failed",
  Other: "other",
} as const;
/**
 * The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
 */
export type PosPaymentWalletStatus = ClosedEnum<typeof PosPaymentWalletStatus>;

/**
 * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
 */
export type WalletDetails = {
  /**
   * The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED.
   */
  status?: PosPaymentWalletStatus | undefined;
};

/**
 * The type of external payment the seller received. It can be one of the following:
 *
 * @remarks
 * - CHECK - Paid using a physical check.
 * - BANK_TRANSFER - Paid using external bank transfer.
 * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
 * - CRYPTO - Paid using a crypto currency.
 * - SQUARE_CASH - Paid using Square Cash App.
 * - SOCIAL - Paid using peer-to-peer payment applications.
 * - EXTERNAL - A third-party application gathered this payment outside of Square.
 * - EMONEY - Paid using an E-money provider.
 * - CARD - A credit or debit card that Square does not support.
 * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
 * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
 * - OTHER - A type not listed here.
 */
export const PosPaymentType = {
  Check: "check",
  BankTransfer: "bank_transfer",
  OtherGiftCard: "other_gift_card",
  Crypto: "crypto",
  SquareCash: "square_cash",
  Social: "social",
  External: "external",
  Emoney: "emoney",
  Card: "card",
  StoredBalance: "stored_balance",
  FoodVoucher: "food_voucher",
  Other: "other",
} as const;
/**
 * The type of external payment the seller received. It can be one of the following:
 *
 * @remarks
 * - CHECK - Paid using a physical check.
 * - BANK_TRANSFER - Paid using external bank transfer.
 * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
 * - CRYPTO - Paid using a crypto currency.
 * - SQUARE_CASH - Paid using Square Cash App.
 * - SOCIAL - Paid using peer-to-peer payment applications.
 * - EXTERNAL - A third-party application gathered this payment outside of Square.
 * - EMONEY - Paid using an E-money provider.
 * - CARD - A credit or debit card that Square does not support.
 * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
 * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
 * - OTHER - A type not listed here.
 */
export type PosPaymentType = ClosedEnum<typeof PosPaymentType>;

/**
 * Details about an external payment.
 */
export type ExternalDetails = {
  /**
   * The type of external payment the seller received. It can be one of the following:
   *
   * @remarks
   * - CHECK - Paid using a physical check.
   * - BANK_TRANSFER - Paid using external bank transfer.
   * - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
   * - CRYPTO - Paid using a crypto currency.
   * - SQUARE_CASH - Paid using Square Cash App.
   * - SOCIAL - Paid using peer-to-peer payment applications.
   * - EXTERNAL - A third-party application gathered this payment outside of Square.
   * - EMONEY - Paid using an E-money provider.
   * - CARD - A credit or debit card that Square does not support.
   * - STORED_BALANCE - Use for house accounts, store credit, and so forth.
   * - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
   * - OTHER - A type not listed here.
   */
  type: PosPaymentType;
  /**
   * A description of the external payment source. For example,
   *
   * @remarks
   * "Food Delivery Service".
   */
  source: string;
  /**
   * An ID to associate the payment to its originating source.
   */
  sourceId?: string | undefined;
  /**
   * The fees paid to the source. The amount minus this field is the net amount seller receives.
   */
  sourceFeeAmount?: number | undefined;
};

export type PosPayment = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
   */
  sourceId: string;
  orderId: string;
  merchantId?: string | undefined;
  customerId: string;
  employeeId?: string | undefined;
  locationId?: string | undefined;
  deviceId?: string | undefined;
  tenderId: string;
  externalPaymentId?: string | undefined;
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  amount: number;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency: Currency | null;
  tip?: number | undefined;
  tax?: number | undefined;
  total?: number | undefined;
  /**
   * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
   */
  appFee?: number | undefined;
  changeBackCashAmount?: number | undefined;
  /**
   * The initial amount of money approved for this payment.
   */
  approved?: number | undefined;
  /**
   * The initial amount of money approved for this payment.
   */
  refunded?: number | undefined;
  processingFees?: Array<ProcessingFees> | undefined;
  /**
   * Source of this payment.
   */
  source?: PosPaymentSource | undefined;
  /**
   * Status of this payment.
   */
  status?: PosPaymentStatusStatus | undefined;
  /**
   * Cash details for this payment
   */
  cash?: CashDetails | undefined;
  cardDetails?: CardDetails | undefined;
  /**
   * Card details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  bankAccount?: PosBankAccount | undefined;
  /**
   * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  wallet?: WalletDetails | undefined;
  /**
   * Details about an external payment.
   */
  externalDetails?: ExternalDetails | undefined;
  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  serviceCharges?: Array<ServiceCharge> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type PosPaymentCardDetails = {
  /**
   * A card's non-confidential details.
   */
  card?: PaymentCardInput | null | undefined;
};

export type PosPaymentInput = {
  /**
   * The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.
   */
  sourceId: string;
  orderId: string;
  merchantId?: string | undefined;
  customerId: string;
  employeeId?: string | undefined;
  locationId?: string | undefined;
  deviceId?: string | undefined;
  tenderId: string;
  externalPaymentId?: string | undefined;
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  amount: number;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency: Currency | null;
  tip?: number | undefined;
  tax?: number | undefined;
  total?: number | undefined;
  /**
   * The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.
   */
  appFee?: number | undefined;
  changeBackCashAmount?: number | undefined;
  /**
   * The initial amount of money approved for this payment.
   */
  approved?: number | undefined;
  /**
   * The initial amount of money approved for this payment.
   */
  refunded?: number | undefined;
  processingFees?: Array<ProcessingFees> | undefined;
  /**
   * Source of this payment.
   */
  source?: PosPaymentSource | undefined;
  /**
   * Status of this payment.
   */
  status?: PosPaymentStatusStatus | undefined;
  /**
   * Cash details for this payment
   */
  cash?: CashDetails | undefined;
  cardDetails?: PosPaymentCardDetails | undefined;
  /**
   * Card details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  bankAccount?: PosBankAccount | undefined;
  /**
   * Wallet details for this payment. This field is currently not available. Reach out to our team for more info.
   */
  wallet?: WalletDetails | undefined;
  /**
   * Details about an external payment.
   */
  externalDetails?: ExternalDetails | undefined;
  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  serviceCharges?: Array<ServiceChargeInput> | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const PosPaymentProcessingFeesType$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentProcessingFeesType
> = z.nativeEnum(PosPaymentProcessingFeesType);

/** @internal */
export const PosPaymentProcessingFeesType$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentProcessingFeesType
> = PosPaymentProcessingFeesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentProcessingFeesType$ {
  /** @deprecated use `PosPaymentProcessingFeesType$inboundSchema` instead. */
  export const inboundSchema = PosPaymentProcessingFeesType$inboundSchema;
  /** @deprecated use `PosPaymentProcessingFeesType$outboundSchema` instead. */
  export const outboundSchema = PosPaymentProcessingFeesType$outboundSchema;
}

/** @internal */
export const ProcessingFees$inboundSchema: z.ZodType<
  ProcessingFees,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  effective_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  processing_type: PosPaymentProcessingFeesType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_at": "effectiveAt",
    "processing_type": "processingType",
  });
});

/** @internal */
export type ProcessingFees$Outbound = {
  amount?: number | undefined;
  effective_at?: string | undefined;
  processing_type?: string | undefined;
};

/** @internal */
export const ProcessingFees$outboundSchema: z.ZodType<
  ProcessingFees$Outbound,
  z.ZodTypeDef,
  ProcessingFees
> = z.object({
  amount: z.number().optional(),
  effectiveAt: z.date().transform(v => v.toISOString()).optional(),
  processingType: PosPaymentProcessingFeesType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveAt: "effective_at",
    processingType: "processing_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessingFees$ {
  /** @deprecated use `ProcessingFees$inboundSchema` instead. */
  export const inboundSchema = ProcessingFees$inboundSchema;
  /** @deprecated use `ProcessingFees$outboundSchema` instead. */
  export const outboundSchema = ProcessingFees$outboundSchema;
  /** @deprecated use `ProcessingFees$Outbound` instead. */
  export type Outbound = ProcessingFees$Outbound;
}

/** @internal */
export const PosPaymentSource$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentSource
> = z.nativeEnum(PosPaymentSource);

/** @internal */
export const PosPaymentSource$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentSource
> = PosPaymentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentSource$ {
  /** @deprecated use `PosPaymentSource$inboundSchema` instead. */
  export const inboundSchema = PosPaymentSource$inboundSchema;
  /** @deprecated use `PosPaymentSource$outboundSchema` instead. */
  export const outboundSchema = PosPaymentSource$outboundSchema;
}

/** @internal */
export const PosPaymentStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentStatusStatus
> = z.nativeEnum(PosPaymentStatusStatus);

/** @internal */
export const PosPaymentStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentStatusStatus
> = PosPaymentStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentStatusStatus$ {
  /** @deprecated use `PosPaymentStatusStatus$inboundSchema` instead. */
  export const inboundSchema = PosPaymentStatusStatus$inboundSchema;
  /** @deprecated use `PosPaymentStatusStatus$outboundSchema` instead. */
  export const outboundSchema = PosPaymentStatusStatus$outboundSchema;
}

/** @internal */
export const CashDetails$inboundSchema: z.ZodType<
  CashDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.any().optional(),
  charge_back_amount: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "charge_back_amount": "chargeBackAmount",
  });
});

/** @internal */
export type CashDetails$Outbound = {
  amount?: any | undefined;
  charge_back_amount?: any | undefined;
};

/** @internal */
export const CashDetails$outboundSchema: z.ZodType<
  CashDetails$Outbound,
  z.ZodTypeDef,
  CashDetails
> = z.object({
  amount: z.any().optional(),
  chargeBackAmount: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    chargeBackAmount: "charge_back_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CashDetails$ {
  /** @deprecated use `CashDetails$inboundSchema` instead. */
  export const inboundSchema = CashDetails$inboundSchema;
  /** @deprecated use `CashDetails$outboundSchema` instead. */
  export const outboundSchema = CashDetails$outboundSchema;
  /** @deprecated use `CashDetails$Outbound` instead. */
  export type Outbound = CashDetails$Outbound;
}

/** @internal */
export const CardDetails$inboundSchema: z.ZodType<
  CardDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  card: z.nullable(PaymentCard$inboundSchema).optional(),
});

/** @internal */
export type CardDetails$Outbound = {
  card?: PaymentCard$Outbound | null | undefined;
};

/** @internal */
export const CardDetails$outboundSchema: z.ZodType<
  CardDetails$Outbound,
  z.ZodTypeDef,
  CardDetails
> = z.object({
  card: z.nullable(PaymentCard$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardDetails$ {
  /** @deprecated use `CardDetails$inboundSchema` instead. */
  export const inboundSchema = CardDetails$inboundSchema;
  /** @deprecated use `CardDetails$outboundSchema` instead. */
  export const outboundSchema = CardDetails$outboundSchema;
  /** @deprecated use `CardDetails$Outbound` instead. */
  export type Outbound = CardDetails$Outbound;
}

/** @internal */
export const PosPaymentWalletStatus$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentWalletStatus
> = z.nativeEnum(PosPaymentWalletStatus);

/** @internal */
export const PosPaymentWalletStatus$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentWalletStatus
> = PosPaymentWalletStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentWalletStatus$ {
  /** @deprecated use `PosPaymentWalletStatus$inboundSchema` instead. */
  export const inboundSchema = PosPaymentWalletStatus$inboundSchema;
  /** @deprecated use `PosPaymentWalletStatus$outboundSchema` instead. */
  export const outboundSchema = PosPaymentWalletStatus$outboundSchema;
}

/** @internal */
export const WalletDetails$inboundSchema: z.ZodType<
  WalletDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PosPaymentWalletStatus$inboundSchema.optional(),
});

/** @internal */
export type WalletDetails$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const WalletDetails$outboundSchema: z.ZodType<
  WalletDetails$Outbound,
  z.ZodTypeDef,
  WalletDetails
> = z.object({
  status: PosPaymentWalletStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletDetails$ {
  /** @deprecated use `WalletDetails$inboundSchema` instead. */
  export const inboundSchema = WalletDetails$inboundSchema;
  /** @deprecated use `WalletDetails$outboundSchema` instead. */
  export const outboundSchema = WalletDetails$outboundSchema;
  /** @deprecated use `WalletDetails$Outbound` instead. */
  export type Outbound = WalletDetails$Outbound;
}

/** @internal */
export const PosPaymentType$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentType
> = z.nativeEnum(PosPaymentType);

/** @internal */
export const PosPaymentType$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentType
> = PosPaymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentType$ {
  /** @deprecated use `PosPaymentType$inboundSchema` instead. */
  export const inboundSchema = PosPaymentType$inboundSchema;
  /** @deprecated use `PosPaymentType$outboundSchema` instead. */
  export const outboundSchema = PosPaymentType$outboundSchema;
}

/** @internal */
export const ExternalDetails$inboundSchema: z.ZodType<
  ExternalDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PosPaymentType$inboundSchema,
  source: z.string(),
  source_id: z.string().optional(),
  source_fee_amount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "source_id": "sourceId",
    "source_fee_amount": "sourceFeeAmount",
  });
});

/** @internal */
export type ExternalDetails$Outbound = {
  type: string;
  source: string;
  source_id?: string | undefined;
  source_fee_amount?: number | undefined;
};

/** @internal */
export const ExternalDetails$outboundSchema: z.ZodType<
  ExternalDetails$Outbound,
  z.ZodTypeDef,
  ExternalDetails
> = z.object({
  type: PosPaymentType$outboundSchema,
  source: z.string(),
  sourceId: z.string().optional(),
  sourceFeeAmount: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    sourceId: "source_id",
    sourceFeeAmount: "source_fee_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalDetails$ {
  /** @deprecated use `ExternalDetails$inboundSchema` instead. */
  export const inboundSchema = ExternalDetails$inboundSchema;
  /** @deprecated use `ExternalDetails$outboundSchema` instead. */
  export const outboundSchema = ExternalDetails$outboundSchema;
  /** @deprecated use `ExternalDetails$Outbound` instead. */
  export type Outbound = ExternalDetails$Outbound;
}

/** @internal */
export const PosPayment$inboundSchema: z.ZodType<
  PosPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  source_id: z.string(),
  order_id: z.string(),
  merchant_id: z.string().optional(),
  customer_id: z.string(),
  employee_id: z.string().optional(),
  location_id: z.string().optional(),
  device_id: z.string().optional(),
  tender_id: z.string(),
  external_payment_id: z.string().optional(),
  idempotency_key: z.string().optional(),
  amount: z.number(),
  currency: z.nullable(Currency$inboundSchema),
  tip: z.number().optional(),
  tax: z.number().optional(),
  total: z.number().optional(),
  app_fee: z.number().optional(),
  change_back_cash_amount: z.number().optional(),
  approved: z.number().optional(),
  refunded: z.number().optional(),
  processing_fees: z.array(z.lazy(() => ProcessingFees$inboundSchema))
    .optional(),
  source: PosPaymentSource$inboundSchema.optional(),
  status: PosPaymentStatusStatus$inboundSchema.optional(),
  cash: z.lazy(() => CashDetails$inboundSchema).optional(),
  card_details: z.lazy(() => CardDetails$inboundSchema).optional(),
  bank_account: PosBankAccount$inboundSchema.optional(),
  wallet: z.lazy(() => WalletDetails$inboundSchema).optional(),
  external_details: z.lazy(() => ExternalDetails$inboundSchema).optional(),
  service_charges: z.array(ServiceCharge$inboundSchema).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_id": "sourceId",
    "order_id": "orderId",
    "merchant_id": "merchantId",
    "customer_id": "customerId",
    "employee_id": "employeeId",
    "location_id": "locationId",
    "device_id": "deviceId",
    "tender_id": "tenderId",
    "external_payment_id": "externalPaymentId",
    "idempotency_key": "idempotencyKey",
    "app_fee": "appFee",
    "change_back_cash_amount": "changeBackCashAmount",
    "processing_fees": "processingFees",
    "card_details": "cardDetails",
    "bank_account": "bankAccount",
    "external_details": "externalDetails",
    "service_charges": "serviceCharges",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PosPayment$Outbound = {
  id?: string | undefined;
  source_id: string;
  order_id: string;
  merchant_id?: string | undefined;
  customer_id: string;
  employee_id?: string | undefined;
  location_id?: string | undefined;
  device_id?: string | undefined;
  tender_id: string;
  external_payment_id?: string | undefined;
  idempotency_key?: string | undefined;
  amount: number;
  currency: string | null;
  tip?: number | undefined;
  tax?: number | undefined;
  total?: number | undefined;
  app_fee?: number | undefined;
  change_back_cash_amount?: number | undefined;
  approved?: number | undefined;
  refunded?: number | undefined;
  processing_fees?: Array<ProcessingFees$Outbound> | undefined;
  source?: string | undefined;
  status?: string | undefined;
  cash?: CashDetails$Outbound | undefined;
  card_details?: CardDetails$Outbound | undefined;
  bank_account?: PosBankAccount$Outbound | undefined;
  wallet?: WalletDetails$Outbound | undefined;
  external_details?: ExternalDetails$Outbound | undefined;
  service_charges?: Array<ServiceCharge$Outbound> | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const PosPayment$outboundSchema: z.ZodType<
  PosPayment$Outbound,
  z.ZodTypeDef,
  PosPayment
> = z.object({
  id: z.string().optional(),
  sourceId: z.string(),
  orderId: z.string(),
  merchantId: z.string().optional(),
  customerId: z.string(),
  employeeId: z.string().optional(),
  locationId: z.string().optional(),
  deviceId: z.string().optional(),
  tenderId: z.string(),
  externalPaymentId: z.string().optional(),
  idempotencyKey: z.string().optional(),
  amount: z.number(),
  currency: z.nullable(Currency$outboundSchema),
  tip: z.number().optional(),
  tax: z.number().optional(),
  total: z.number().optional(),
  appFee: z.number().optional(),
  changeBackCashAmount: z.number().optional(),
  approved: z.number().optional(),
  refunded: z.number().optional(),
  processingFees: z.array(z.lazy(() => ProcessingFees$outboundSchema))
    .optional(),
  source: PosPaymentSource$outboundSchema.optional(),
  status: PosPaymentStatusStatus$outboundSchema.optional(),
  cash: z.lazy(() => CashDetails$outboundSchema).optional(),
  cardDetails: z.lazy(() => CardDetails$outboundSchema).optional(),
  bankAccount: PosBankAccount$outboundSchema.optional(),
  wallet: z.lazy(() => WalletDetails$outboundSchema).optional(),
  externalDetails: z.lazy(() => ExternalDetails$outboundSchema).optional(),
  serviceCharges: z.array(ServiceCharge$outboundSchema).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceId: "source_id",
    orderId: "order_id",
    merchantId: "merchant_id",
    customerId: "customer_id",
    employeeId: "employee_id",
    locationId: "location_id",
    deviceId: "device_id",
    tenderId: "tender_id",
    externalPaymentId: "external_payment_id",
    idempotencyKey: "idempotency_key",
    appFee: "app_fee",
    changeBackCashAmount: "change_back_cash_amount",
    processingFees: "processing_fees",
    cardDetails: "card_details",
    bankAccount: "bank_account",
    externalDetails: "external_details",
    serviceCharges: "service_charges",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPayment$ {
  /** @deprecated use `PosPayment$inboundSchema` instead. */
  export const inboundSchema = PosPayment$inboundSchema;
  /** @deprecated use `PosPayment$outboundSchema` instead. */
  export const outboundSchema = PosPayment$outboundSchema;
  /** @deprecated use `PosPayment$Outbound` instead. */
  export type Outbound = PosPayment$Outbound;
}

/** @internal */
export const PosPaymentCardDetails$inboundSchema: z.ZodType<
  PosPaymentCardDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  card: z.nullable(PaymentCardInput$inboundSchema).optional(),
});

/** @internal */
export type PosPaymentCardDetails$Outbound = {
  card?: PaymentCardInput$Outbound | null | undefined;
};

/** @internal */
export const PosPaymentCardDetails$outboundSchema: z.ZodType<
  PosPaymentCardDetails$Outbound,
  z.ZodTypeDef,
  PosPaymentCardDetails
> = z.object({
  card: z.nullable(PaymentCardInput$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentCardDetails$ {
  /** @deprecated use `PosPaymentCardDetails$inboundSchema` instead. */
  export const inboundSchema = PosPaymentCardDetails$inboundSchema;
  /** @deprecated use `PosPaymentCardDetails$outboundSchema` instead. */
  export const outboundSchema = PosPaymentCardDetails$outboundSchema;
  /** @deprecated use `PosPaymentCardDetails$Outbound` instead. */
  export type Outbound = PosPaymentCardDetails$Outbound;
}

/** @internal */
export const PosPaymentInput$inboundSchema: z.ZodType<
  PosPaymentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  source_id: z.string(),
  order_id: z.string(),
  merchant_id: z.string().optional(),
  customer_id: z.string(),
  employee_id: z.string().optional(),
  location_id: z.string().optional(),
  device_id: z.string().optional(),
  tender_id: z.string(),
  external_payment_id: z.string().optional(),
  idempotency_key: z.string().optional(),
  amount: z.number(),
  currency: z.nullable(Currency$inboundSchema),
  tip: z.number().optional(),
  tax: z.number().optional(),
  total: z.number().optional(),
  app_fee: z.number().optional(),
  change_back_cash_amount: z.number().optional(),
  approved: z.number().optional(),
  refunded: z.number().optional(),
  processing_fees: z.array(z.lazy(() => ProcessingFees$inboundSchema))
    .optional(),
  source: PosPaymentSource$inboundSchema.optional(),
  status: PosPaymentStatusStatus$inboundSchema.optional(),
  cash: z.lazy(() => CashDetails$inboundSchema).optional(),
  card_details: z.lazy(() => PosPaymentCardDetails$inboundSchema).optional(),
  bank_account: PosBankAccount$inboundSchema.optional(),
  wallet: z.lazy(() => WalletDetails$inboundSchema).optional(),
  external_details: z.lazy(() => ExternalDetails$inboundSchema).optional(),
  service_charges: z.array(ServiceChargeInput$inboundSchema).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "source_id": "sourceId",
    "order_id": "orderId",
    "merchant_id": "merchantId",
    "customer_id": "customerId",
    "employee_id": "employeeId",
    "location_id": "locationId",
    "device_id": "deviceId",
    "tender_id": "tenderId",
    "external_payment_id": "externalPaymentId",
    "idempotency_key": "idempotencyKey",
    "app_fee": "appFee",
    "change_back_cash_amount": "changeBackCashAmount",
    "processing_fees": "processingFees",
    "card_details": "cardDetails",
    "bank_account": "bankAccount",
    "external_details": "externalDetails",
    "service_charges": "serviceCharges",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type PosPaymentInput$Outbound = {
  source_id: string;
  order_id: string;
  merchant_id?: string | undefined;
  customer_id: string;
  employee_id?: string | undefined;
  location_id?: string | undefined;
  device_id?: string | undefined;
  tender_id: string;
  external_payment_id?: string | undefined;
  idempotency_key?: string | undefined;
  amount: number;
  currency: string | null;
  tip?: number | undefined;
  tax?: number | undefined;
  total?: number | undefined;
  app_fee?: number | undefined;
  change_back_cash_amount?: number | undefined;
  approved?: number | undefined;
  refunded?: number | undefined;
  processing_fees?: Array<ProcessingFees$Outbound> | undefined;
  source?: string | undefined;
  status?: string | undefined;
  cash?: CashDetails$Outbound | undefined;
  card_details?: PosPaymentCardDetails$Outbound | undefined;
  bank_account?: PosBankAccount$Outbound | undefined;
  wallet?: WalletDetails$Outbound | undefined;
  external_details?: ExternalDetails$Outbound | undefined;
  service_charges?: Array<ServiceChargeInput$Outbound> | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const PosPaymentInput$outboundSchema: z.ZodType<
  PosPaymentInput$Outbound,
  z.ZodTypeDef,
  PosPaymentInput
> = z.object({
  sourceId: z.string(),
  orderId: z.string(),
  merchantId: z.string().optional(),
  customerId: z.string(),
  employeeId: z.string().optional(),
  locationId: z.string().optional(),
  deviceId: z.string().optional(),
  tenderId: z.string(),
  externalPaymentId: z.string().optional(),
  idempotencyKey: z.string().optional(),
  amount: z.number(),
  currency: z.nullable(Currency$outboundSchema),
  tip: z.number().optional(),
  tax: z.number().optional(),
  total: z.number().optional(),
  appFee: z.number().optional(),
  changeBackCashAmount: z.number().optional(),
  approved: z.number().optional(),
  refunded: z.number().optional(),
  processingFees: z.array(z.lazy(() => ProcessingFees$outboundSchema))
    .optional(),
  source: PosPaymentSource$outboundSchema.optional(),
  status: PosPaymentStatusStatus$outboundSchema.optional(),
  cash: z.lazy(() => CashDetails$outboundSchema).optional(),
  cardDetails: z.lazy(() => PosPaymentCardDetails$outboundSchema).optional(),
  bankAccount: PosBankAccount$outboundSchema.optional(),
  wallet: z.lazy(() => WalletDetails$outboundSchema).optional(),
  externalDetails: z.lazy(() => ExternalDetails$outboundSchema).optional(),
  serviceCharges: z.array(ServiceChargeInput$outboundSchema).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    sourceId: "source_id",
    orderId: "order_id",
    merchantId: "merchant_id",
    customerId: "customer_id",
    employeeId: "employee_id",
    locationId: "location_id",
    deviceId: "device_id",
    tenderId: "tender_id",
    externalPaymentId: "external_payment_id",
    idempotencyKey: "idempotency_key",
    appFee: "app_fee",
    changeBackCashAmount: "change_back_cash_amount",
    processingFees: "processing_fees",
    cardDetails: "card_details",
    bankAccount: "bank_account",
    externalDetails: "external_details",
    serviceCharges: "service_charges",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentInput$ {
  /** @deprecated use `PosPaymentInput$inboundSchema` instead. */
  export const inboundSchema = PosPaymentInput$inboundSchema;
  /** @deprecated use `PosPaymentInput$outboundSchema` instead. */
  export const outboundSchema = PosPaymentInput$outboundSchema;
  /** @deprecated use `PosPaymentInput$Outbound` instead. */
  export type Outbound = PosPaymentInput$Outbound;
}
