/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FormFieldOptionGroup,
  FormFieldOptionGroup$inboundSchema,
  FormFieldOptionGroup$Outbound,
  FormFieldOptionGroup$outboundSchema,
} from "./formfieldoptiongroup.js";
import {
  SimpleFormFieldOption,
  SimpleFormFieldOption$inboundSchema,
  SimpleFormFieldOption$Outbound,
  SimpleFormFieldOption$outboundSchema,
} from "./simpleformfieldoption.js";

export type FormFieldOption =
  | (FormFieldOptionGroup & { optionType: "group" })
  | (SimpleFormFieldOption & { optionType: "simple" });

/** @internal */
export const FormFieldOption$inboundSchema: z.ZodType<
  FormFieldOption,
  z.ZodTypeDef,
  unknown
> = z.union([
  FormFieldOptionGroup$inboundSchema.and(
    z.object({ option_type: z.literal("group") }).transform((v) => ({
      optionType: v.option_type,
    })),
  ),
  SimpleFormFieldOption$inboundSchema.and(
    z.object({ option_type: z.literal("simple") }).transform((v) => ({
      optionType: v.option_type,
    })),
  ),
]);

/** @internal */
export type FormFieldOption$Outbound =
  | (FormFieldOptionGroup$Outbound & { option_type: "group" })
  | (SimpleFormFieldOption$Outbound & { option_type: "simple" });

/** @internal */
export const FormFieldOption$outboundSchema: z.ZodType<
  FormFieldOption$Outbound,
  z.ZodTypeDef,
  FormFieldOption
> = z.union([
  FormFieldOptionGroup$outboundSchema.and(
    z.object({ optionType: z.literal("group") }).transform((v) => ({
      option_type: v.optionType,
    })),
  ),
  SimpleFormFieldOption$outboundSchema.and(
    z.object({ optionType: z.literal("simple") }).transform((v) => ({
      option_type: v.optionType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldOption$ {
  /** @deprecated use `FormFieldOption$inboundSchema` instead. */
  export const inboundSchema = FormFieldOption$inboundSchema;
  /** @deprecated use `FormFieldOption$outboundSchema` instead. */
  export const outboundSchema = FormFieldOption$outboundSchema;
  /** @deprecated use `FormFieldOption$Outbound` instead. */
  export type Outbound = FormFieldOption$Outbound;
}

export function formFieldOptionToJSON(
  formFieldOption: FormFieldOption,
): string {
  return JSON.stringify(FormFieldOption$outboundSchema.parse(formFieldOption));
}

export function formFieldOptionFromJSON(
  jsonString: string,
): SafeParseResult<FormFieldOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormFieldOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormFieldOption' from JSON`,
  );
}
