/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  ProfitAndLossIndicator,
  ProfitAndLossIndicator$inboundSchema,
  ProfitAndLossIndicator$Outbound,
  ProfitAndLossIndicator$outboundSchema,
} from "./profitandlossindicator.js";
import {
  ProfitAndLossType,
  ProfitAndLossType$inboundSchema,
  ProfitAndLossType$outboundSchema,
} from "./profitandlosstype.js";

/**
 * The operating income accounts
 */
export type Income = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total: number | null;
  records?: any | undefined;
};

/**
 * The cost of goods sold accounts
 */
export type CostOfGoodsSold = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total?: number | null | undefined;
  records?: any | undefined;
};

/**
 * The operating expenses accounts
 */
export type Expenses = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total: number | null;
  records?: any | undefined;
};

/**
 * The other income accounts
 */
export type OtherIncome = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total?: number | null | undefined;
  records?: any | undefined;
};

/**
 * The other expenses accounts
 */
export type OtherExpenses = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total?: number | null | undefined;
  records?: any | undefined;
};

/**
 * The accounts not categorized in the other sections
 */
export type UncategorizedAccounts = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The account code of the account
   */
  code?: string | undefined;
  /**
   * The name of the account.
   */
  title?: string | undefined;
  /**
   * The type of profit and loss
   */
  type?: ProfitAndLossType | null | undefined;
  /**
   * The aggregated total of all accounts within this category.
   */
  total: number | null;
  records?: any | undefined;
};

export type ProfitAndLoss = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The name of the report
   */
  reportName: string;
  /**
   * The start date of the report
   */
  startDate?: string | undefined;
  /**
   * The end date of the report
   */
  endDate?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * The operating income accounts
   */
  income: Income;
  /**
   * The cost of goods sold accounts
   */
  costOfGoodsSold?: CostOfGoodsSold | undefined;
  /**
   * The operating expenses accounts
   */
  expenses: Expenses;
  /**
   * The other income accounts
   */
  otherIncome?: OtherIncome | undefined;
  /**
   * The other expenses accounts
   */
  otherExpenses?: OtherExpenses | undefined;
  /**
   * The accounts not categorized in the other sections
   */
  uncategorizedAccounts?: UncategorizedAccounts | undefined;
  grossProfit?: ProfitAndLossIndicator | undefined;
  netOperatingIncome?: ProfitAndLossIndicator | undefined;
  netIncome?: ProfitAndLossIndicator | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: { [k: string]: any } | null | undefined;
  /**
   * The customer id
   */
  customer?: string | undefined;
};

/** @internal */
export const Income$inboundSchema: z.ZodType<Income, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    code: z.string().optional(),
    title: z.string().optional(),
    type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
    total: z.nullable(z.number()),
    records: z.any().optional(),
  });

/** @internal */
export type Income$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total: number | null;
  records?: any | undefined;
};

/** @internal */
export const Income$outboundSchema: z.ZodType<
  Income$Outbound,
  z.ZodTypeDef,
  Income
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Income$ {
  /** @deprecated use `Income$inboundSchema` instead. */
  export const inboundSchema = Income$inboundSchema;
  /** @deprecated use `Income$outboundSchema` instead. */
  export const outboundSchema = Income$outboundSchema;
  /** @deprecated use `Income$Outbound` instead. */
  export type Outbound = Income$Outbound;
}

export function incomeToJSON(income: Income): string {
  return JSON.stringify(Income$outboundSchema.parse(income));
}

export function incomeFromJSON(
  jsonString: string,
): SafeParseResult<Income, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Income$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Income' from JSON`,
  );
}

/** @internal */
export const CostOfGoodsSold$inboundSchema: z.ZodType<
  CostOfGoodsSold,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/** @internal */
export type CostOfGoodsSold$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total?: number | null | undefined;
  records?: any | undefined;
};

/** @internal */
export const CostOfGoodsSold$outboundSchema: z.ZodType<
  CostOfGoodsSold$Outbound,
  z.ZodTypeDef,
  CostOfGoodsSold
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostOfGoodsSold$ {
  /** @deprecated use `CostOfGoodsSold$inboundSchema` instead. */
  export const inboundSchema = CostOfGoodsSold$inboundSchema;
  /** @deprecated use `CostOfGoodsSold$outboundSchema` instead. */
  export const outboundSchema = CostOfGoodsSold$outboundSchema;
  /** @deprecated use `CostOfGoodsSold$Outbound` instead. */
  export type Outbound = CostOfGoodsSold$Outbound;
}

export function costOfGoodsSoldToJSON(
  costOfGoodsSold: CostOfGoodsSold,
): string {
  return JSON.stringify(CostOfGoodsSold$outboundSchema.parse(costOfGoodsSold));
}

export function costOfGoodsSoldFromJSON(
  jsonString: string,
): SafeParseResult<CostOfGoodsSold, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostOfGoodsSold$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostOfGoodsSold' from JSON`,
  );
}

/** @internal */
export const Expenses$inboundSchema: z.ZodType<
  Expenses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
  total: z.nullable(z.number()),
  records: z.any().optional(),
});

/** @internal */
export type Expenses$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total: number | null;
  records?: any | undefined;
};

/** @internal */
export const Expenses$outboundSchema: z.ZodType<
  Expenses$Outbound,
  z.ZodTypeDef,
  Expenses
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Expenses$ {
  /** @deprecated use `Expenses$inboundSchema` instead. */
  export const inboundSchema = Expenses$inboundSchema;
  /** @deprecated use `Expenses$outboundSchema` instead. */
  export const outboundSchema = Expenses$outboundSchema;
  /** @deprecated use `Expenses$Outbound` instead. */
  export type Outbound = Expenses$Outbound;
}

export function expensesToJSON(expenses: Expenses): string {
  return JSON.stringify(Expenses$outboundSchema.parse(expenses));
}

export function expensesFromJSON(
  jsonString: string,
): SafeParseResult<Expenses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Expenses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Expenses' from JSON`,
  );
}

/** @internal */
export const OtherIncome$inboundSchema: z.ZodType<
  OtherIncome,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/** @internal */
export type OtherIncome$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total?: number | null | undefined;
  records?: any | undefined;
};

/** @internal */
export const OtherIncome$outboundSchema: z.ZodType<
  OtherIncome$Outbound,
  z.ZodTypeDef,
  OtherIncome
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OtherIncome$ {
  /** @deprecated use `OtherIncome$inboundSchema` instead. */
  export const inboundSchema = OtherIncome$inboundSchema;
  /** @deprecated use `OtherIncome$outboundSchema` instead. */
  export const outboundSchema = OtherIncome$outboundSchema;
  /** @deprecated use `OtherIncome$Outbound` instead. */
  export type Outbound = OtherIncome$Outbound;
}

export function otherIncomeToJSON(otherIncome: OtherIncome): string {
  return JSON.stringify(OtherIncome$outboundSchema.parse(otherIncome));
}

export function otherIncomeFromJSON(
  jsonString: string,
): SafeParseResult<OtherIncome, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OtherIncome$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OtherIncome' from JSON`,
  );
}

/** @internal */
export const OtherExpenses$inboundSchema: z.ZodType<
  OtherExpenses,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/** @internal */
export type OtherExpenses$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total?: number | null | undefined;
  records?: any | undefined;
};

/** @internal */
export const OtherExpenses$outboundSchema: z.ZodType<
  OtherExpenses$Outbound,
  z.ZodTypeDef,
  OtherExpenses
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()).optional(),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OtherExpenses$ {
  /** @deprecated use `OtherExpenses$inboundSchema` instead. */
  export const inboundSchema = OtherExpenses$inboundSchema;
  /** @deprecated use `OtherExpenses$outboundSchema` instead. */
  export const outboundSchema = OtherExpenses$outboundSchema;
  /** @deprecated use `OtherExpenses$Outbound` instead. */
  export type Outbound = OtherExpenses$Outbound;
}

export function otherExpensesToJSON(otherExpenses: OtherExpenses): string {
  return JSON.stringify(OtherExpenses$outboundSchema.parse(otherExpenses));
}

export function otherExpensesFromJSON(
  jsonString: string,
): SafeParseResult<OtherExpenses, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OtherExpenses$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OtherExpenses' from JSON`,
  );
}

/** @internal */
export const UncategorizedAccounts$inboundSchema: z.ZodType<
  UncategorizedAccounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$inboundSchema).optional(),
  total: z.nullable(z.number()),
  records: z.any().optional(),
});

/** @internal */
export type UncategorizedAccounts$Outbound = {
  id?: string | undefined;
  code?: string | undefined;
  title?: string | undefined;
  type?: string | null | undefined;
  total: number | null;
  records?: any | undefined;
};

/** @internal */
export const UncategorizedAccounts$outboundSchema: z.ZodType<
  UncategorizedAccounts$Outbound,
  z.ZodTypeDef,
  UncategorizedAccounts
> = z.object({
  id: z.string().optional(),
  code: z.string().optional(),
  title: z.string().optional(),
  type: z.nullable(ProfitAndLossType$outboundSchema).optional(),
  total: z.nullable(z.number()),
  records: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UncategorizedAccounts$ {
  /** @deprecated use `UncategorizedAccounts$inboundSchema` instead. */
  export const inboundSchema = UncategorizedAccounts$inboundSchema;
  /** @deprecated use `UncategorizedAccounts$outboundSchema` instead. */
  export const outboundSchema = UncategorizedAccounts$outboundSchema;
  /** @deprecated use `UncategorizedAccounts$Outbound` instead. */
  export type Outbound = UncategorizedAccounts$Outbound;
}

export function uncategorizedAccountsToJSON(
  uncategorizedAccounts: UncategorizedAccounts,
): string {
  return JSON.stringify(
    UncategorizedAccounts$outboundSchema.parse(uncategorizedAccounts),
  );
}

export function uncategorizedAccountsFromJSON(
  jsonString: string,
): SafeParseResult<UncategorizedAccounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UncategorizedAccounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UncategorizedAccounts' from JSON`,
  );
}

/** @internal */
export const ProfitAndLoss$inboundSchema: z.ZodType<
  ProfitAndLoss,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  report_name: z.string(),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  income: z.lazy(() => Income$inboundSchema),
  cost_of_goods_sold: z.lazy(() => CostOfGoodsSold$inboundSchema).optional(),
  expenses: z.lazy(() => Expenses$inboundSchema),
  other_income: z.lazy(() => OtherIncome$inboundSchema).optional(),
  other_expenses: z.lazy(() => OtherExpenses$inboundSchema).optional(),
  uncategorized_accounts: z.lazy(() => UncategorizedAccounts$inboundSchema)
    .optional(),
  gross_profit: ProfitAndLossIndicator$inboundSchema.optional(),
  net_operating_income: ProfitAndLossIndicator$inboundSchema.optional(),
  net_income: ProfitAndLossIndicator$inboundSchema.optional(),
  custom_mappings: z.nullable(z.record(z.any())).optional(),
  customer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "report_name": "reportName",
    "start_date": "startDate",
    "end_date": "endDate",
    "cost_of_goods_sold": "costOfGoodsSold",
    "other_income": "otherIncome",
    "other_expenses": "otherExpenses",
    "uncategorized_accounts": "uncategorizedAccounts",
    "gross_profit": "grossProfit",
    "net_operating_income": "netOperatingIncome",
    "net_income": "netIncome",
    "custom_mappings": "customMappings",
  });
});

/** @internal */
export type ProfitAndLoss$Outbound = {
  id?: string | undefined;
  report_name: string;
  start_date?: string | undefined;
  end_date?: string | undefined;
  currency?: string | null | undefined;
  income: Income$Outbound;
  cost_of_goods_sold?: CostOfGoodsSold$Outbound | undefined;
  expenses: Expenses$Outbound;
  other_income?: OtherIncome$Outbound | undefined;
  other_expenses?: OtherExpenses$Outbound | undefined;
  uncategorized_accounts?: UncategorizedAccounts$Outbound | undefined;
  gross_profit?: ProfitAndLossIndicator$Outbound | undefined;
  net_operating_income?: ProfitAndLossIndicator$Outbound | undefined;
  net_income?: ProfitAndLossIndicator$Outbound | undefined;
  custom_mappings?: { [k: string]: any } | null | undefined;
  customer?: string | undefined;
};

/** @internal */
export const ProfitAndLoss$outboundSchema: z.ZodType<
  ProfitAndLoss$Outbound,
  z.ZodTypeDef,
  ProfitAndLoss
> = z.object({
  id: z.string().optional(),
  reportName: z.string(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  income: z.lazy(() => Income$outboundSchema),
  costOfGoodsSold: z.lazy(() => CostOfGoodsSold$outboundSchema).optional(),
  expenses: z.lazy(() => Expenses$outboundSchema),
  otherIncome: z.lazy(() => OtherIncome$outboundSchema).optional(),
  otherExpenses: z.lazy(() => OtherExpenses$outboundSchema).optional(),
  uncategorizedAccounts: z.lazy(() => UncategorizedAccounts$outboundSchema)
    .optional(),
  grossProfit: ProfitAndLossIndicator$outboundSchema.optional(),
  netOperatingIncome: ProfitAndLossIndicator$outboundSchema.optional(),
  netIncome: ProfitAndLossIndicator$outboundSchema.optional(),
  customMappings: z.nullable(z.record(z.any())).optional(),
  customer: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    reportName: "report_name",
    startDate: "start_date",
    endDate: "end_date",
    costOfGoodsSold: "cost_of_goods_sold",
    otherIncome: "other_income",
    otherExpenses: "other_expenses",
    uncategorizedAccounts: "uncategorized_accounts",
    grossProfit: "gross_profit",
    netOperatingIncome: "net_operating_income",
    netIncome: "net_income",
    customMappings: "custom_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfitAndLoss$ {
  /** @deprecated use `ProfitAndLoss$inboundSchema` instead. */
  export const inboundSchema = ProfitAndLoss$inboundSchema;
  /** @deprecated use `ProfitAndLoss$outboundSchema` instead. */
  export const outboundSchema = ProfitAndLoss$outboundSchema;
  /** @deprecated use `ProfitAndLoss$Outbound` instead. */
  export type Outbound = ProfitAndLoss$Outbound;
}

export function profitAndLossToJSON(profitAndLoss: ProfitAndLoss): string {
  return JSON.stringify(ProfitAndLoss$outboundSchema.parse(profitAndLoss));
}

export function profitAndLossFromJSON(
  jsonString: string,
): SafeParseResult<ProfitAndLoss, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfitAndLoss$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfitAndLoss' from JSON`,
  );
}
