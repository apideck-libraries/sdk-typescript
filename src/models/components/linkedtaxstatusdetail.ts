/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedTaxStatusDetail = {
  /**
   * The country of the tax status.
   */
  country?: string | undefined;
  /**
   * The transaction tax status.
   */
  transactionTaxStatus?: string | null | undefined;
};

/** @internal */
export const LinkedTaxStatusDetail$inboundSchema: z.ZodType<
  LinkedTaxStatusDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string().optional(),
  transaction_tax_status: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_tax_status": "transactionTaxStatus",
  });
});

/** @internal */
export type LinkedTaxStatusDetail$Outbound = {
  country?: string | undefined;
  transaction_tax_status?: string | null | undefined;
};

/** @internal */
export const LinkedTaxStatusDetail$outboundSchema: z.ZodType<
  LinkedTaxStatusDetail$Outbound,
  z.ZodTypeDef,
  LinkedTaxStatusDetail
> = z.object({
  country: z.string().optional(),
  transactionTaxStatus: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionTaxStatus: "transaction_tax_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedTaxStatusDetail$ {
  /** @deprecated use `LinkedTaxStatusDetail$inboundSchema` instead. */
  export const inboundSchema = LinkedTaxStatusDetail$inboundSchema;
  /** @deprecated use `LinkedTaxStatusDetail$outboundSchema` instead. */
  export const outboundSchema = LinkedTaxStatusDetail$outboundSchema;
  /** @deprecated use `LinkedTaxStatusDetail$Outbound` instead. */
  export type Outbound = LinkedTaxStatusDetail$Outbound;
}

export function linkedTaxStatusDetailToJSON(
  linkedTaxStatusDetail: LinkedTaxStatusDetail,
): string {
  return JSON.stringify(
    LinkedTaxStatusDetail$outboundSchema.parse(linkedTaxStatusDetail),
  );
}

export function linkedTaxStatusDetailFromJSON(
  jsonString: string,
): SafeParseResult<LinkedTaxStatusDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedTaxStatusDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedTaxStatusDetail' from JSON`,
  );
}
