/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  Email,
  Email$inboundSchema,
  Email$Outbound,
  Email$outboundSchema,
} from "./email.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";
import {
  PaymentCard,
  PaymentCard$inboundSchema,
  PaymentCard$Outbound,
  PaymentCard$outboundSchema,
  PaymentCardInput,
  PaymentCardInput$inboundSchema,
  PaymentCardInput$Outbound,
  PaymentCardInput$outboundSchema,
} from "./paymentcard.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";
import {
  ServiceCharge,
  ServiceCharge$inboundSchema,
  ServiceCharge$Outbound,
  ServiceCharge$outboundSchema,
  ServiceChargeInput,
  ServiceChargeInput$inboundSchema,
  ServiceChargeInput$Outbound,
  ServiceChargeInput$outboundSchema,
} from "./servicecharge.js";

/**
 * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
 */
export const OrderStatus = {
  Open: "open",
  Draft: "draft",
  Delivered: "delivered",
  Delayed: "delayed",
  Voided: "voided",
  Completed: "completed",
  Hidden: "hidden",
} as const;
/**
 * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
 */
export type OrderStatus = ClosedEnum<typeof OrderStatus>;

/**
 * Is this order paid or not?
 */
export const PosPaymentStatus = {
  Open: "open",
  Paid: "paid",
  Refunded: "refunded",
  Credited: "credited",
  PartiallyPaid: "partially_paid",
  PartiallyRefunded: "partially_refunded",
  Unknown: "unknown",
} as const;
/**
 * Is this order paid or not?
 */
export type PosPaymentStatus = ClosedEnum<typeof PosPaymentStatus>;

export type Customers = {
  id?: string | undefined;
  firstName?: string | null | undefined;
  middleName?: string | null | undefined;
  lastName?: string | null | undefined;
  phoneNumbers?: Array<PhoneNumber> | undefined;
  emails?: Array<Email> | undefined;
};

/**
 * The state of the fulfillment.
 */
export const OrderFulfillmentStatus = {
  Proposed: "proposed",
  Reserved: "reserved",
  Prepared: "prepared",
  Completed: "completed",
  Cancelled: "cancelled",
  Failed: "failed",
  Other: "other",
} as const;
/**
 * The state of the fulfillment.
 */
export type OrderFulfillmentStatus = ClosedEnum<typeof OrderFulfillmentStatus>;

export const OrderFulfillmentsType = {
  Pickup: "pickup",
  Shipment: "shipment",
} as const;
export type OrderFulfillmentsType = ClosedEnum<typeof OrderFulfillmentsType>;

/**
 * The schedule type of the pickup fulfillment.
 */
export const ScheduleType = {
  Scheduled: "scheduled",
} as const;
/**
 * The schedule type of the pickup fulfillment.
 */
export type ScheduleType = ClosedEnum<typeof ScheduleType>;

/**
 * Specific details for curbside pickup.
 */
export type CurbsidePickupDetails = {
  /**
   * Specific details for curbside pickup, such as parking number and vehicle model.
   */
  curbsideDetails?: string | undefined;
  /**
   * Indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  buyerArrivedAt?: Date | undefined;
};

export type Recipient = {
  customerId?: string | undefined;
  displayName?: string | undefined;
  address?: Address | undefined;
  phoneNumber?: PhoneNumber | undefined;
  email?: Email | undefined;
};

export type PickupDetails = {
  acceptedAt?: Date | null | undefined;
  /**
   * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
   */
  autoCompleteDuration?: string | null | undefined;
  /**
   * A description of why the pickup was canceled.
   */
  cancelReason?: string | null | undefined;
  /**
   * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
   * If `expires_at` is not set, this pickup fulfillment is automatically accepted when
   * placed.
   */
  expiresAt?: Date | undefined;
  /**
   * The schedule type of the pickup fulfillment.
   */
  scheduleType?: ScheduleType | undefined;
  /**
   * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
   *
   * @remarks
   * "2016-09-04T23:59:33.123Z".
   *
   * For fulfillments with the schedule type `ASAP`, this is automatically set
   * to the current time plus the expected duration to prepare the fulfillment.
   */
  pickupAt?: Date | undefined;
  /**
   * The window of time in which the order should be picked up after the `pickup_at` timestamp.
   *
   * @remarks
   * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
   * informational guideline for merchants.
   */
  pickupWindowDuration?: string | undefined;
  /**
   * The duration of time it takes to prepare this fulfillment.
   *
   * @remarks
   * The duration must be in RFC 3339 format (for example, "P1W3D").
   */
  prepTimeDuration?: string | undefined;
  /**
   * A note meant to provide additional instructions about the pickup
   *
   * @remarks
   * fulfillment displayed in the Square Point of Sale application and set by the API.
   */
  note?: string | undefined;
  /**
   * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  placedAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  rejectedAt?: Date | undefined;
  /**
   * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  readyAt?: Date | undefined;
  /**
   * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  expiredAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  pickedUpAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  canceledAt?: Date | undefined;
  /**
   * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
   */
  isCurbsidePickup?: boolean | undefined;
  /**
   * Specific details for curbside pickup.
   */
  curbsidePickupDetails?: CurbsidePickupDetails | undefined;
  recipient?: Recipient | undefined;
};

export type ShipmentDetails = {};

export type Fulfillments = {
  id?: string | undefined;
  /**
   * The state of the fulfillment.
   */
  status?: OrderFulfillmentStatus | undefined;
  type?: OrderFulfillmentsType | undefined;
  pickupDetails?: PickupDetails | undefined;
  shipmentDetails?: ShipmentDetails | undefined;
};

export type OrderItem = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
};

export type AppliedTaxes = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  taxId?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export type AppliedDiscounts = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  discountId?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export type OrderModifiers = {
  id?: string | undefined;
  name?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  alternateName?: string | undefined;
  modifierGroupId?: string | undefined;
};

export type LineItems = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  name?: string | undefined;
  item?: OrderItem | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalAmount?: number | null | undefined;
  quantity?: number | null | undefined;
  unitPrice?: number | null | undefined;
  appliedTaxes?: Array<AppliedTaxes> | undefined;
  appliedDiscounts?: Array<AppliedDiscounts> | undefined;
  /**
   * Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts
   */
  modifiers?: Array<OrderModifiers> | undefined;
};

export type Payments = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export const OrderRefundsStatus = {
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
  Failed: "failed",
} as const;
export type OrderRefundsStatus = ClosedEnum<typeof OrderRefundsStatus>;

export type Refunds = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  locationId?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  reason?: string | undefined;
  status?: OrderRefundsStatus | undefined;
  /**
   * A unique identifier for an object.
   */
  tenderId?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  transactionId?: string | undefined;
};

export const OrderScope = {
  Order: "order",
  LineItem: "line_item",
} as const;
export type OrderScope = ClosedEnum<typeof OrderScope>;

export const OrderTaxesType = {
  Unknown: "unknown",
  Additive: "additive",
  Inclusive: "inclusive",
} as const;
export type OrderTaxesType = ClosedEnum<typeof OrderTaxesType>;

export type Taxes = {
  id?: string | undefined;
  /**
   * The tax's name.
   */
  name?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  percentage?: number | undefined;
  scope?: OrderScope | undefined;
  type?: OrderTaxesType | undefined;
  /**
   * Square-only: Determines whether the tax was automatically applied to the order based on the catalog configuration. For an example, see Automatically Apply Taxes to an Order. [https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes]()
   */
  autoApplied?: boolean | undefined;
};

export const OrderDiscountsType = {
  Percentage: "percentage",
  FlatFee: "flat_fee",
} as const;
export type OrderDiscountsType = ClosedEnum<typeof OrderDiscountsType>;

export const OrderDiscountsScope = {
  Order: "order",
  LineItem: "line_item",
} as const;
export type OrderDiscountsScope = ClosedEnum<typeof OrderDiscountsScope>;

export type Discounts = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  productId?: string | undefined;
  name?: string | undefined;
  type: OrderDiscountsType;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  scope?: OrderDiscountsScope | undefined;
};

export const OrderTendersType = {
  Cash: "cash",
  Card: "card",
  Other: "other",
} as const;
export type OrderTendersType = ClosedEnum<typeof OrderTendersType>;

/**
 * The status of the card. Only applicable when the tender type is card.
 */
export const CardStatus = {
  Authorized: "authorized",
  Captured: "captured",
  Failed: "failed",
  Voided: "voided",
} as const;
/**
 * The status of the card. Only applicable when the tender type is card.
 */
export type CardStatus = ClosedEnum<typeof CardStatus>;

/**
 * The entry method of the card. Only applicable when the tender type is card.
 */
export const CardEntryMethod = {
  Evm: "evm",
  Swiped: "swiped",
  Keyed: "keyed",
  OnFile: "on-file",
  Contactless: "contactless",
} as const;
/**
 * The entry method of the card. Only applicable when the tender type is card.
 */
export type CardEntryMethod = ClosedEnum<typeof CardEntryMethod>;

export type Tenders = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  name?: string | undefined;
  type?: OrderTendersType | undefined;
  note?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  totalAmount?: number | null | undefined;
  totalTip?: number | null | undefined;
  totalProcessingFee?: number | null | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalRefund?: number | null | undefined;
  totalServiceCharge?: number | null | undefined;
  /**
   * The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
   */
  buyerTenderedCashAmount?: number | null | undefined;
  /**
   * The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
   */
  changeBackCashAmount?: number | null | undefined;
  /**
   * A card's non-confidential details.
   */
  card?: PaymentCard | null | undefined;
  /**
   * The status of the card. Only applicable when the tender type is card.
   */
  cardStatus?: CardStatus | null | undefined;
  /**
   * The entry method of the card. Only applicable when the tender type is card.
   */
  cardEntryMethod?: CardEntryMethod | null | undefined;
  /**
   * A unique identifier for an object.
   */
  paymentId?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  locationId?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  transactionId?: string | undefined;
};

/**
 * Source of order. Indicates the way that the order was placed.
 */
export const Source = {
  InStore: "in-store",
  Online: "online",
  Opt: "opt",
  Api: "api",
  Kiosk: "kiosk",
  CallerId: "caller-id",
  Google: "google",
  Invoice: "invoice",
} as const;
/**
 * Source of order. Indicates the way that the order was placed.
 */
export type Source = ClosedEnum<typeof Source>;

export type Order = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  orderNumber?: string | undefined;
  orderDate?: RFCDate | null | undefined;
  closedDate?: RFCDate | null | undefined;
  /**
   * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
   */
  referenceId?: string | null | undefined;
  /**
   * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
   */
  status?: OrderStatus | undefined;
  /**
   * Is this order paid or not?
   */
  paymentStatus?: PosPaymentStatus | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  title?: string | undefined;
  /**
   * A note with information about this order, may be printed on the order receipt and displayed in apps
   */
  note?: string | undefined;
  merchantId: string;
  customerId?: string | undefined;
  employeeId?: string | undefined;
  locationId: string;
  orderTypeId?: string | undefined;
  table?: string | undefined;
  seat?: string | undefined;
  totalAmount?: number | null | undefined;
  totalTip?: number | null | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalRefund?: number | null | undefined;
  totalServiceCharge?: number | null | undefined;
  refunded?: boolean | undefined;
  customers?: Array<Customers> | undefined;
  fulfillments?: Array<Fulfillments> | undefined;
  lineItems?: Array<LineItems> | undefined;
  payments?: Array<Payments> | undefined;
  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  serviceCharges?: Array<ServiceCharge> | undefined;
  refunds?: Array<Refunds> | undefined;
  taxes?: Array<Taxes> | undefined;
  discounts?: Array<Discounts> | undefined;
  tenders?: Array<Tenders> | undefined;
  /**
   * Source of order. Indicates the way that the order was placed.
   */
  source?: Source | null | undefined;
  voided?: boolean | undefined;
  voidedAt?: Date | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  version?: string | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type OrderPickupDetails = {
  /**
   * The duration of time after which an open and accepted pickup fulfillment is automatically moved to the COMPLETED state. The duration must be in RFC 3339 format (for example, 'P1W3D').
   */
  autoCompleteDuration?: string | null | undefined;
  /**
   * A description of why the pickup was canceled.
   */
  cancelReason?: string | null | undefined;
  /**
   * Indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
   * If `expires_at` is not set, this pickup fulfillment is automatically accepted when
   * placed.
   */
  expiresAt?: Date | undefined;
  /**
   * The schedule type of the pickup fulfillment.
   */
  scheduleType?: ScheduleType | undefined;
  /**
   * The timestamp that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
   *
   * @remarks
   * "2016-09-04T23:59:33.123Z".
   *
   * For fulfillments with the schedule type `ASAP`, this is automatically set
   * to the current time plus the expected duration to prepare the fulfillment.
   */
  pickupAt?: Date | undefined;
  /**
   * The window of time in which the order should be picked up after the `pickup_at` timestamp.
   *
   * @remarks
   * Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
   * informational guideline for merchants.
   */
  pickupWindowDuration?: string | undefined;
  /**
   * The duration of time it takes to prepare this fulfillment.
   *
   * @remarks
   * The duration must be in RFC 3339 format (for example, "P1W3D").
   */
  prepTimeDuration?: string | undefined;
  /**
   * A note meant to provide additional instructions about the pickup
   *
   * @remarks
   * fulfillment displayed in the Square Point of Sale application and set by the API.
   */
  note?: string | undefined;
  /**
   * Indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  placedAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  rejectedAt?: Date | undefined;
  /**
   * Indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  readyAt?: Date | undefined;
  /**
   * Indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  expiredAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  pickedUpAt?: Date | undefined;
  /**
   * Indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
   *
   * @remarks
   * (for example, "2016-09-04T23:59:33.123Z").
   */
  canceledAt?: Date | undefined;
  /**
   * If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
   */
  isCurbsidePickup?: boolean | undefined;
  /**
   * Specific details for curbside pickup.
   */
  curbsidePickupDetails?: CurbsidePickupDetails | undefined;
  recipient?: Recipient | undefined;
};

export type OrderFulfillments = {
  id?: string | undefined;
  /**
   * The state of the fulfillment.
   */
  status?: OrderFulfillmentStatus | undefined;
  type?: OrderFulfillmentsType | undefined;
  pickupDetails?: OrderPickupDetails | undefined;
  shipmentDetails?: ShipmentDetails | undefined;
};

export type OrderItemInput = {};

export type OrderAppliedTaxes = {
  taxId?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export type OrderAppliedDiscounts = {
  discountId?: string | undefined;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export type OrderLineItems = {
  name?: string | undefined;
  item?: OrderItemInput | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalAmount?: number | null | undefined;
  quantity?: number | null | undefined;
  unitPrice?: number | null | undefined;
  appliedTaxes?: Array<OrderAppliedTaxes> | undefined;
  appliedDiscounts?: Array<OrderAppliedDiscounts> | undefined;
  /**
   * Customizable options – toppings, add-ons, or special requests – create item modifiers. Modifiers that are applied to items will display on your customers’ digital receipts
   */
  modifiers?: Array<OrderModifiers> | undefined;
};

export type OrderPayments = {
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
};

export type OrderRefunds = {
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  reason?: string | undefined;
  status?: OrderRefundsStatus | undefined;
};

export type OrderDiscounts = {
  name?: string | undefined;
  type: OrderDiscountsType;
  amount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  scope?: OrderDiscountsScope | undefined;
};

export type OrderTenders = {
  name?: string | undefined;
  type?: OrderTendersType | undefined;
  note?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  totalAmount?: number | null | undefined;
  totalTip?: number | null | undefined;
  totalProcessingFee?: number | null | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalRefund?: number | null | undefined;
  totalServiceCharge?: number | null | undefined;
  /**
   * The amount (in cents) of cash tendered by the buyer. Only applicable when the tender type is cash.
   */
  buyerTenderedCashAmount?: number | null | undefined;
  /**
   * The amount (in cents) of cash returned to the buyer. Only applicable when the tender type is cash.
   */
  changeBackCashAmount?: number | null | undefined;
  /**
   * A card's non-confidential details.
   */
  card?: PaymentCardInput | null | undefined;
  /**
   * The status of the card. Only applicable when the tender type is card.
   */
  cardStatus?: CardStatus | null | undefined;
  /**
   * The entry method of the card. Only applicable when the tender type is card.
   */
  cardEntryMethod?: CardEntryMethod | null | undefined;
};

export type OrderInput = {
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  orderNumber?: string | undefined;
  orderDate?: RFCDate | null | undefined;
  closedDate?: RFCDate | null | undefined;
  /**
   * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
   */
  referenceId?: string | null | undefined;
  /**
   * Order status. Clover specific: If no value is set, the status defaults to hidden, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
   */
  status?: OrderStatus | undefined;
  /**
   * Is this order paid or not?
   */
  paymentStatus?: PosPaymentStatus | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  title?: string | undefined;
  /**
   * A note with information about this order, may be printed on the order receipt and displayed in apps
   */
  note?: string | undefined;
  merchantId: string;
  customerId?: string | undefined;
  employeeId?: string | undefined;
  locationId: string;
  orderTypeId?: string | undefined;
  table?: string | undefined;
  seat?: string | undefined;
  totalAmount?: number | null | undefined;
  totalTip?: number | null | undefined;
  totalTax?: number | null | undefined;
  totalDiscount?: number | null | undefined;
  totalRefund?: number | null | undefined;
  totalServiceCharge?: number | null | undefined;
  refunded?: boolean | undefined;
  customers?: Array<Customers> | undefined;
  fulfillments?: Array<OrderFulfillments> | undefined;
  lineItems?: Array<OrderLineItems> | undefined;
  payments?: Array<OrderPayments> | undefined;
  /**
   * Optional service charges or gratuity tip applied to the order.
   */
  serviceCharges?: Array<ServiceChargeInput> | undefined;
  refunds?: Array<OrderRefunds> | undefined;
  taxes?: Array<Taxes> | undefined;
  discounts?: Array<OrderDiscounts> | undefined;
  tenders?: Array<OrderTenders> | undefined;
  voided?: boolean | undefined;
  version?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const OrderStatus$inboundSchema: z.ZodNativeEnum<typeof OrderStatus> = z
  .nativeEnum(OrderStatus);

/** @internal */
export const OrderStatus$outboundSchema: z.ZodNativeEnum<typeof OrderStatus> =
  OrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderStatus$ {
  /** @deprecated use `OrderStatus$inboundSchema` instead. */
  export const inboundSchema = OrderStatus$inboundSchema;
  /** @deprecated use `OrderStatus$outboundSchema` instead. */
  export const outboundSchema = OrderStatus$outboundSchema;
}

/** @internal */
export const PosPaymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof PosPaymentStatus
> = z.nativeEnum(PosPaymentStatus);

/** @internal */
export const PosPaymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof PosPaymentStatus
> = PosPaymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosPaymentStatus$ {
  /** @deprecated use `PosPaymentStatus$inboundSchema` instead. */
  export const inboundSchema = PosPaymentStatus$inboundSchema;
  /** @deprecated use `PosPaymentStatus$outboundSchema` instead. */
  export const outboundSchema = PosPaymentStatus$outboundSchema;
}

/** @internal */
export const Customers$inboundSchema: z.ZodType<
  Customers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  first_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  phone_numbers: z.array(PhoneNumber$inboundSchema).optional(),
  emails: z.array(Email$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_name": "middleName",
    "last_name": "lastName",
    "phone_numbers": "phoneNumbers",
  });
});

/** @internal */
export type Customers$Outbound = {
  id?: string | undefined;
  first_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  last_name?: string | null | undefined;
  phone_numbers?: Array<PhoneNumber$Outbound> | undefined;
  emails?: Array<Email$Outbound> | undefined;
};

/** @internal */
export const Customers$outboundSchema: z.ZodType<
  Customers$Outbound,
  z.ZodTypeDef,
  Customers
> = z.object({
  id: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  phoneNumbers: z.array(PhoneNumber$outboundSchema).optional(),
  emails: z.array(Email$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    middleName: "middle_name",
    lastName: "last_name",
    phoneNumbers: "phone_numbers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customers$ {
  /** @deprecated use `Customers$inboundSchema` instead. */
  export const inboundSchema = Customers$inboundSchema;
  /** @deprecated use `Customers$outboundSchema` instead. */
  export const outboundSchema = Customers$outboundSchema;
  /** @deprecated use `Customers$Outbound` instead. */
  export type Outbound = Customers$Outbound;
}

/** @internal */
export const OrderFulfillmentStatus$inboundSchema: z.ZodNativeEnum<
  typeof OrderFulfillmentStatus
> = z.nativeEnum(OrderFulfillmentStatus);

/** @internal */
export const OrderFulfillmentStatus$outboundSchema: z.ZodNativeEnum<
  typeof OrderFulfillmentStatus
> = OrderFulfillmentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderFulfillmentStatus$ {
  /** @deprecated use `OrderFulfillmentStatus$inboundSchema` instead. */
  export const inboundSchema = OrderFulfillmentStatus$inboundSchema;
  /** @deprecated use `OrderFulfillmentStatus$outboundSchema` instead. */
  export const outboundSchema = OrderFulfillmentStatus$outboundSchema;
}

/** @internal */
export const OrderFulfillmentsType$inboundSchema: z.ZodNativeEnum<
  typeof OrderFulfillmentsType
> = z.nativeEnum(OrderFulfillmentsType);

/** @internal */
export const OrderFulfillmentsType$outboundSchema: z.ZodNativeEnum<
  typeof OrderFulfillmentsType
> = OrderFulfillmentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderFulfillmentsType$ {
  /** @deprecated use `OrderFulfillmentsType$inboundSchema` instead. */
  export const inboundSchema = OrderFulfillmentsType$inboundSchema;
  /** @deprecated use `OrderFulfillmentsType$outboundSchema` instead. */
  export const outboundSchema = OrderFulfillmentsType$outboundSchema;
}

/** @internal */
export const ScheduleType$inboundSchema: z.ZodNativeEnum<typeof ScheduleType> =
  z.nativeEnum(ScheduleType);

/** @internal */
export const ScheduleType$outboundSchema: z.ZodNativeEnum<typeof ScheduleType> =
  ScheduleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleType$ {
  /** @deprecated use `ScheduleType$inboundSchema` instead. */
  export const inboundSchema = ScheduleType$inboundSchema;
  /** @deprecated use `ScheduleType$outboundSchema` instead. */
  export const outboundSchema = ScheduleType$outboundSchema;
}

/** @internal */
export const CurbsidePickupDetails$inboundSchema: z.ZodType<
  CurbsidePickupDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  curbside_details: z.string().optional(),
  buyer_arrived_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "curbside_details": "curbsideDetails",
    "buyer_arrived_at": "buyerArrivedAt",
  });
});

/** @internal */
export type CurbsidePickupDetails$Outbound = {
  curbside_details?: string | undefined;
  buyer_arrived_at?: string | undefined;
};

/** @internal */
export const CurbsidePickupDetails$outboundSchema: z.ZodType<
  CurbsidePickupDetails$Outbound,
  z.ZodTypeDef,
  CurbsidePickupDetails
> = z.object({
  curbsideDetails: z.string().optional(),
  buyerArrivedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    curbsideDetails: "curbside_details",
    buyerArrivedAt: "buyer_arrived_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurbsidePickupDetails$ {
  /** @deprecated use `CurbsidePickupDetails$inboundSchema` instead. */
  export const inboundSchema = CurbsidePickupDetails$inboundSchema;
  /** @deprecated use `CurbsidePickupDetails$outboundSchema` instead. */
  export const outboundSchema = CurbsidePickupDetails$outboundSchema;
  /** @deprecated use `CurbsidePickupDetails$Outbound` instead. */
  export type Outbound = CurbsidePickupDetails$Outbound;
}

/** @internal */
export const Recipient$inboundSchema: z.ZodType<
  Recipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string().optional(),
  display_name: z.string().optional(),
  address: Address$inboundSchema.optional(),
  phone_number: PhoneNumber$inboundSchema.optional(),
  email: Email$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "display_name": "displayName",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type Recipient$Outbound = {
  customer_id?: string | undefined;
  display_name?: string | undefined;
  address?: Address$Outbound | undefined;
  phone_number?: PhoneNumber$Outbound | undefined;
  email?: Email$Outbound | undefined;
};

/** @internal */
export const Recipient$outboundSchema: z.ZodType<
  Recipient$Outbound,
  z.ZodTypeDef,
  Recipient
> = z.object({
  customerId: z.string().optional(),
  displayName: z.string().optional(),
  address: Address$outboundSchema.optional(),
  phoneNumber: PhoneNumber$outboundSchema.optional(),
  email: Email$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    displayName: "display_name",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recipient$ {
  /** @deprecated use `Recipient$inboundSchema` instead. */
  export const inboundSchema = Recipient$inboundSchema;
  /** @deprecated use `Recipient$outboundSchema` instead. */
  export const outboundSchema = Recipient$outboundSchema;
  /** @deprecated use `Recipient$Outbound` instead. */
  export type Outbound = Recipient$Outbound;
}

/** @internal */
export const PickupDetails$inboundSchema: z.ZodType<
  PickupDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  accepted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  auto_complete_duration: z.nullable(z.string()).optional(),
  cancel_reason: z.nullable(z.string()).optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  schedule_type: ScheduleType$inboundSchema.optional(),
  pickup_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  pickup_window_duration: z.string().optional(),
  prep_time_duration: z.string().optional(),
  note: z.string().optional(),
  placed_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  rejected_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ready_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expired_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  picked_up_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  canceled_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  is_curbside_pickup: z.boolean().optional(),
  curbside_pickup_details: z.lazy(() => CurbsidePickupDetails$inboundSchema)
    .optional(),
  recipient: z.lazy(() => Recipient$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "accepted_at": "acceptedAt",
    "auto_complete_duration": "autoCompleteDuration",
    "cancel_reason": "cancelReason",
    "expires_at": "expiresAt",
    "schedule_type": "scheduleType",
    "pickup_at": "pickupAt",
    "pickup_window_duration": "pickupWindowDuration",
    "prep_time_duration": "prepTimeDuration",
    "placed_at": "placedAt",
    "rejected_at": "rejectedAt",
    "ready_at": "readyAt",
    "expired_at": "expiredAt",
    "picked_up_at": "pickedUpAt",
    "canceled_at": "canceledAt",
    "is_curbside_pickup": "isCurbsidePickup",
    "curbside_pickup_details": "curbsidePickupDetails",
  });
});

/** @internal */
export type PickupDetails$Outbound = {
  accepted_at?: string | null | undefined;
  auto_complete_duration?: string | null | undefined;
  cancel_reason?: string | null | undefined;
  expires_at?: string | undefined;
  schedule_type?: string | undefined;
  pickup_at?: string | undefined;
  pickup_window_duration?: string | undefined;
  prep_time_duration?: string | undefined;
  note?: string | undefined;
  placed_at?: string | undefined;
  rejected_at?: string | undefined;
  ready_at?: string | undefined;
  expired_at?: string | undefined;
  picked_up_at?: string | undefined;
  canceled_at?: string | undefined;
  is_curbside_pickup?: boolean | undefined;
  curbside_pickup_details?: CurbsidePickupDetails$Outbound | undefined;
  recipient?: Recipient$Outbound | undefined;
};

/** @internal */
export const PickupDetails$outboundSchema: z.ZodType<
  PickupDetails$Outbound,
  z.ZodTypeDef,
  PickupDetails
> = z.object({
  acceptedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  autoCompleteDuration: z.nullable(z.string()).optional(),
  cancelReason: z.nullable(z.string()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  scheduleType: ScheduleType$outboundSchema.optional(),
  pickupAt: z.date().transform(v => v.toISOString()).optional(),
  pickupWindowDuration: z.string().optional(),
  prepTimeDuration: z.string().optional(),
  note: z.string().optional(),
  placedAt: z.date().transform(v => v.toISOString()).optional(),
  rejectedAt: z.date().transform(v => v.toISOString()).optional(),
  readyAt: z.date().transform(v => v.toISOString()).optional(),
  expiredAt: z.date().transform(v => v.toISOString()).optional(),
  pickedUpAt: z.date().transform(v => v.toISOString()).optional(),
  canceledAt: z.date().transform(v => v.toISOString()).optional(),
  isCurbsidePickup: z.boolean().optional(),
  curbsidePickupDetails: z.lazy(() => CurbsidePickupDetails$outboundSchema)
    .optional(),
  recipient: z.lazy(() => Recipient$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    acceptedAt: "accepted_at",
    autoCompleteDuration: "auto_complete_duration",
    cancelReason: "cancel_reason",
    expiresAt: "expires_at",
    scheduleType: "schedule_type",
    pickupAt: "pickup_at",
    pickupWindowDuration: "pickup_window_duration",
    prepTimeDuration: "prep_time_duration",
    placedAt: "placed_at",
    rejectedAt: "rejected_at",
    readyAt: "ready_at",
    expiredAt: "expired_at",
    pickedUpAt: "picked_up_at",
    canceledAt: "canceled_at",
    isCurbsidePickup: "is_curbside_pickup",
    curbsidePickupDetails: "curbside_pickup_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PickupDetails$ {
  /** @deprecated use `PickupDetails$inboundSchema` instead. */
  export const inboundSchema = PickupDetails$inboundSchema;
  /** @deprecated use `PickupDetails$outboundSchema` instead. */
  export const outboundSchema = PickupDetails$outboundSchema;
  /** @deprecated use `PickupDetails$Outbound` instead. */
  export type Outbound = PickupDetails$Outbound;
}

/** @internal */
export const ShipmentDetails$inboundSchema: z.ZodType<
  ShipmentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ShipmentDetails$Outbound = {};

/** @internal */
export const ShipmentDetails$outboundSchema: z.ZodType<
  ShipmentDetails$Outbound,
  z.ZodTypeDef,
  ShipmentDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentDetails$ {
  /** @deprecated use `ShipmentDetails$inboundSchema` instead. */
  export const inboundSchema = ShipmentDetails$inboundSchema;
  /** @deprecated use `ShipmentDetails$outboundSchema` instead. */
  export const outboundSchema = ShipmentDetails$outboundSchema;
  /** @deprecated use `ShipmentDetails$Outbound` instead. */
  export type Outbound = ShipmentDetails$Outbound;
}

/** @internal */
export const Fulfillments$inboundSchema: z.ZodType<
  Fulfillments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: OrderFulfillmentStatus$inboundSchema.optional(),
  type: OrderFulfillmentsType$inboundSchema.optional(),
  pickup_details: z.lazy(() => PickupDetails$inboundSchema).optional(),
  shipment_details: z.lazy(() => ShipmentDetails$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "pickup_details": "pickupDetails",
    "shipment_details": "shipmentDetails",
  });
});

/** @internal */
export type Fulfillments$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
  pickup_details?: PickupDetails$Outbound | undefined;
  shipment_details?: ShipmentDetails$Outbound | undefined;
};

/** @internal */
export const Fulfillments$outboundSchema: z.ZodType<
  Fulfillments$Outbound,
  z.ZodTypeDef,
  Fulfillments
> = z.object({
  id: z.string().optional(),
  status: OrderFulfillmentStatus$outboundSchema.optional(),
  type: OrderFulfillmentsType$outboundSchema.optional(),
  pickupDetails: z.lazy(() => PickupDetails$outboundSchema).optional(),
  shipmentDetails: z.lazy(() => ShipmentDetails$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    pickupDetails: "pickup_details",
    shipmentDetails: "shipment_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fulfillments$ {
  /** @deprecated use `Fulfillments$inboundSchema` instead. */
  export const inboundSchema = Fulfillments$inboundSchema;
  /** @deprecated use `Fulfillments$outboundSchema` instead. */
  export const outboundSchema = Fulfillments$outboundSchema;
  /** @deprecated use `Fulfillments$Outbound` instead. */
  export type Outbound = Fulfillments$Outbound;
}

/** @internal */
export const OrderItem$inboundSchema: z.ZodType<
  OrderItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type OrderItem$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const OrderItem$outboundSchema: z.ZodType<
  OrderItem$Outbound,
  z.ZodTypeDef,
  OrderItem
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderItem$ {
  /** @deprecated use `OrderItem$inboundSchema` instead. */
  export const inboundSchema = OrderItem$inboundSchema;
  /** @deprecated use `OrderItem$outboundSchema` instead. */
  export const outboundSchema = OrderItem$outboundSchema;
  /** @deprecated use `OrderItem$Outbound` instead. */
  export type Outbound = OrderItem$Outbound;
}

/** @internal */
export const AppliedTaxes$inboundSchema: z.ZodType<
  AppliedTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  tax_id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_id": "taxId",
  });
});

/** @internal */
export type AppliedTaxes$Outbound = {
  id?: string | undefined;
  tax_id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const AppliedTaxes$outboundSchema: z.ZodType<
  AppliedTaxes$Outbound,
  z.ZodTypeDef,
  AppliedTaxes
> = z.object({
  id: z.string().optional(),
  taxId: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppliedTaxes$ {
  /** @deprecated use `AppliedTaxes$inboundSchema` instead. */
  export const inboundSchema = AppliedTaxes$inboundSchema;
  /** @deprecated use `AppliedTaxes$outboundSchema` instead. */
  export const outboundSchema = AppliedTaxes$outboundSchema;
  /** @deprecated use `AppliedTaxes$Outbound` instead. */
  export type Outbound = AppliedTaxes$Outbound;
}

/** @internal */
export const AppliedDiscounts$inboundSchema: z.ZodType<
  AppliedDiscounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  discount_id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "discount_id": "discountId",
  });
});

/** @internal */
export type AppliedDiscounts$Outbound = {
  id?: string | undefined;
  discount_id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const AppliedDiscounts$outboundSchema: z.ZodType<
  AppliedDiscounts$Outbound,
  z.ZodTypeDef,
  AppliedDiscounts
> = z.object({
  id: z.string().optional(),
  discountId: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppliedDiscounts$ {
  /** @deprecated use `AppliedDiscounts$inboundSchema` instead. */
  export const inboundSchema = AppliedDiscounts$inboundSchema;
  /** @deprecated use `AppliedDiscounts$outboundSchema` instead. */
  export const outboundSchema = AppliedDiscounts$outboundSchema;
  /** @deprecated use `AppliedDiscounts$Outbound` instead. */
  export type Outbound = AppliedDiscounts$Outbound;
}

/** @internal */
export const OrderModifiers$inboundSchema: z.ZodType<
  OrderModifiers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  alternate_name: z.string().optional(),
  modifier_group_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "alternate_name": "alternateName",
    "modifier_group_id": "modifierGroupId",
  });
});

/** @internal */
export type OrderModifiers$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
  alternate_name?: string | undefined;
  modifier_group_id?: string | undefined;
};

/** @internal */
export const OrderModifiers$outboundSchema: z.ZodType<
  OrderModifiers$Outbound,
  z.ZodTypeDef,
  OrderModifiers
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  alternateName: z.string().optional(),
  modifierGroupId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    alternateName: "alternate_name",
    modifierGroupId: "modifier_group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderModifiers$ {
  /** @deprecated use `OrderModifiers$inboundSchema` instead. */
  export const inboundSchema = OrderModifiers$inboundSchema;
  /** @deprecated use `OrderModifiers$outboundSchema` instead. */
  export const outboundSchema = OrderModifiers$outboundSchema;
  /** @deprecated use `OrderModifiers$Outbound` instead. */
  export type Outbound = OrderModifiers$Outbound;
}

/** @internal */
export const LineItems$inboundSchema: z.ZodType<
  LineItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  item: z.lazy(() => OrderItem$inboundSchema).optional(),
  total_tax: z.nullable(z.number().int()).optional(),
  total_discount: z.nullable(z.number().int()).optional(),
  total_amount: z.nullable(z.number().int()).optional(),
  quantity: z.nullable(z.number()).optional(),
  unit_price: z.nullable(z.number()).optional(),
  applied_taxes: z.array(z.lazy(() => AppliedTaxes$inboundSchema)).optional(),
  applied_discounts: z.array(z.lazy(() => AppliedDiscounts$inboundSchema))
    .optional(),
  modifiers: z.array(z.lazy(() => OrderModifiers$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tax": "totalTax",
    "total_discount": "totalDiscount",
    "total_amount": "totalAmount",
    "unit_price": "unitPrice",
    "applied_taxes": "appliedTaxes",
    "applied_discounts": "appliedDiscounts",
  });
});

/** @internal */
export type LineItems$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  item?: OrderItem$Outbound | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_amount?: number | null | undefined;
  quantity?: number | null | undefined;
  unit_price?: number | null | undefined;
  applied_taxes?: Array<AppliedTaxes$Outbound> | undefined;
  applied_discounts?: Array<AppliedDiscounts$Outbound> | undefined;
  modifiers?: Array<OrderModifiers$Outbound> | undefined;
};

/** @internal */
export const LineItems$outboundSchema: z.ZodType<
  LineItems$Outbound,
  z.ZodTypeDef,
  LineItems
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  item: z.lazy(() => OrderItem$outboundSchema).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  quantity: z.nullable(z.number()).optional(),
  unitPrice: z.nullable(z.number()).optional(),
  appliedTaxes: z.array(z.lazy(() => AppliedTaxes$outboundSchema)).optional(),
  appliedDiscounts: z.array(z.lazy(() => AppliedDiscounts$outboundSchema))
    .optional(),
  modifiers: z.array(z.lazy(() => OrderModifiers$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalAmount: "total_amount",
    unitPrice: "unit_price",
    appliedTaxes: "applied_taxes",
    appliedDiscounts: "applied_discounts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItems$ {
  /** @deprecated use `LineItems$inboundSchema` instead. */
  export const inboundSchema = LineItems$inboundSchema;
  /** @deprecated use `LineItems$outboundSchema` instead. */
  export const outboundSchema = LineItems$outboundSchema;
  /** @deprecated use `LineItems$Outbound` instead. */
  export type Outbound = LineItems$Outbound;
}

/** @internal */
export const Payments$inboundSchema: z.ZodType<
  Payments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
});

/** @internal */
export type Payments$Outbound = {
  id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const Payments$outboundSchema: z.ZodType<
  Payments$Outbound,
  z.ZodTypeDef,
  Payments
> = z.object({
  id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payments$ {
  /** @deprecated use `Payments$inboundSchema` instead. */
  export const inboundSchema = Payments$inboundSchema;
  /** @deprecated use `Payments$outboundSchema` instead. */
  export const outboundSchema = Payments$outboundSchema;
  /** @deprecated use `Payments$Outbound` instead. */
  export type Outbound = Payments$Outbound;
}

/** @internal */
export const OrderRefundsStatus$inboundSchema: z.ZodNativeEnum<
  typeof OrderRefundsStatus
> = z.nativeEnum(OrderRefundsStatus);

/** @internal */
export const OrderRefundsStatus$outboundSchema: z.ZodNativeEnum<
  typeof OrderRefundsStatus
> = OrderRefundsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderRefundsStatus$ {
  /** @deprecated use `OrderRefundsStatus$inboundSchema` instead. */
  export const inboundSchema = OrderRefundsStatus$inboundSchema;
  /** @deprecated use `OrderRefundsStatus$outboundSchema` instead. */
  export const outboundSchema = OrderRefundsStatus$outboundSchema;
}

/** @internal */
export const Refunds$inboundSchema: z.ZodType<Refunds, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    location_id: z.string().optional(),
    amount: z.number().int().optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    reason: z.string().optional(),
    status: OrderRefundsStatus$inboundSchema.optional(),
    tender_id: z.string().optional(),
    transaction_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "location_id": "locationId",
      "tender_id": "tenderId",
      "transaction_id": "transactionId",
    });
  });

/** @internal */
export type Refunds$Outbound = {
  id?: string | undefined;
  location_id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
  reason?: string | undefined;
  status?: string | undefined;
  tender_id?: string | undefined;
  transaction_id?: string | undefined;
};

/** @internal */
export const Refunds$outboundSchema: z.ZodType<
  Refunds$Outbound,
  z.ZodTypeDef,
  Refunds
> = z.object({
  id: z.string().optional(),
  locationId: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  reason: z.string().optional(),
  status: OrderRefundsStatus$outboundSchema.optional(),
  tenderId: z.string().optional(),
  transactionId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    locationId: "location_id",
    tenderId: "tender_id",
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refunds$ {
  /** @deprecated use `Refunds$inboundSchema` instead. */
  export const inboundSchema = Refunds$inboundSchema;
  /** @deprecated use `Refunds$outboundSchema` instead. */
  export const outboundSchema = Refunds$outboundSchema;
  /** @deprecated use `Refunds$Outbound` instead. */
  export type Outbound = Refunds$Outbound;
}

/** @internal */
export const OrderScope$inboundSchema: z.ZodNativeEnum<typeof OrderScope> = z
  .nativeEnum(OrderScope);

/** @internal */
export const OrderScope$outboundSchema: z.ZodNativeEnum<typeof OrderScope> =
  OrderScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderScope$ {
  /** @deprecated use `OrderScope$inboundSchema` instead. */
  export const inboundSchema = OrderScope$inboundSchema;
  /** @deprecated use `OrderScope$outboundSchema` instead. */
  export const outboundSchema = OrderScope$outboundSchema;
}

/** @internal */
export const OrderTaxesType$inboundSchema: z.ZodNativeEnum<
  typeof OrderTaxesType
> = z.nativeEnum(OrderTaxesType);

/** @internal */
export const OrderTaxesType$outboundSchema: z.ZodNativeEnum<
  typeof OrderTaxesType
> = OrderTaxesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderTaxesType$ {
  /** @deprecated use `OrderTaxesType$inboundSchema` instead. */
  export const inboundSchema = OrderTaxesType$inboundSchema;
  /** @deprecated use `OrderTaxesType$outboundSchema` instead. */
  export const outboundSchema = OrderTaxesType$outboundSchema;
}

/** @internal */
export const Taxes$inboundSchema: z.ZodType<Taxes, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    amount: z.number().int().optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    percentage: z.number().optional(),
    scope: OrderScope$inboundSchema.optional(),
    type: OrderTaxesType$inboundSchema.optional(),
    auto_applied: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "auto_applied": "autoApplied",
    });
  });

/** @internal */
export type Taxes$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
  percentage?: number | undefined;
  scope?: string | undefined;
  type?: string | undefined;
  auto_applied?: boolean | undefined;
};

/** @internal */
export const Taxes$outboundSchema: z.ZodType<
  Taxes$Outbound,
  z.ZodTypeDef,
  Taxes
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  percentage: z.number().optional(),
  scope: OrderScope$outboundSchema.optional(),
  type: OrderTaxesType$outboundSchema.optional(),
  autoApplied: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    autoApplied: "auto_applied",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Taxes$ {
  /** @deprecated use `Taxes$inboundSchema` instead. */
  export const inboundSchema = Taxes$inboundSchema;
  /** @deprecated use `Taxes$outboundSchema` instead. */
  export const outboundSchema = Taxes$outboundSchema;
  /** @deprecated use `Taxes$Outbound` instead. */
  export type Outbound = Taxes$Outbound;
}

/** @internal */
export const OrderDiscountsType$inboundSchema: z.ZodNativeEnum<
  typeof OrderDiscountsType
> = z.nativeEnum(OrderDiscountsType);

/** @internal */
export const OrderDiscountsType$outboundSchema: z.ZodNativeEnum<
  typeof OrderDiscountsType
> = OrderDiscountsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDiscountsType$ {
  /** @deprecated use `OrderDiscountsType$inboundSchema` instead. */
  export const inboundSchema = OrderDiscountsType$inboundSchema;
  /** @deprecated use `OrderDiscountsType$outboundSchema` instead. */
  export const outboundSchema = OrderDiscountsType$outboundSchema;
}

/** @internal */
export const OrderDiscountsScope$inboundSchema: z.ZodNativeEnum<
  typeof OrderDiscountsScope
> = z.nativeEnum(OrderDiscountsScope);

/** @internal */
export const OrderDiscountsScope$outboundSchema: z.ZodNativeEnum<
  typeof OrderDiscountsScope
> = OrderDiscountsScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDiscountsScope$ {
  /** @deprecated use `OrderDiscountsScope$inboundSchema` instead. */
  export const inboundSchema = OrderDiscountsScope$inboundSchema;
  /** @deprecated use `OrderDiscountsScope$outboundSchema` instead. */
  export const outboundSchema = OrderDiscountsScope$outboundSchema;
}

/** @internal */
export const Discounts$inboundSchema: z.ZodType<
  Discounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  product_id: z.string().optional(),
  name: z.string().optional(),
  type: OrderDiscountsType$inboundSchema,
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  scope: OrderDiscountsScope$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
  });
});

/** @internal */
export type Discounts$Outbound = {
  id?: string | undefined;
  product_id?: string | undefined;
  name?: string | undefined;
  type: string;
  amount?: number | undefined;
  currency?: string | null | undefined;
  scope?: string | undefined;
};

/** @internal */
export const Discounts$outboundSchema: z.ZodType<
  Discounts$Outbound,
  z.ZodTypeDef,
  Discounts
> = z.object({
  id: z.string().optional(),
  productId: z.string().optional(),
  name: z.string().optional(),
  type: OrderDiscountsType$outboundSchema,
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  scope: OrderDiscountsScope$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Discounts$ {
  /** @deprecated use `Discounts$inboundSchema` instead. */
  export const inboundSchema = Discounts$inboundSchema;
  /** @deprecated use `Discounts$outboundSchema` instead. */
  export const outboundSchema = Discounts$outboundSchema;
  /** @deprecated use `Discounts$Outbound` instead. */
  export type Outbound = Discounts$Outbound;
}

/** @internal */
export const OrderTendersType$inboundSchema: z.ZodNativeEnum<
  typeof OrderTendersType
> = z.nativeEnum(OrderTendersType);

/** @internal */
export const OrderTendersType$outboundSchema: z.ZodNativeEnum<
  typeof OrderTendersType
> = OrderTendersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderTendersType$ {
  /** @deprecated use `OrderTendersType$inboundSchema` instead. */
  export const inboundSchema = OrderTendersType$inboundSchema;
  /** @deprecated use `OrderTendersType$outboundSchema` instead. */
  export const outboundSchema = OrderTendersType$outboundSchema;
}

/** @internal */
export const CardStatus$inboundSchema: z.ZodNativeEnum<typeof CardStatus> = z
  .nativeEnum(CardStatus);

/** @internal */
export const CardStatus$outboundSchema: z.ZodNativeEnum<typeof CardStatus> =
  CardStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardStatus$ {
  /** @deprecated use `CardStatus$inboundSchema` instead. */
  export const inboundSchema = CardStatus$inboundSchema;
  /** @deprecated use `CardStatus$outboundSchema` instead. */
  export const outboundSchema = CardStatus$outboundSchema;
}

/** @internal */
export const CardEntryMethod$inboundSchema: z.ZodNativeEnum<
  typeof CardEntryMethod
> = z.nativeEnum(CardEntryMethod);

/** @internal */
export const CardEntryMethod$outboundSchema: z.ZodNativeEnum<
  typeof CardEntryMethod
> = CardEntryMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardEntryMethod$ {
  /** @deprecated use `CardEntryMethod$inboundSchema` instead. */
  export const inboundSchema = CardEntryMethod$inboundSchema;
  /** @deprecated use `CardEntryMethod$outboundSchema` instead. */
  export const outboundSchema = CardEntryMethod$outboundSchema;
}

/** @internal */
export const Tenders$inboundSchema: z.ZodType<Tenders, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    type: OrderTendersType$inboundSchema.optional(),
    note: z.string().optional(),
    amount: z.number().optional(),
    percentage: z.number().optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    total_amount: z.nullable(z.number().int()).optional(),
    total_tip: z.nullable(z.number().int()).optional(),
    total_processing_fee: z.nullable(z.number().int()).optional(),
    total_tax: z.nullable(z.number().int()).optional(),
    total_discount: z.nullable(z.number().int()).optional(),
    total_refund: z.nullable(z.number().int()).optional(),
    total_service_charge: z.nullable(z.number().int()).optional(),
    buyer_tendered_cash_amount: z.nullable(z.number().int()).optional(),
    change_back_cash_amount: z.nullable(z.number().int()).optional(),
    card: z.nullable(PaymentCard$inboundSchema).optional(),
    card_status: z.nullable(CardStatus$inboundSchema).optional(),
    card_entry_method: z.nullable(CardEntryMethod$inboundSchema).optional(),
    payment_id: z.string().optional(),
    location_id: z.string().optional(),
    transaction_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "total_amount": "totalAmount",
      "total_tip": "totalTip",
      "total_processing_fee": "totalProcessingFee",
      "total_tax": "totalTax",
      "total_discount": "totalDiscount",
      "total_refund": "totalRefund",
      "total_service_charge": "totalServiceCharge",
      "buyer_tendered_cash_amount": "buyerTenderedCashAmount",
      "change_back_cash_amount": "changeBackCashAmount",
      "card_status": "cardStatus",
      "card_entry_method": "cardEntryMethod",
      "payment_id": "paymentId",
      "location_id": "locationId",
      "transaction_id": "transactionId",
    });
  });

/** @internal */
export type Tenders$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  type?: string | undefined;
  note?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  currency?: string | null | undefined;
  total_amount?: number | null | undefined;
  total_tip?: number | null | undefined;
  total_processing_fee?: number | null | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_refund?: number | null | undefined;
  total_service_charge?: number | null | undefined;
  buyer_tendered_cash_amount?: number | null | undefined;
  change_back_cash_amount?: number | null | undefined;
  card?: PaymentCard$Outbound | null | undefined;
  card_status?: string | null | undefined;
  card_entry_method?: string | null | undefined;
  payment_id?: string | undefined;
  location_id?: string | undefined;
  transaction_id?: string | undefined;
};

/** @internal */
export const Tenders$outboundSchema: z.ZodType<
  Tenders$Outbound,
  z.ZodTypeDef,
  Tenders
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  type: OrderTendersType$outboundSchema.optional(),
  note: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  totalTip: z.nullable(z.number().int()).optional(),
  totalProcessingFee: z.nullable(z.number().int()).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalRefund: z.nullable(z.number().int()).optional(),
  totalServiceCharge: z.nullable(z.number().int()).optional(),
  buyerTenderedCashAmount: z.nullable(z.number().int()).optional(),
  changeBackCashAmount: z.nullable(z.number().int()).optional(),
  card: z.nullable(PaymentCard$outboundSchema).optional(),
  cardStatus: z.nullable(CardStatus$outboundSchema).optional(),
  cardEntryMethod: z.nullable(CardEntryMethod$outboundSchema).optional(),
  paymentId: z.string().optional(),
  locationId: z.string().optional(),
  transactionId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    totalAmount: "total_amount",
    totalTip: "total_tip",
    totalProcessingFee: "total_processing_fee",
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalRefund: "total_refund",
    totalServiceCharge: "total_service_charge",
    buyerTenderedCashAmount: "buyer_tendered_cash_amount",
    changeBackCashAmount: "change_back_cash_amount",
    cardStatus: "card_status",
    cardEntryMethod: "card_entry_method",
    paymentId: "payment_id",
    locationId: "location_id",
    transactionId: "transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tenders$ {
  /** @deprecated use `Tenders$inboundSchema` instead. */
  export const inboundSchema = Tenders$inboundSchema;
  /** @deprecated use `Tenders$outboundSchema` instead. */
  export const outboundSchema = Tenders$outboundSchema;
  /** @deprecated use `Tenders$Outbound` instead. */
  export type Outbound = Tenders$Outbound;
}

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    idempotency_key: z.string().optional(),
    order_number: z.string().optional(),
    order_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    closed_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    reference_id: z.nullable(z.string()).optional(),
    status: OrderStatus$inboundSchema.optional(),
    payment_status: PosPaymentStatus$inboundSchema.optional(),
    currency: z.nullable(Currency$inboundSchema).optional(),
    title: z.string().optional(),
    note: z.string().optional(),
    merchant_id: z.string(),
    customer_id: z.string().optional(),
    employee_id: z.string().optional(),
    location_id: z.string(),
    order_type_id: z.string().optional(),
    table: z.string().optional(),
    seat: z.string().optional(),
    total_amount: z.nullable(z.number().int()).optional(),
    total_tip: z.nullable(z.number().int()).optional(),
    total_tax: z.nullable(z.number().int()).optional(),
    total_discount: z.nullable(z.number().int()).optional(),
    total_refund: z.nullable(z.number().int()).optional(),
    total_service_charge: z.nullable(z.number().int()).optional(),
    refunded: z.boolean().optional(),
    customers: z.array(z.lazy(() => Customers$inboundSchema)).optional(),
    fulfillments: z.array(z.lazy(() => Fulfillments$inboundSchema)).optional(),
    line_items: z.array(z.lazy(() => LineItems$inboundSchema)).optional(),
    payments: z.array(z.lazy(() => Payments$inboundSchema)).optional(),
    service_charges: z.array(ServiceCharge$inboundSchema).optional(),
    refunds: z.array(z.lazy(() => Refunds$inboundSchema)).optional(),
    taxes: z.array(z.lazy(() => Taxes$inboundSchema)).optional(),
    discounts: z.array(z.lazy(() => Discounts$inboundSchema)).optional(),
    tenders: z.array(z.lazy(() => Tenders$inboundSchema)).optional(),
    source: z.nullable(Source$inboundSchema).optional(),
    voided: z.boolean().optional(),
    voided_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
    version: z.nullable(z.string()).optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(PassThroughBody$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency_key": "idempotencyKey",
      "order_number": "orderNumber",
      "order_date": "orderDate",
      "closed_date": "closedDate",
      "reference_id": "referenceId",
      "payment_status": "paymentStatus",
      "merchant_id": "merchantId",
      "customer_id": "customerId",
      "employee_id": "employeeId",
      "location_id": "locationId",
      "order_type_id": "orderTypeId",
      "total_amount": "totalAmount",
      "total_tip": "totalTip",
      "total_tax": "totalTax",
      "total_discount": "totalDiscount",
      "total_refund": "totalRefund",
      "total_service_charge": "totalServiceCharge",
      "line_items": "lineItems",
      "service_charges": "serviceCharges",
      "voided_at": "voidedAt",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Order$Outbound = {
  id?: string | undefined;
  idempotency_key?: string | undefined;
  order_number?: string | undefined;
  order_date?: string | null | undefined;
  closed_date?: string | null | undefined;
  reference_id?: string | null | undefined;
  status?: string | undefined;
  payment_status?: string | undefined;
  currency?: string | null | undefined;
  title?: string | undefined;
  note?: string | undefined;
  merchant_id: string;
  customer_id?: string | undefined;
  employee_id?: string | undefined;
  location_id: string;
  order_type_id?: string | undefined;
  table?: string | undefined;
  seat?: string | undefined;
  total_amount?: number | null | undefined;
  total_tip?: number | null | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_refund?: number | null | undefined;
  total_service_charge?: number | null | undefined;
  refunded?: boolean | undefined;
  customers?: Array<Customers$Outbound> | undefined;
  fulfillments?: Array<Fulfillments$Outbound> | undefined;
  line_items?: Array<LineItems$Outbound> | undefined;
  payments?: Array<Payments$Outbound> | undefined;
  service_charges?: Array<ServiceCharge$Outbound> | undefined;
  refunds?: Array<Refunds$Outbound> | undefined;
  taxes?: Array<Taxes$Outbound> | undefined;
  discounts?: Array<Discounts$Outbound> | undefined;
  tenders?: Array<Tenders$Outbound> | undefined;
  source?: string | null | undefined;
  voided?: boolean | undefined;
  voided_at?: string | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  version?: string | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({
  id: z.string().optional(),
  idempotencyKey: z.string().optional(),
  orderNumber: z.string().optional(),
  orderDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  closedDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  referenceId: z.nullable(z.string()).optional(),
  status: OrderStatus$outboundSchema.optional(),
  paymentStatus: PosPaymentStatus$outboundSchema.optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  title: z.string().optional(),
  note: z.string().optional(),
  merchantId: z.string(),
  customerId: z.string().optional(),
  employeeId: z.string().optional(),
  locationId: z.string(),
  orderTypeId: z.string().optional(),
  table: z.string().optional(),
  seat: z.string().optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  totalTip: z.nullable(z.number().int()).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalRefund: z.nullable(z.number().int()).optional(),
  totalServiceCharge: z.nullable(z.number().int()).optional(),
  refunded: z.boolean().optional(),
  customers: z.array(z.lazy(() => Customers$outboundSchema)).optional(),
  fulfillments: z.array(z.lazy(() => Fulfillments$outboundSchema)).optional(),
  lineItems: z.array(z.lazy(() => LineItems$outboundSchema)).optional(),
  payments: z.array(z.lazy(() => Payments$outboundSchema)).optional(),
  serviceCharges: z.array(ServiceCharge$outboundSchema).optional(),
  refunds: z.array(z.lazy(() => Refunds$outboundSchema)).optional(),
  taxes: z.array(z.lazy(() => Taxes$outboundSchema)).optional(),
  discounts: z.array(z.lazy(() => Discounts$outboundSchema)).optional(),
  tenders: z.array(z.lazy(() => Tenders$outboundSchema)).optional(),
  source: z.nullable(Source$outboundSchema).optional(),
  voided: z.boolean().optional(),
  voidedAt: z.date().transform(v => v.toISOString()).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  version: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency_key",
    orderNumber: "order_number",
    orderDate: "order_date",
    closedDate: "closed_date",
    referenceId: "reference_id",
    paymentStatus: "payment_status",
    merchantId: "merchant_id",
    customerId: "customer_id",
    employeeId: "employee_id",
    locationId: "location_id",
    orderTypeId: "order_type_id",
    totalAmount: "total_amount",
    totalTip: "total_tip",
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalRefund: "total_refund",
    totalServiceCharge: "total_service_charge",
    lineItems: "line_items",
    serviceCharges: "service_charges",
    voidedAt: "voided_at",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

/** @internal */
export const OrderPickupDetails$inboundSchema: z.ZodType<
  OrderPickupDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  auto_complete_duration: z.nullable(z.string()).optional(),
  cancel_reason: z.nullable(z.string()).optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  schedule_type: ScheduleType$inboundSchema.optional(),
  pickup_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  pickup_window_duration: z.string().optional(),
  prep_time_duration: z.string().optional(),
  note: z.string().optional(),
  placed_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  rejected_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  ready_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expired_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  picked_up_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  canceled_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  is_curbside_pickup: z.boolean().optional(),
  curbside_pickup_details: z.lazy(() => CurbsidePickupDetails$inboundSchema)
    .optional(),
  recipient: z.lazy(() => Recipient$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "auto_complete_duration": "autoCompleteDuration",
    "cancel_reason": "cancelReason",
    "expires_at": "expiresAt",
    "schedule_type": "scheduleType",
    "pickup_at": "pickupAt",
    "pickup_window_duration": "pickupWindowDuration",
    "prep_time_duration": "prepTimeDuration",
    "placed_at": "placedAt",
    "rejected_at": "rejectedAt",
    "ready_at": "readyAt",
    "expired_at": "expiredAt",
    "picked_up_at": "pickedUpAt",
    "canceled_at": "canceledAt",
    "is_curbside_pickup": "isCurbsidePickup",
    "curbside_pickup_details": "curbsidePickupDetails",
  });
});

/** @internal */
export type OrderPickupDetails$Outbound = {
  auto_complete_duration?: string | null | undefined;
  cancel_reason?: string | null | undefined;
  expires_at?: string | undefined;
  schedule_type?: string | undefined;
  pickup_at?: string | undefined;
  pickup_window_duration?: string | undefined;
  prep_time_duration?: string | undefined;
  note?: string | undefined;
  placed_at?: string | undefined;
  rejected_at?: string | undefined;
  ready_at?: string | undefined;
  expired_at?: string | undefined;
  picked_up_at?: string | undefined;
  canceled_at?: string | undefined;
  is_curbside_pickup?: boolean | undefined;
  curbside_pickup_details?: CurbsidePickupDetails$Outbound | undefined;
  recipient?: Recipient$Outbound | undefined;
};

/** @internal */
export const OrderPickupDetails$outboundSchema: z.ZodType<
  OrderPickupDetails$Outbound,
  z.ZodTypeDef,
  OrderPickupDetails
> = z.object({
  autoCompleteDuration: z.nullable(z.string()).optional(),
  cancelReason: z.nullable(z.string()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  scheduleType: ScheduleType$outboundSchema.optional(),
  pickupAt: z.date().transform(v => v.toISOString()).optional(),
  pickupWindowDuration: z.string().optional(),
  prepTimeDuration: z.string().optional(),
  note: z.string().optional(),
  placedAt: z.date().transform(v => v.toISOString()).optional(),
  rejectedAt: z.date().transform(v => v.toISOString()).optional(),
  readyAt: z.date().transform(v => v.toISOString()).optional(),
  expiredAt: z.date().transform(v => v.toISOString()).optional(),
  pickedUpAt: z.date().transform(v => v.toISOString()).optional(),
  canceledAt: z.date().transform(v => v.toISOString()).optional(),
  isCurbsidePickup: z.boolean().optional(),
  curbsidePickupDetails: z.lazy(() => CurbsidePickupDetails$outboundSchema)
    .optional(),
  recipient: z.lazy(() => Recipient$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    autoCompleteDuration: "auto_complete_duration",
    cancelReason: "cancel_reason",
    expiresAt: "expires_at",
    scheduleType: "schedule_type",
    pickupAt: "pickup_at",
    pickupWindowDuration: "pickup_window_duration",
    prepTimeDuration: "prep_time_duration",
    placedAt: "placed_at",
    rejectedAt: "rejected_at",
    readyAt: "ready_at",
    expiredAt: "expired_at",
    pickedUpAt: "picked_up_at",
    canceledAt: "canceled_at",
    isCurbsidePickup: "is_curbside_pickup",
    curbsidePickupDetails: "curbside_pickup_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderPickupDetails$ {
  /** @deprecated use `OrderPickupDetails$inboundSchema` instead. */
  export const inboundSchema = OrderPickupDetails$inboundSchema;
  /** @deprecated use `OrderPickupDetails$outboundSchema` instead. */
  export const outboundSchema = OrderPickupDetails$outboundSchema;
  /** @deprecated use `OrderPickupDetails$Outbound` instead. */
  export type Outbound = OrderPickupDetails$Outbound;
}

/** @internal */
export const OrderFulfillments$inboundSchema: z.ZodType<
  OrderFulfillments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: OrderFulfillmentStatus$inboundSchema.optional(),
  type: OrderFulfillmentsType$inboundSchema.optional(),
  pickup_details: z.lazy(() => OrderPickupDetails$inboundSchema).optional(),
  shipment_details: z.lazy(() => ShipmentDetails$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "pickup_details": "pickupDetails",
    "shipment_details": "shipmentDetails",
  });
});

/** @internal */
export type OrderFulfillments$Outbound = {
  id?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
  pickup_details?: OrderPickupDetails$Outbound | undefined;
  shipment_details?: ShipmentDetails$Outbound | undefined;
};

/** @internal */
export const OrderFulfillments$outboundSchema: z.ZodType<
  OrderFulfillments$Outbound,
  z.ZodTypeDef,
  OrderFulfillments
> = z.object({
  id: z.string().optional(),
  status: OrderFulfillmentStatus$outboundSchema.optional(),
  type: OrderFulfillmentsType$outboundSchema.optional(),
  pickupDetails: z.lazy(() => OrderPickupDetails$outboundSchema).optional(),
  shipmentDetails: z.lazy(() => ShipmentDetails$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    pickupDetails: "pickup_details",
    shipmentDetails: "shipment_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderFulfillments$ {
  /** @deprecated use `OrderFulfillments$inboundSchema` instead. */
  export const inboundSchema = OrderFulfillments$inboundSchema;
  /** @deprecated use `OrderFulfillments$outboundSchema` instead. */
  export const outboundSchema = OrderFulfillments$outboundSchema;
  /** @deprecated use `OrderFulfillments$Outbound` instead. */
  export type Outbound = OrderFulfillments$Outbound;
}

/** @internal */
export const OrderItemInput$inboundSchema: z.ZodType<
  OrderItemInput,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OrderItemInput$Outbound = {};

/** @internal */
export const OrderItemInput$outboundSchema: z.ZodType<
  OrderItemInput$Outbound,
  z.ZodTypeDef,
  OrderItemInput
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderItemInput$ {
  /** @deprecated use `OrderItemInput$inboundSchema` instead. */
  export const inboundSchema = OrderItemInput$inboundSchema;
  /** @deprecated use `OrderItemInput$outboundSchema` instead. */
  export const outboundSchema = OrderItemInput$outboundSchema;
  /** @deprecated use `OrderItemInput$Outbound` instead. */
  export type Outbound = OrderItemInput$Outbound;
}

/** @internal */
export const OrderAppliedTaxes$inboundSchema: z.ZodType<
  OrderAppliedTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  tax_id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_id": "taxId",
  });
});

/** @internal */
export type OrderAppliedTaxes$Outbound = {
  tax_id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const OrderAppliedTaxes$outboundSchema: z.ZodType<
  OrderAppliedTaxes$Outbound,
  z.ZodTypeDef,
  OrderAppliedTaxes
> = z.object({
  taxId: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderAppliedTaxes$ {
  /** @deprecated use `OrderAppliedTaxes$inboundSchema` instead. */
  export const inboundSchema = OrderAppliedTaxes$inboundSchema;
  /** @deprecated use `OrderAppliedTaxes$outboundSchema` instead. */
  export const outboundSchema = OrderAppliedTaxes$outboundSchema;
  /** @deprecated use `OrderAppliedTaxes$Outbound` instead. */
  export type Outbound = OrderAppliedTaxes$Outbound;
}

/** @internal */
export const OrderAppliedDiscounts$inboundSchema: z.ZodType<
  OrderAppliedDiscounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  discount_id: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "discount_id": "discountId",
  });
});

/** @internal */
export type OrderAppliedDiscounts$Outbound = {
  discount_id?: string | undefined;
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const OrderAppliedDiscounts$outboundSchema: z.ZodType<
  OrderAppliedDiscounts$Outbound,
  z.ZodTypeDef,
  OrderAppliedDiscounts
> = z.object({
  discountId: z.string().optional(),
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderAppliedDiscounts$ {
  /** @deprecated use `OrderAppliedDiscounts$inboundSchema` instead. */
  export const inboundSchema = OrderAppliedDiscounts$inboundSchema;
  /** @deprecated use `OrderAppliedDiscounts$outboundSchema` instead. */
  export const outboundSchema = OrderAppliedDiscounts$outboundSchema;
  /** @deprecated use `OrderAppliedDiscounts$Outbound` instead. */
  export type Outbound = OrderAppliedDiscounts$Outbound;
}

/** @internal */
export const OrderLineItems$inboundSchema: z.ZodType<
  OrderLineItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  item: z.lazy(() => OrderItemInput$inboundSchema).optional(),
  total_tax: z.nullable(z.number().int()).optional(),
  total_discount: z.nullable(z.number().int()).optional(),
  total_amount: z.nullable(z.number().int()).optional(),
  quantity: z.nullable(z.number()).optional(),
  unit_price: z.nullable(z.number()).optional(),
  applied_taxes: z.array(z.lazy(() => OrderAppliedTaxes$inboundSchema))
    .optional(),
  applied_discounts: z.array(z.lazy(() => OrderAppliedDiscounts$inboundSchema))
    .optional(),
  modifiers: z.array(z.lazy(() => OrderModifiers$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tax": "totalTax",
    "total_discount": "totalDiscount",
    "total_amount": "totalAmount",
    "unit_price": "unitPrice",
    "applied_taxes": "appliedTaxes",
    "applied_discounts": "appliedDiscounts",
  });
});

/** @internal */
export type OrderLineItems$Outbound = {
  name?: string | undefined;
  item?: OrderItemInput$Outbound | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_amount?: number | null | undefined;
  quantity?: number | null | undefined;
  unit_price?: number | null | undefined;
  applied_taxes?: Array<OrderAppliedTaxes$Outbound> | undefined;
  applied_discounts?: Array<OrderAppliedDiscounts$Outbound> | undefined;
  modifiers?: Array<OrderModifiers$Outbound> | undefined;
};

/** @internal */
export const OrderLineItems$outboundSchema: z.ZodType<
  OrderLineItems$Outbound,
  z.ZodTypeDef,
  OrderLineItems
> = z.object({
  name: z.string().optional(),
  item: z.lazy(() => OrderItemInput$outboundSchema).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  quantity: z.nullable(z.number()).optional(),
  unitPrice: z.nullable(z.number()).optional(),
  appliedTaxes: z.array(z.lazy(() => OrderAppliedTaxes$outboundSchema))
    .optional(),
  appliedDiscounts: z.array(z.lazy(() => OrderAppliedDiscounts$outboundSchema))
    .optional(),
  modifiers: z.array(z.lazy(() => OrderModifiers$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalAmount: "total_amount",
    unitPrice: "unit_price",
    appliedTaxes: "applied_taxes",
    appliedDiscounts: "applied_discounts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderLineItems$ {
  /** @deprecated use `OrderLineItems$inboundSchema` instead. */
  export const inboundSchema = OrderLineItems$inboundSchema;
  /** @deprecated use `OrderLineItems$outboundSchema` instead. */
  export const outboundSchema = OrderLineItems$outboundSchema;
  /** @deprecated use `OrderLineItems$Outbound` instead. */
  export type Outbound = OrderLineItems$Outbound;
}

/** @internal */
export const OrderPayments$inboundSchema: z.ZodType<
  OrderPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
});

/** @internal */
export type OrderPayments$Outbound = {
  amount?: number | undefined;
  currency?: string | null | undefined;
};

/** @internal */
export const OrderPayments$outboundSchema: z.ZodType<
  OrderPayments$Outbound,
  z.ZodTypeDef,
  OrderPayments
> = z.object({
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderPayments$ {
  /** @deprecated use `OrderPayments$inboundSchema` instead. */
  export const inboundSchema = OrderPayments$inboundSchema;
  /** @deprecated use `OrderPayments$outboundSchema` instead. */
  export const outboundSchema = OrderPayments$outboundSchema;
  /** @deprecated use `OrderPayments$Outbound` instead. */
  export type Outbound = OrderPayments$Outbound;
}

/** @internal */
export const OrderRefunds$inboundSchema: z.ZodType<
  OrderRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  reason: z.string().optional(),
  status: OrderRefundsStatus$inboundSchema.optional(),
});

/** @internal */
export type OrderRefunds$Outbound = {
  amount?: number | undefined;
  currency?: string | null | undefined;
  reason?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const OrderRefunds$outboundSchema: z.ZodType<
  OrderRefunds$Outbound,
  z.ZodTypeDef,
  OrderRefunds
> = z.object({
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  reason: z.string().optional(),
  status: OrderRefundsStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderRefunds$ {
  /** @deprecated use `OrderRefunds$inboundSchema` instead. */
  export const inboundSchema = OrderRefunds$inboundSchema;
  /** @deprecated use `OrderRefunds$outboundSchema` instead. */
  export const outboundSchema = OrderRefunds$outboundSchema;
  /** @deprecated use `OrderRefunds$Outbound` instead. */
  export type Outbound = OrderRefunds$Outbound;
}

/** @internal */
export const OrderDiscounts$inboundSchema: z.ZodType<
  OrderDiscounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: OrderDiscountsType$inboundSchema,
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  scope: OrderDiscountsScope$inboundSchema.optional(),
});

/** @internal */
export type OrderDiscounts$Outbound = {
  name?: string | undefined;
  type: string;
  amount?: number | undefined;
  currency?: string | null | undefined;
  scope?: string | undefined;
};

/** @internal */
export const OrderDiscounts$outboundSchema: z.ZodType<
  OrderDiscounts$Outbound,
  z.ZodTypeDef,
  OrderDiscounts
> = z.object({
  name: z.string().optional(),
  type: OrderDiscountsType$outboundSchema,
  amount: z.number().int().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  scope: OrderDiscountsScope$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDiscounts$ {
  /** @deprecated use `OrderDiscounts$inboundSchema` instead. */
  export const inboundSchema = OrderDiscounts$inboundSchema;
  /** @deprecated use `OrderDiscounts$outboundSchema` instead. */
  export const outboundSchema = OrderDiscounts$outboundSchema;
  /** @deprecated use `OrderDiscounts$Outbound` instead. */
  export type Outbound = OrderDiscounts$Outbound;
}

/** @internal */
export const OrderTenders$inboundSchema: z.ZodType<
  OrderTenders,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: OrderTendersType$inboundSchema.optional(),
  note: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  total_amount: z.nullable(z.number().int()).optional(),
  total_tip: z.nullable(z.number().int()).optional(),
  total_processing_fee: z.nullable(z.number().int()).optional(),
  total_tax: z.nullable(z.number().int()).optional(),
  total_discount: z.nullable(z.number().int()).optional(),
  total_refund: z.nullable(z.number().int()).optional(),
  total_service_charge: z.nullable(z.number().int()).optional(),
  buyer_tendered_cash_amount: z.nullable(z.number().int()).optional(),
  change_back_cash_amount: z.nullable(z.number().int()).optional(),
  card: z.nullable(PaymentCardInput$inboundSchema).optional(),
  card_status: z.nullable(CardStatus$inboundSchema).optional(),
  card_entry_method: z.nullable(CardEntryMethod$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_amount": "totalAmount",
    "total_tip": "totalTip",
    "total_processing_fee": "totalProcessingFee",
    "total_tax": "totalTax",
    "total_discount": "totalDiscount",
    "total_refund": "totalRefund",
    "total_service_charge": "totalServiceCharge",
    "buyer_tendered_cash_amount": "buyerTenderedCashAmount",
    "change_back_cash_amount": "changeBackCashAmount",
    "card_status": "cardStatus",
    "card_entry_method": "cardEntryMethod",
  });
});

/** @internal */
export type OrderTenders$Outbound = {
  name?: string | undefined;
  type?: string | undefined;
  note?: string | undefined;
  amount?: number | undefined;
  percentage?: number | undefined;
  currency?: string | null | undefined;
  total_amount?: number | null | undefined;
  total_tip?: number | null | undefined;
  total_processing_fee?: number | null | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_refund?: number | null | undefined;
  total_service_charge?: number | null | undefined;
  buyer_tendered_cash_amount?: number | null | undefined;
  change_back_cash_amount?: number | null | undefined;
  card?: PaymentCardInput$Outbound | null | undefined;
  card_status?: string | null | undefined;
  card_entry_method?: string | null | undefined;
};

/** @internal */
export const OrderTenders$outboundSchema: z.ZodType<
  OrderTenders$Outbound,
  z.ZodTypeDef,
  OrderTenders
> = z.object({
  name: z.string().optional(),
  type: OrderTendersType$outboundSchema.optional(),
  note: z.string().optional(),
  amount: z.number().optional(),
  percentage: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  totalTip: z.nullable(z.number().int()).optional(),
  totalProcessingFee: z.nullable(z.number().int()).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalRefund: z.nullable(z.number().int()).optional(),
  totalServiceCharge: z.nullable(z.number().int()).optional(),
  buyerTenderedCashAmount: z.nullable(z.number().int()).optional(),
  changeBackCashAmount: z.nullable(z.number().int()).optional(),
  card: z.nullable(PaymentCardInput$outboundSchema).optional(),
  cardStatus: z.nullable(CardStatus$outboundSchema).optional(),
  cardEntryMethod: z.nullable(CardEntryMethod$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    totalAmount: "total_amount",
    totalTip: "total_tip",
    totalProcessingFee: "total_processing_fee",
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalRefund: "total_refund",
    totalServiceCharge: "total_service_charge",
    buyerTenderedCashAmount: "buyer_tendered_cash_amount",
    changeBackCashAmount: "change_back_cash_amount",
    cardStatus: "card_status",
    cardEntryMethod: "card_entry_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderTenders$ {
  /** @deprecated use `OrderTenders$inboundSchema` instead. */
  export const inboundSchema = OrderTenders$inboundSchema;
  /** @deprecated use `OrderTenders$outboundSchema` instead. */
  export const outboundSchema = OrderTenders$outboundSchema;
  /** @deprecated use `OrderTenders$Outbound` instead. */
  export type Outbound = OrderTenders$Outbound;
}

/** @internal */
export const OrderInput$inboundSchema: z.ZodType<
  OrderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  idempotency_key: z.string().optional(),
  order_number: z.string().optional(),
  order_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  closed_date: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  reference_id: z.nullable(z.string()).optional(),
  status: OrderStatus$inboundSchema.optional(),
  payment_status: PosPaymentStatus$inboundSchema.optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  title: z.string().optional(),
  note: z.string().optional(),
  merchant_id: z.string(),
  customer_id: z.string().optional(),
  employee_id: z.string().optional(),
  location_id: z.string(),
  order_type_id: z.string().optional(),
  table: z.string().optional(),
  seat: z.string().optional(),
  total_amount: z.nullable(z.number().int()).optional(),
  total_tip: z.nullable(z.number().int()).optional(),
  total_tax: z.nullable(z.number().int()).optional(),
  total_discount: z.nullable(z.number().int()).optional(),
  total_refund: z.nullable(z.number().int()).optional(),
  total_service_charge: z.nullable(z.number().int()).optional(),
  refunded: z.boolean().optional(),
  customers: z.array(z.lazy(() => Customers$inboundSchema)).optional(),
  fulfillments: z.array(z.lazy(() => OrderFulfillments$inboundSchema))
    .optional(),
  line_items: z.array(z.lazy(() => OrderLineItems$inboundSchema)).optional(),
  payments: z.array(z.lazy(() => OrderPayments$inboundSchema)).optional(),
  service_charges: z.array(ServiceChargeInput$inboundSchema).optional(),
  refunds: z.array(z.lazy(() => OrderRefunds$inboundSchema)).optional(),
  taxes: z.array(z.lazy(() => Taxes$inboundSchema)).optional(),
  discounts: z.array(z.lazy(() => OrderDiscounts$inboundSchema)).optional(),
  tenders: z.array(z.lazy(() => OrderTenders$inboundSchema)).optional(),
  voided: z.boolean().optional(),
  version: z.nullable(z.string()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency_key": "idempotencyKey",
    "order_number": "orderNumber",
    "order_date": "orderDate",
    "closed_date": "closedDate",
    "reference_id": "referenceId",
    "payment_status": "paymentStatus",
    "merchant_id": "merchantId",
    "customer_id": "customerId",
    "employee_id": "employeeId",
    "location_id": "locationId",
    "order_type_id": "orderTypeId",
    "total_amount": "totalAmount",
    "total_tip": "totalTip",
    "total_tax": "totalTax",
    "total_discount": "totalDiscount",
    "total_refund": "totalRefund",
    "total_service_charge": "totalServiceCharge",
    "line_items": "lineItems",
    "service_charges": "serviceCharges",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type OrderInput$Outbound = {
  idempotency_key?: string | undefined;
  order_number?: string | undefined;
  order_date?: string | null | undefined;
  closed_date?: string | null | undefined;
  reference_id?: string | null | undefined;
  status?: string | undefined;
  payment_status?: string | undefined;
  currency?: string | null | undefined;
  title?: string | undefined;
  note?: string | undefined;
  merchant_id: string;
  customer_id?: string | undefined;
  employee_id?: string | undefined;
  location_id: string;
  order_type_id?: string | undefined;
  table?: string | undefined;
  seat?: string | undefined;
  total_amount?: number | null | undefined;
  total_tip?: number | null | undefined;
  total_tax?: number | null | undefined;
  total_discount?: number | null | undefined;
  total_refund?: number | null | undefined;
  total_service_charge?: number | null | undefined;
  refunded?: boolean | undefined;
  customers?: Array<Customers$Outbound> | undefined;
  fulfillments?: Array<OrderFulfillments$Outbound> | undefined;
  line_items?: Array<OrderLineItems$Outbound> | undefined;
  payments?: Array<OrderPayments$Outbound> | undefined;
  service_charges?: Array<ServiceChargeInput$Outbound> | undefined;
  refunds?: Array<OrderRefunds$Outbound> | undefined;
  taxes?: Array<Taxes$Outbound> | undefined;
  discounts?: Array<OrderDiscounts$Outbound> | undefined;
  tenders?: Array<OrderTenders$Outbound> | undefined;
  voided?: boolean | undefined;
  version?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const OrderInput$outboundSchema: z.ZodType<
  OrderInput$Outbound,
  z.ZodTypeDef,
  OrderInput
> = z.object({
  idempotencyKey: z.string().optional(),
  orderNumber: z.string().optional(),
  orderDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  closedDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  referenceId: z.nullable(z.string()).optional(),
  status: OrderStatus$outboundSchema.optional(),
  paymentStatus: PosPaymentStatus$outboundSchema.optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  title: z.string().optional(),
  note: z.string().optional(),
  merchantId: z.string(),
  customerId: z.string().optional(),
  employeeId: z.string().optional(),
  locationId: z.string(),
  orderTypeId: z.string().optional(),
  table: z.string().optional(),
  seat: z.string().optional(),
  totalAmount: z.nullable(z.number().int()).optional(),
  totalTip: z.nullable(z.number().int()).optional(),
  totalTax: z.nullable(z.number().int()).optional(),
  totalDiscount: z.nullable(z.number().int()).optional(),
  totalRefund: z.nullable(z.number().int()).optional(),
  totalServiceCharge: z.nullable(z.number().int()).optional(),
  refunded: z.boolean().optional(),
  customers: z.array(z.lazy(() => Customers$outboundSchema)).optional(),
  fulfillments: z.array(z.lazy(() => OrderFulfillments$outboundSchema))
    .optional(),
  lineItems: z.array(z.lazy(() => OrderLineItems$outboundSchema)).optional(),
  payments: z.array(z.lazy(() => OrderPayments$outboundSchema)).optional(),
  serviceCharges: z.array(ServiceChargeInput$outboundSchema).optional(),
  refunds: z.array(z.lazy(() => OrderRefunds$outboundSchema)).optional(),
  taxes: z.array(z.lazy(() => Taxes$outboundSchema)).optional(),
  discounts: z.array(z.lazy(() => OrderDiscounts$outboundSchema)).optional(),
  tenders: z.array(z.lazy(() => OrderTenders$outboundSchema)).optional(),
  voided: z.boolean().optional(),
  version: z.nullable(z.string()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency_key",
    orderNumber: "order_number",
    orderDate: "order_date",
    closedDate: "closed_date",
    referenceId: "reference_id",
    paymentStatus: "payment_status",
    merchantId: "merchant_id",
    customerId: "customer_id",
    employeeId: "employee_id",
    locationId: "location_id",
    orderTypeId: "order_type_id",
    totalAmount: "total_amount",
    totalTip: "total_tip",
    totalTax: "total_tax",
    totalDiscount: "total_discount",
    totalRefund: "total_refund",
    totalServiceCharge: "total_service_charge",
    lineItems: "line_items",
    serviceCharges: "service_charges",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderInput$ {
  /** @deprecated use `OrderInput$inboundSchema` instead. */
  export const inboundSchema = OrderInput$inboundSchema;
  /** @deprecated use `OrderInput$outboundSchema` instead. */
  export const outboundSchema = OrderInput$outboundSchema;
  /** @deprecated use `OrderInput$Outbound` instead. */
  export type Outbound = OrderInput$Outbound;
}
