/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by account classification.
 */
export const Classification = {
  Asset: "asset",
  Equity: "equity",
  Expense: "expense",
  Liability: "liability",
  Revenue: "revenue",
  Income: "income",
  OtherIncome: "other_income",
  OtherExpense: "other_expense",
  CostsOfSales: "costs_of_sales",
  Other: "other",
} as const;
/**
 * Filter by account classification.
 */
export type Classification = ClosedEnum<typeof Classification>;

export type LedgerAccountsFilter = {
  updatedSince?: Date | undefined;
  /**
   * Filter by account classification.
   */
  classification?: Classification | undefined;
};

/** @internal */
export const Classification$inboundSchema: z.ZodNativeEnum<
  typeof Classification
> = z.nativeEnum(Classification);

/** @internal */
export const Classification$outboundSchema: z.ZodNativeEnum<
  typeof Classification
> = Classification$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Classification$ {
  /** @deprecated use `Classification$inboundSchema` instead. */
  export const inboundSchema = Classification$inboundSchema;
  /** @deprecated use `Classification$outboundSchema` instead. */
  export const outboundSchema = Classification$outboundSchema;
}

/** @internal */
export const LedgerAccountsFilter$inboundSchema: z.ZodType<
  LedgerAccountsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_since: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  classification: Classification$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type LedgerAccountsFilter$Outbound = {
  updated_since?: string | undefined;
  classification?: string | undefined;
};

/** @internal */
export const LedgerAccountsFilter$outboundSchema: z.ZodType<
  LedgerAccountsFilter$Outbound,
  z.ZodTypeDef,
  LedgerAccountsFilter
> = z.object({
  updatedSince: z.date().transform(v => v.toISOString()).optional(),
  classification: Classification$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LedgerAccountsFilter$ {
  /** @deprecated use `LedgerAccountsFilter$inboundSchema` instead. */
  export const inboundSchema = LedgerAccountsFilter$inboundSchema;
  /** @deprecated use `LedgerAccountsFilter$outboundSchema` instead. */
  export const outboundSchema = LedgerAccountsFilter$outboundSchema;
  /** @deprecated use `LedgerAccountsFilter$Outbound` instead. */
  export type Outbound = LedgerAccountsFilter$Outbound;
}

export function ledgerAccountsFilterToJSON(
  ledgerAccountsFilter: LedgerAccountsFilter,
): string {
  return JSON.stringify(
    LedgerAccountsFilter$outboundSchema.parse(ledgerAccountsFilter),
  );
}

export function ledgerAccountsFilterFromJSON(
  jsonString: string,
): SafeParseResult<LedgerAccountsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LedgerAccountsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LedgerAccountsFilter' from JSON`,
  );
}
