/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the rebilling process for this line item.
 */
export const RebillStatus = {
  Pending: "pending",
  Billed: "billed",
  Voided: "voided",
} as const;
/**
 * Status of the rebilling process for this line item.
 */
export type RebillStatus = ClosedEnum<typeof RebillStatus>;

/**
 * Rebilling metadata for this line item.
 */
export type Rebilling = {
  /**
   * Whether this line item is eligible for rebilling.
   */
  rebillable?: boolean | undefined;
  /**
   * Status of the rebilling process for this line item.
   */
  rebillStatus?: RebillStatus | null | undefined;
  /**
   * The ID of the transaction this line item was rebilled to.
   */
  linkedTransactionId?: string | null | undefined;
  /**
   * The ID of the line item in the rebilled transaction.
   */
  linkedTransactionLineId?: string | null | undefined;
};

/** @internal */
export const RebillStatus$inboundSchema: z.ZodNativeEnum<typeof RebillStatus> =
  z.nativeEnum(RebillStatus);

/** @internal */
export const RebillStatus$outboundSchema: z.ZodNativeEnum<typeof RebillStatus> =
  RebillStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RebillStatus$ {
  /** @deprecated use `RebillStatus$inboundSchema` instead. */
  export const inboundSchema = RebillStatus$inboundSchema;
  /** @deprecated use `RebillStatus$outboundSchema` instead. */
  export const outboundSchema = RebillStatus$outboundSchema;
}

/** @internal */
export const Rebilling$inboundSchema: z.ZodType<
  Rebilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  rebillable: z.boolean().optional(),
  rebill_status: z.nullable(RebillStatus$inboundSchema).optional(),
  linked_transaction_id: z.nullable(z.string()).optional(),
  linked_transaction_line_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "rebill_status": "rebillStatus",
    "linked_transaction_id": "linkedTransactionId",
    "linked_transaction_line_id": "linkedTransactionLineId",
  });
});

/** @internal */
export type Rebilling$Outbound = {
  rebillable?: boolean | undefined;
  rebill_status?: string | null | undefined;
  linked_transaction_id?: string | null | undefined;
  linked_transaction_line_id?: string | null | undefined;
};

/** @internal */
export const Rebilling$outboundSchema: z.ZodType<
  Rebilling$Outbound,
  z.ZodTypeDef,
  Rebilling
> = z.object({
  rebillable: z.boolean().optional(),
  rebillStatus: z.nullable(RebillStatus$outboundSchema).optional(),
  linkedTransactionId: z.nullable(z.string()).optional(),
  linkedTransactionLineId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    rebillStatus: "rebill_status",
    linkedTransactionId: "linked_transaction_id",
    linkedTransactionLineId: "linked_transaction_line_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rebilling$ {
  /** @deprecated use `Rebilling$inboundSchema` instead. */
  export const inboundSchema = Rebilling$inboundSchema;
  /** @deprecated use `Rebilling$outboundSchema` instead. */
  export const outboundSchema = Rebilling$outboundSchema;
  /** @deprecated use `Rebilling$Outbound` instead. */
  export type Outbound = Rebilling$Outbound;
}

export function rebillingToJSON(rebilling: Rebilling): string {
  return JSON.stringify(Rebilling$outboundSchema.parse(rebilling));
}

export function rebillingFromJSON(
  jsonString: string,
): SafeParseResult<Rebilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rebilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rebilling' from JSON`,
  );
}
