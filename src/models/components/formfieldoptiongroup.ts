/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SimpleFormFieldOption,
  SimpleFormFieldOption$inboundSchema,
  SimpleFormFieldOption$Outbound,
  SimpleFormFieldOption$outboundSchema,
} from "./simpleformfieldoption.js";

export const FormFieldOptionGroupOptionType = {
  Group: "group",
} as const;
export type FormFieldOptionGroupOptionType = ClosedEnum<
  typeof FormFieldOptionGroupOptionType
>;

export type FormFieldOptionGroup = {
  id?: string | undefined;
  label: string;
  options: Array<SimpleFormFieldOption>;
  optionType: FormFieldOptionGroupOptionType;
};

/** @internal */
export const FormFieldOptionGroupOptionType$inboundSchema: z.ZodNativeEnum<
  typeof FormFieldOptionGroupOptionType
> = z.nativeEnum(FormFieldOptionGroupOptionType);

/** @internal */
export const FormFieldOptionGroupOptionType$outboundSchema: z.ZodNativeEnum<
  typeof FormFieldOptionGroupOptionType
> = FormFieldOptionGroupOptionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldOptionGroupOptionType$ {
  /** @deprecated use `FormFieldOptionGroupOptionType$inboundSchema` instead. */
  export const inboundSchema = FormFieldOptionGroupOptionType$inboundSchema;
  /** @deprecated use `FormFieldOptionGroupOptionType$outboundSchema` instead. */
  export const outboundSchema = FormFieldOptionGroupOptionType$outboundSchema;
}

/** @internal */
export const FormFieldOptionGroup$inboundSchema: z.ZodType<
  FormFieldOptionGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  label: z.string(),
  options: z.array(SimpleFormFieldOption$inboundSchema),
  option_type: FormFieldOptionGroupOptionType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "option_type": "optionType",
  });
});

/** @internal */
export type FormFieldOptionGroup$Outbound = {
  id?: string | undefined;
  label: string;
  options: Array<SimpleFormFieldOption$Outbound>;
  option_type: string;
};

/** @internal */
export const FormFieldOptionGroup$outboundSchema: z.ZodType<
  FormFieldOptionGroup$Outbound,
  z.ZodTypeDef,
  FormFieldOptionGroup
> = z.object({
  id: z.string().optional(),
  label: z.string(),
  options: z.array(SimpleFormFieldOption$outboundSchema),
  optionType: FormFieldOptionGroupOptionType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    optionType: "option_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormFieldOptionGroup$ {
  /** @deprecated use `FormFieldOptionGroup$inboundSchema` instead. */
  export const inboundSchema = FormFieldOptionGroup$inboundSchema;
  /** @deprecated use `FormFieldOptionGroup$outboundSchema` instead. */
  export const outboundSchema = FormFieldOptionGroup$outboundSchema;
  /** @deprecated use `FormFieldOptionGroup$Outbound` instead. */
  export type Outbound = FormFieldOptionGroup$Outbound;
}

export function formFieldOptionGroupToJSON(
  formFieldOptionGroup: FormFieldOptionGroup,
): string {
  return JSON.stringify(
    FormFieldOptionGroup$outboundSchema.parse(formFieldOptionGroup),
  );
}

export function formFieldOptionGroupFromJSON(
  jsonString: string,
): SafeParseResult<FormFieldOptionGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormFieldOptionGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormFieldOptionGroup' from JSON`,
  );
}
