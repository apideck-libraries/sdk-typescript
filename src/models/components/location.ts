/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

/**
 * Status of this location.
 */
export const LocationStatusStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Status of this location.
 */
export type LocationStatusStatus = ClosedEnum<typeof LocationStatusStatus>;

export type Location = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * The business name of the location
   */
  businessName?: string | null | undefined;
  address?: Address | undefined;
  /**
   * Status of this location.
   */
  status?: LocationStatusStatus | null | undefined;
  merchantId?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type LocationInput = {
  /**
   * The name of the location
   */
  name?: string | null | undefined;
  /**
   * The business name of the location
   */
  businessName?: string | null | undefined;
  address?: Address | undefined;
  /**
   * Status of this location.
   */
  status?: LocationStatusStatus | null | undefined;
  merchantId?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const LocationStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof LocationStatusStatus
> = z.nativeEnum(LocationStatusStatus);

/** @internal */
export const LocationStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof LocationStatusStatus
> = LocationStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationStatusStatus$ {
  /** @deprecated use `LocationStatusStatus$inboundSchema` instead. */
  export const inboundSchema = LocationStatusStatus$inboundSchema;
  /** @deprecated use `LocationStatusStatus$outboundSchema` instead. */
  export const outboundSchema = LocationStatusStatus$outboundSchema;
}

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  business_name: z.nullable(z.string()).optional(),
  address: Address$inboundSchema.optional(),
  status: z.nullable(LocationStatusStatus$inboundSchema).optional(),
  merchant_id: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "business_name": "businessName",
    "merchant_id": "merchantId",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Location$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  business_name?: string | null | undefined;
  address?: Address$Outbound | undefined;
  status?: string | null | undefined;
  merchant_id?: string | undefined;
  currency?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  businessName: z.nullable(z.string()).optional(),
  address: Address$outboundSchema.optional(),
  status: z.nullable(LocationStatusStatus$outboundSchema).optional(),
  merchantId: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    businessName: "business_name",
    merchantId: "merchant_id",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

/** @internal */
export const LocationInput$inboundSchema: z.ZodType<
  LocationInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  business_name: z.nullable(z.string()).optional(),
  address: Address$inboundSchema.optional(),
  status: z.nullable(LocationStatusStatus$inboundSchema).optional(),
  merchant_id: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "business_name": "businessName",
    "merchant_id": "merchantId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type LocationInput$Outbound = {
  name?: string | null | undefined;
  business_name?: string | null | undefined;
  address?: Address$Outbound | undefined;
  status?: string | null | undefined;
  merchant_id?: string | undefined;
  currency?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const LocationInput$outboundSchema: z.ZodType<
  LocationInput$Outbound,
  z.ZodTypeDef,
  LocationInput
> = z.object({
  name: z.nullable(z.string()).optional(),
  businessName: z.nullable(z.string()).optional(),
  address: Address$outboundSchema.optional(),
  status: z.nullable(LocationStatusStatus$outboundSchema).optional(),
  merchantId: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    businessName: "business_name",
    merchantId: "merchant_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LocationInput$ {
  /** @deprecated use `LocationInput$inboundSchema` instead. */
  export const inboundSchema = LocationInput$inboundSchema;
  /** @deprecated use `LocationInput$outboundSchema` instead. */
  export const outboundSchema = LocationInput$outboundSchema;
  /** @deprecated use `LocationInput$Outbound` instead. */
  export type Outbound = LocationInput$Outbound;
}
