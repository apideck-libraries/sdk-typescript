/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export const CustomObjectSchemaType = {
  String: "string",
  Number: "number",
  Integer: "integer",
  Boolean: "boolean",
  Date: "date",
  Datetime: "datetime",
  Currency: "currency",
  Email: "email",
  Phone: "phone",
  Reference: "reference",
  Select: "select",
  Multiselect: "multiselect",
} as const;
export type CustomObjectSchemaType = ClosedEnum<typeof CustomObjectSchemaType>;

export type CustomObjectSchemaOptions = {
  value?: string | undefined;
  label?: string | undefined;
};

export type Fields = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  type?: CustomObjectSchemaType | undefined;
  required?: boolean | undefined;
  /**
   * Options for select and multiselect types
   */
  options?: Array<CustomObjectSchemaOptions> | null | undefined;
  /**
   * Default value for the field
   */
  defaultValue?: string | null | undefined;
};

export type CustomObjectSchema = {
  /**
   * The unique identifier of the custom object schema
   */
  id?: string | undefined;
  /**
   * The name of the custom object schema
   */
  name?: string | null | undefined;
  /**
   * The description of the custom object schema
   */
  description?: string | null | undefined;
  /**
   * The fields defined in the schema
   */
  fields?: Array<Fields> | undefined;
  /**
   * Whether the custom object schema is visible in the UI
   */
  visible?: boolean | null | undefined;
  /**
   * Whether the custom object schema is active
   */
  active?: boolean | null | undefined;
  /**
   * The ID of the user who created the custom object schema
   */
  createdBy?: string | null | undefined;
  /**
   * The ID of the user who last updated the custom object schema
   */
  updatedBy?: string | null | undefined;
  /**
   * The timestamp when the custom object schema was last updated
   */
  updatedAt?: string | null | undefined;
  /**
   * The timestamp when the custom object schema was created
   */
  createdAt?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type CustomObjectSchemaInput = {
  /**
   * The name of the custom object schema
   */
  name?: string | null | undefined;
  /**
   * The description of the custom object schema
   */
  description?: string | null | undefined;
  /**
   * The fields defined in the schema
   */
  fields?: Array<Fields> | undefined;
  /**
   * Whether the custom object schema is visible in the UI
   */
  visible?: boolean | null | undefined;
  /**
   * Whether the custom object schema is active
   */
  active?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const CustomObjectSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof CustomObjectSchemaType
> = z.nativeEnum(CustomObjectSchemaType);

/** @internal */
export const CustomObjectSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof CustomObjectSchemaType
> = CustomObjectSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectSchemaType$ {
  /** @deprecated use `CustomObjectSchemaType$inboundSchema` instead. */
  export const inboundSchema = CustomObjectSchemaType$inboundSchema;
  /** @deprecated use `CustomObjectSchemaType$outboundSchema` instead. */
  export const outboundSchema = CustomObjectSchemaType$outboundSchema;
}

/** @internal */
export const CustomObjectSchemaOptions$inboundSchema: z.ZodType<
  CustomObjectSchemaOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
});

/** @internal */
export type CustomObjectSchemaOptions$Outbound = {
  value?: string | undefined;
  label?: string | undefined;
};

/** @internal */
export const CustomObjectSchemaOptions$outboundSchema: z.ZodType<
  CustomObjectSchemaOptions$Outbound,
  z.ZodTypeDef,
  CustomObjectSchemaOptions
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectSchemaOptions$ {
  /** @deprecated use `CustomObjectSchemaOptions$inboundSchema` instead. */
  export const inboundSchema = CustomObjectSchemaOptions$inboundSchema;
  /** @deprecated use `CustomObjectSchemaOptions$outboundSchema` instead. */
  export const outboundSchema = CustomObjectSchemaOptions$outboundSchema;
  /** @deprecated use `CustomObjectSchemaOptions$Outbound` instead. */
  export type Outbound = CustomObjectSchemaOptions$Outbound;
}

export function customObjectSchemaOptionsToJSON(
  customObjectSchemaOptions: CustomObjectSchemaOptions,
): string {
  return JSON.stringify(
    CustomObjectSchemaOptions$outboundSchema.parse(customObjectSchemaOptions),
  );
}

export function customObjectSchemaOptionsFromJSON(
  jsonString: string,
): SafeParseResult<CustomObjectSchemaOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObjectSchemaOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObjectSchemaOptions' from JSON`,
  );
}

/** @internal */
export const Fields$inboundSchema: z.ZodType<Fields, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    description: z.nullable(z.string()).optional(),
    type: CustomObjectSchemaType$inboundSchema.optional(),
    required: z.boolean().optional(),
    options: z.nullable(
      z.array(z.lazy(() => CustomObjectSchemaOptions$inboundSchema)),
    ).optional(),
    default_value: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "default_value": "defaultValue",
    });
  });

/** @internal */
export type Fields$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | null | undefined;
  type?: string | undefined;
  required?: boolean | undefined;
  options?: Array<CustomObjectSchemaOptions$Outbound> | null | undefined;
  default_value?: string | null | undefined;
};

/** @internal */
export const Fields$outboundSchema: z.ZodType<
  Fields$Outbound,
  z.ZodTypeDef,
  Fields
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.nullable(z.string()).optional(),
  type: CustomObjectSchemaType$outboundSchema.optional(),
  required: z.boolean().optional(),
  options: z.nullable(
    z.array(z.lazy(() => CustomObjectSchemaOptions$outboundSchema)),
  ).optional(),
  defaultValue: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields$ {
  /** @deprecated use `Fields$inboundSchema` instead. */
  export const inboundSchema = Fields$inboundSchema;
  /** @deprecated use `Fields$outboundSchema` instead. */
  export const outboundSchema = Fields$outboundSchema;
  /** @deprecated use `Fields$Outbound` instead. */
  export type Outbound = Fields$Outbound;
}

export function fieldsToJSON(fields: Fields): string {
  return JSON.stringify(Fields$outboundSchema.parse(fields));
}

export function fieldsFromJSON(
  jsonString: string,
): SafeParseResult<Fields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields' from JSON`,
  );
}

/** @internal */
export const CustomObjectSchema$inboundSchema: z.ZodType<
  CustomObjectSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => Fields$inboundSchema)).optional(),
  visible: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(z.string()).optional(),
  created_at: z.nullable(z.string()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_by": "createdBy",
    "updated_by": "updatedBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CustomObjectSchema$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  fields?: Array<Fields$Outbound> | undefined;
  visible?: boolean | null | undefined;
  active?: boolean | null | undefined;
  created_by?: string | null | undefined;
  updated_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const CustomObjectSchema$outboundSchema: z.ZodType<
  CustomObjectSchema$Outbound,
  z.ZodTypeDef,
  CustomObjectSchema
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => Fields$outboundSchema)).optional(),
  visible: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.string()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdBy: "created_by",
    updatedBy: "updated_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectSchema$ {
  /** @deprecated use `CustomObjectSchema$inboundSchema` instead. */
  export const inboundSchema = CustomObjectSchema$inboundSchema;
  /** @deprecated use `CustomObjectSchema$outboundSchema` instead. */
  export const outboundSchema = CustomObjectSchema$outboundSchema;
  /** @deprecated use `CustomObjectSchema$Outbound` instead. */
  export type Outbound = CustomObjectSchema$Outbound;
}

export function customObjectSchemaToJSON(
  customObjectSchema: CustomObjectSchema,
): string {
  return JSON.stringify(
    CustomObjectSchema$outboundSchema.parse(customObjectSchema),
  );
}

export function customObjectSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CustomObjectSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObjectSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObjectSchema' from JSON`,
  );
}

/** @internal */
export const CustomObjectSchemaInput$inboundSchema: z.ZodType<
  CustomObjectSchemaInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => Fields$inboundSchema)).optional(),
  visible: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CustomObjectSchemaInput$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  fields?: Array<Fields$Outbound> | undefined;
  visible?: boolean | null | undefined;
  active?: boolean | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const CustomObjectSchemaInput$outboundSchema: z.ZodType<
  CustomObjectSchemaInput$Outbound,
  z.ZodTypeDef,
  CustomObjectSchemaInput
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  fields: z.array(z.lazy(() => Fields$outboundSchema)).optional(),
  visible: z.nullable(z.boolean()).optional(),
  active: z.nullable(z.boolean()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomObjectSchemaInput$ {
  /** @deprecated use `CustomObjectSchemaInput$inboundSchema` instead. */
  export const inboundSchema = CustomObjectSchemaInput$inboundSchema;
  /** @deprecated use `CustomObjectSchemaInput$outboundSchema` instead. */
  export const outboundSchema = CustomObjectSchemaInput$outboundSchema;
  /** @deprecated use `CustomObjectSchemaInput$Outbound` instead. */
  export type Outbound = CustomObjectSchemaInput$Outbound;
}

export function customObjectSchemaInputToJSON(
  customObjectSchemaInput: CustomObjectSchemaInput,
): string {
  return JSON.stringify(
    CustomObjectSchemaInput$outboundSchema.parse(customObjectSchemaInput),
  );
}

export function customObjectSchemaInputFromJSON(
  jsonString: string,
): SafeParseResult<CustomObjectSchemaInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomObjectSchemaInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomObjectSchemaInput' from JSON`,
  );
}
