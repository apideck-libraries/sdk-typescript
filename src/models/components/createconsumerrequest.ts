/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConsumerMetadata,
  ConsumerMetadata$inboundSchema,
  ConsumerMetadata$Outbound,
  ConsumerMetadata$outboundSchema,
} from "./consumermetadata.js";

export type CreateConsumerRequest = {
  /**
   * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
   */
  consumerId: string;
  /**
   * The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
   */
  metadata?: ConsumerMetadata | undefined;
};

/** @internal */
export const CreateConsumerRequest$inboundSchema: z.ZodType<
  CreateConsumerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumer_id: z.string(),
  metadata: ConsumerMetadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "consumer_id": "consumerId",
  });
});

/** @internal */
export type CreateConsumerRequest$Outbound = {
  consumer_id: string;
  metadata?: ConsumerMetadata$Outbound | undefined;
};

/** @internal */
export const CreateConsumerRequest$outboundSchema: z.ZodType<
  CreateConsumerRequest$Outbound,
  z.ZodTypeDef,
  CreateConsumerRequest
> = z.object({
  consumerId: z.string(),
  metadata: ConsumerMetadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    consumerId: "consumer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConsumerRequest$ {
  /** @deprecated use `CreateConsumerRequest$inboundSchema` instead. */
  export const inboundSchema = CreateConsumerRequest$inboundSchema;
  /** @deprecated use `CreateConsumerRequest$outboundSchema` instead. */
  export const outboundSchema = CreateConsumerRequest$outboundSchema;
  /** @deprecated use `CreateConsumerRequest$Outbound` instead. */
  export type Outbound = CreateConsumerRequest$Outbound;
}

export function createConsumerRequestToJSON(
  createConsumerRequest: CreateConsumerRequest,
): string {
  return JSON.stringify(
    CreateConsumerRequest$outboundSchema.parse(createConsumerRequest),
  );
}

export function createConsumerRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateConsumerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConsumerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConsumerRequest' from JSON`,
  );
}
