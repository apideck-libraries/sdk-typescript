/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

/**
 * The first six digits of the card number, known as the Bank Identification Number (BIN).
 */
export const CardBrand = {
  Visa: "visa",
  Mastercard: "mastercard",
  Amex: "amex",
  Discover: "discover",
  DiscoverDiners: "discover-diners",
  Jcb: "jcb",
  ChinaUnionpay: "china-unionpay",
  SquareGiftCard: "square-gift-card",
  SquareCapitalCard: "square-capital-card",
  Interac: "interac",
  Eftpos: "eftpos",
  Felica: "felica",
  Ebt: "ebt",
  Other: "other",
} as const;
/**
 * The first six digits of the card number, known as the Bank Identification Number (BIN).
 */
export type CardBrand = ClosedEnum<typeof CardBrand>;

export const CardType = {
  Credit: "credit",
  Debit: "debit",
  Prepaid: "prepaid",
  Other: "other",
} as const;
export type CardType = ClosedEnum<typeof CardType>;

export const PrepaidType = {
  NonPrepaid: "non-prepaid",
  Prepaid: "prepaid",
  Unknown: "unknown",
} as const;
export type PrepaidType = ClosedEnum<typeof PrepaidType>;

/**
 * A card's non-confidential details.
 */
export type PaymentCard = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The first six digits of the card number, known as the Bank Identification Number (BIN).
   */
  bin?: string | null | undefined;
  /**
   * The first six digits of the card number, known as the Bank Identification Number (BIN).
   */
  cardBrand?: CardBrand | null | undefined;
  cardType?: CardType | null | undefined;
  prepaidType?: PrepaidType | null | undefined;
  cardholderName?: string | null | undefined;
  customerId?: string | null | undefined;
  merchantId?: string | undefined;
  /**
   * The expiration month of the associated card as an integer between 1 and 12.
   */
  expMonth?: number | null | undefined;
  /**
   * The four-digit year of the card's expiration date.
   */
  expYear?: number | null | undefined;
  fingerprint?: string | null | undefined;
  last4?: string | null | undefined;
  /**
   * Indicates whether or not a card can be used for payments.
   */
  enabled?: boolean | null | undefined;
  billingAddress?: Address | undefined;
  /**
   * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
   */
  referenceId?: string | null | undefined;
  version?: string | null | undefined;
};

/**
 * A card's non-confidential details.
 */
export type PaymentCardInput = {
  /**
   * The first six digits of the card number, known as the Bank Identification Number (BIN).
   */
  bin?: string | null | undefined;
  /**
   * The first six digits of the card number, known as the Bank Identification Number (BIN).
   */
  cardBrand?: CardBrand | null | undefined;
  cardType?: CardType | null | undefined;
  prepaidType?: PrepaidType | null | undefined;
  cardholderName?: string | null | undefined;
  customerId?: string | null | undefined;
  merchantId?: string | undefined;
  /**
   * The expiration month of the associated card as an integer between 1 and 12.
   */
  expMonth?: number | null | undefined;
  /**
   * The four-digit year of the card's expiration date.
   */
  expYear?: number | null | undefined;
  fingerprint?: string | null | undefined;
  last4?: string | null | undefined;
  /**
   * Indicates whether or not a card can be used for payments.
   */
  enabled?: boolean | null | undefined;
  billingAddress?: Address | undefined;
  /**
   * An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
   */
  referenceId?: string | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const CardBrand$inboundSchema: z.ZodNativeEnum<typeof CardBrand> = z
  .nativeEnum(CardBrand);

/** @internal */
export const CardBrand$outboundSchema: z.ZodNativeEnum<typeof CardBrand> =
  CardBrand$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardBrand$ {
  /** @deprecated use `CardBrand$inboundSchema` instead. */
  export const inboundSchema = CardBrand$inboundSchema;
  /** @deprecated use `CardBrand$outboundSchema` instead. */
  export const outboundSchema = CardBrand$outboundSchema;
}

/** @internal */
export const CardType$inboundSchema: z.ZodNativeEnum<typeof CardType> = z
  .nativeEnum(CardType);

/** @internal */
export const CardType$outboundSchema: z.ZodNativeEnum<typeof CardType> =
  CardType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardType$ {
  /** @deprecated use `CardType$inboundSchema` instead. */
  export const inboundSchema = CardType$inboundSchema;
  /** @deprecated use `CardType$outboundSchema` instead. */
  export const outboundSchema = CardType$outboundSchema;
}

/** @internal */
export const PrepaidType$inboundSchema: z.ZodNativeEnum<typeof PrepaidType> = z
  .nativeEnum(PrepaidType);

/** @internal */
export const PrepaidType$outboundSchema: z.ZodNativeEnum<typeof PrepaidType> =
  PrepaidType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrepaidType$ {
  /** @deprecated use `PrepaidType$inboundSchema` instead. */
  export const inboundSchema = PrepaidType$inboundSchema;
  /** @deprecated use `PrepaidType$outboundSchema` instead. */
  export const outboundSchema = PrepaidType$outboundSchema;
}

/** @internal */
export const PaymentCard$inboundSchema: z.ZodType<
  PaymentCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  bin: z.nullable(z.string()).optional(),
  card_brand: z.nullable(CardBrand$inboundSchema).optional(),
  card_type: z.nullable(CardType$inboundSchema).optional(),
  prepaid_type: z.nullable(PrepaidType$inboundSchema).optional(),
  cardholder_name: z.nullable(z.string()).optional(),
  customer_id: z.nullable(z.string()).optional(),
  merchant_id: z.string().optional(),
  exp_month: z.nullable(z.number().int()).optional(),
  exp_year: z.nullable(z.number().int()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  last_4: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  billing_address: Address$inboundSchema.optional(),
  reference_id: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "card_brand": "cardBrand",
    "card_type": "cardType",
    "prepaid_type": "prepaidType",
    "cardholder_name": "cardholderName",
    "customer_id": "customerId",
    "merchant_id": "merchantId",
    "exp_month": "expMonth",
    "exp_year": "expYear",
    "last_4": "last4",
    "billing_address": "billingAddress",
    "reference_id": "referenceId",
  });
});

/** @internal */
export type PaymentCard$Outbound = {
  id?: string | undefined;
  bin?: string | null | undefined;
  card_brand?: string | null | undefined;
  card_type?: string | null | undefined;
  prepaid_type?: string | null | undefined;
  cardholder_name?: string | null | undefined;
  customer_id?: string | null | undefined;
  merchant_id?: string | undefined;
  exp_month?: number | null | undefined;
  exp_year?: number | null | undefined;
  fingerprint?: string | null | undefined;
  last_4?: string | null | undefined;
  enabled?: boolean | null | undefined;
  billing_address?: Address$Outbound | undefined;
  reference_id?: string | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const PaymentCard$outboundSchema: z.ZodType<
  PaymentCard$Outbound,
  z.ZodTypeDef,
  PaymentCard
> = z.object({
  id: z.string().optional(),
  bin: z.nullable(z.string()).optional(),
  cardBrand: z.nullable(CardBrand$outboundSchema).optional(),
  cardType: z.nullable(CardType$outboundSchema).optional(),
  prepaidType: z.nullable(PrepaidType$outboundSchema).optional(),
  cardholderName: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  merchantId: z.string().optional(),
  expMonth: z.nullable(z.number().int()).optional(),
  expYear: z.nullable(z.number().int()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  last4: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  billingAddress: Address$outboundSchema.optional(),
  referenceId: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    cardBrand: "card_brand",
    cardType: "card_type",
    prepaidType: "prepaid_type",
    cardholderName: "cardholder_name",
    customerId: "customer_id",
    merchantId: "merchant_id",
    expMonth: "exp_month",
    expYear: "exp_year",
    last4: "last_4",
    billingAddress: "billing_address",
    referenceId: "reference_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentCard$ {
  /** @deprecated use `PaymentCard$inboundSchema` instead. */
  export const inboundSchema = PaymentCard$inboundSchema;
  /** @deprecated use `PaymentCard$outboundSchema` instead. */
  export const outboundSchema = PaymentCard$outboundSchema;
  /** @deprecated use `PaymentCard$Outbound` instead. */
  export type Outbound = PaymentCard$Outbound;
}

/** @internal */
export const PaymentCardInput$inboundSchema: z.ZodType<
  PaymentCardInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  bin: z.nullable(z.string()).optional(),
  card_brand: z.nullable(CardBrand$inboundSchema).optional(),
  card_type: z.nullable(CardType$inboundSchema).optional(),
  prepaid_type: z.nullable(PrepaidType$inboundSchema).optional(),
  cardholder_name: z.nullable(z.string()).optional(),
  customer_id: z.nullable(z.string()).optional(),
  merchant_id: z.string().optional(),
  exp_month: z.nullable(z.number().int()).optional(),
  exp_year: z.nullable(z.number().int()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  last_4: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  billing_address: Address$inboundSchema.optional(),
  reference_id: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "card_brand": "cardBrand",
    "card_type": "cardType",
    "prepaid_type": "prepaidType",
    "cardholder_name": "cardholderName",
    "customer_id": "customerId",
    "merchant_id": "merchantId",
    "exp_month": "expMonth",
    "exp_year": "expYear",
    "last_4": "last4",
    "billing_address": "billingAddress",
    "reference_id": "referenceId",
  });
});

/** @internal */
export type PaymentCardInput$Outbound = {
  bin?: string | null | undefined;
  card_brand?: string | null | undefined;
  card_type?: string | null | undefined;
  prepaid_type?: string | null | undefined;
  cardholder_name?: string | null | undefined;
  customer_id?: string | null | undefined;
  merchant_id?: string | undefined;
  exp_month?: number | null | undefined;
  exp_year?: number | null | undefined;
  fingerprint?: string | null | undefined;
  last_4?: string | null | undefined;
  enabled?: boolean | null | undefined;
  billing_address?: Address$Outbound | undefined;
  reference_id?: string | null | undefined;
  version?: string | null | undefined;
};

/** @internal */
export const PaymentCardInput$outboundSchema: z.ZodType<
  PaymentCardInput$Outbound,
  z.ZodTypeDef,
  PaymentCardInput
> = z.object({
  bin: z.nullable(z.string()).optional(),
  cardBrand: z.nullable(CardBrand$outboundSchema).optional(),
  cardType: z.nullable(CardType$outboundSchema).optional(),
  prepaidType: z.nullable(PrepaidType$outboundSchema).optional(),
  cardholderName: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  merchantId: z.string().optional(),
  expMonth: z.nullable(z.number().int()).optional(),
  expYear: z.nullable(z.number().int()).optional(),
  fingerprint: z.nullable(z.string()).optional(),
  last4: z.nullable(z.string()).optional(),
  enabled: z.nullable(z.boolean()).optional(),
  billingAddress: Address$outboundSchema.optional(),
  referenceId: z.nullable(z.string()).optional(),
  version: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    cardBrand: "card_brand",
    cardType: "card_type",
    prepaidType: "prepaid_type",
    cardholderName: "cardholder_name",
    customerId: "customer_id",
    merchantId: "merchant_id",
    expMonth: "exp_month",
    expYear: "exp_year",
    last4: "last_4",
    billingAddress: "billing_address",
    referenceId: "reference_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentCardInput$ {
  /** @deprecated use `PaymentCardInput$inboundSchema` instead. */
  export const inboundSchema = PaymentCardInput$inboundSchema;
  /** @deprecated use `PaymentCardInput$outboundSchema` instead. */
  export const outboundSchema = PaymentCardInput$outboundSchema;
  /** @deprecated use `PaymentCardInput$Outbound` instead. */
  export type Outbound = PaymentCardInput$Outbound;
}
