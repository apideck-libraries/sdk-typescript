/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AgedReportFilter = {
  /**
   * Filter by customer id
   */
  customerId?: string | undefined;
  /**
   * The cutoff date for considering transactions
   */
  reportAsOfDate?: string | undefined;
  /**
   * Number of periods to split the aged creditors report into
   */
  periodCount?: number | undefined;
  /**
   * Length of each period in days
   */
  periodLength?: number | undefined;
};

/** @internal */
export const AgedReportFilter$inboundSchema: z.ZodType<
  AgedReportFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string().optional(),
  report_as_of_date: z.string().optional(),
  period_count: z.number().int().optional(),
  period_length: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "report_as_of_date": "reportAsOfDate",
    "period_count": "periodCount",
    "period_length": "periodLength",
  });
});

/** @internal */
export type AgedReportFilter$Outbound = {
  customer_id?: string | undefined;
  report_as_of_date?: string | undefined;
  period_count?: number | undefined;
  period_length?: number | undefined;
};

/** @internal */
export const AgedReportFilter$outboundSchema: z.ZodType<
  AgedReportFilter$Outbound,
  z.ZodTypeDef,
  AgedReportFilter
> = z.object({
  customerId: z.string().optional(),
  reportAsOfDate: z.string().optional(),
  periodCount: z.number().int().optional(),
  periodLength: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    reportAsOfDate: "report_as_of_date",
    periodCount: "period_count",
    periodLength: "period_length",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgedReportFilter$ {
  /** @deprecated use `AgedReportFilter$inboundSchema` instead. */
  export const inboundSchema = AgedReportFilter$inboundSchema;
  /** @deprecated use `AgedReportFilter$outboundSchema` instead. */
  export const outboundSchema = AgedReportFilter$outboundSchema;
  /** @deprecated use `AgedReportFilter$Outbound` instead. */
  export type Outbound = AgedReportFilter$Outbound;
}

export function agedReportFilterToJSON(
  agedReportFilter: AgedReportFilter,
): string {
  return JSON.stringify(
    AgedReportFilter$outboundSchema.parse(agedReportFilter),
  );
}

export function agedReportFilterFromJSON(
  jsonString: string,
): SafeParseResult<AgedReportFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgedReportFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgedReportFilter' from JSON`,
  );
}
