/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of projects to filter by
 */
export const ProjectStatus = {
  Active: "active",
  Completed: "completed",
  OnHold: "on_hold",
  Cancelled: "cancelled",
  Draft: "draft",
} as const;
/**
 * Status of projects to filter by
 */
export type ProjectStatus = ClosedEnum<typeof ProjectStatus>;

export type ProjectsFilter = {
  /**
   * Name of project to search for
   */
  name?: string | undefined;
  /**
   * Status of projects to filter by
   */
  status?: ProjectStatus | undefined;
  /**
   * Filter projects by customer ID
   */
  customerId?: string | undefined;
  /**
   * Return projects modified after this date
   */
  updatedSince?: Date | undefined;
};

/** @internal */
export const ProjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof ProjectStatus
> = z.nativeEnum(ProjectStatus);

/** @internal */
export const ProjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof ProjectStatus
> = ProjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectStatus$ {
  /** @deprecated use `ProjectStatus$inboundSchema` instead. */
  export const inboundSchema = ProjectStatus$inboundSchema;
  /** @deprecated use `ProjectStatus$outboundSchema` instead. */
  export const outboundSchema = ProjectStatus$outboundSchema;
}

/** @internal */
export const ProjectsFilter$inboundSchema: z.ZodType<
  ProjectsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  status: ProjectStatus$inboundSchema.optional(),
  customer_id: z.string().optional(),
  updated_since: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type ProjectsFilter$Outbound = {
  name?: string | undefined;
  status?: string | undefined;
  customer_id?: string | undefined;
  updated_since?: string | undefined;
};

/** @internal */
export const ProjectsFilter$outboundSchema: z.ZodType<
  ProjectsFilter$Outbound,
  z.ZodTypeDef,
  ProjectsFilter
> = z.object({
  name: z.string().optional(),
  status: ProjectStatus$outboundSchema.optional(),
  customerId: z.string().optional(),
  updatedSince: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectsFilter$ {
  /** @deprecated use `ProjectsFilter$inboundSchema` instead. */
  export const inboundSchema = ProjectsFilter$inboundSchema;
  /** @deprecated use `ProjectsFilter$outboundSchema` instead. */
  export const outboundSchema = ProjectsFilter$outboundSchema;
  /** @deprecated use `ProjectsFilter$Outbound` instead. */
  export type Outbound = ProjectsFilter$Outbound;
}

export function projectsFilterToJSON(projectsFilter: ProjectsFilter): string {
  return JSON.stringify(ProjectsFilter$outboundSchema.parse(projectsFilter));
}

export function projectsFilterFromJSON(
  jsonString: string,
): SafeParseResult<ProjectsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectsFilter' from JSON`,
  );
}
