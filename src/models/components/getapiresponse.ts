/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Api,
  Api$inboundSchema,
  Api$Outbound,
  Api$outboundSchema,
} from "./api.js";
import {
  Links,
  Links$inboundSchema,
  Links$Outbound,
  Links$outboundSchema,
} from "./links.js";
import {
  Meta,
  Meta$inboundSchema,
  Meta$Outbound,
  Meta$outboundSchema,
} from "./meta.js";

/**
 * Apis
 */
export type GetApiResponse = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  data: Api;
  /**
   * Raw response from the integration when raw=true query param is provided
   */
  raw?: { [k: string]: any } | null | undefined;
  /**
   * Response metadata
   */
  meta?: Meta | undefined;
  /**
   * Links to navigate to previous or next pages through the API
   */
  links?: Links | undefined;
};

/** @internal */
export const GetApiResponse$inboundSchema: z.ZodType<
  GetApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  data: Api$inboundSchema,
  _raw: z.nullable(z.record(z.any())).optional(),
  meta: Meta$inboundSchema.optional(),
  links: Links$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "_raw": "raw",
  });
});

/** @internal */
export type GetApiResponse$Outbound = {
  status_code: number;
  status: string;
  data: Api$Outbound;
  _raw?: { [k: string]: any } | null | undefined;
  meta?: Meta$Outbound | undefined;
  links?: Links$Outbound | undefined;
};

/** @internal */
export const GetApiResponse$outboundSchema: z.ZodType<
  GetApiResponse$Outbound,
  z.ZodTypeDef,
  GetApiResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  data: Api$outboundSchema,
  raw: z.nullable(z.record(z.any())).optional(),
  meta: Meta$outboundSchema.optional(),
  links: Links$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    raw: "_raw",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiResponse$ {
  /** @deprecated use `GetApiResponse$inboundSchema` instead. */
  export const inboundSchema = GetApiResponse$inboundSchema;
  /** @deprecated use `GetApiResponse$outboundSchema` instead. */
  export const outboundSchema = GetApiResponse$outboundSchema;
  /** @deprecated use `GetApiResponse$Outbound` instead. */
  export type Outbound = GetApiResponse$Outbound;
}

export function getApiResponseToJSON(getApiResponse: GetApiResponse): string {
  return JSON.stringify(GetApiResponse$outboundSchema.parse(getApiResponse));
}

export function getApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiResponse' from JSON`,
  );
}
