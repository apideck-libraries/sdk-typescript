/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  CustomField,
  CustomField$inboundSchema,
  CustomField$Outbound,
  CustomField$outboundSchema,
} from "./customfield.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  Email,
  Email$inboundSchema,
  Email$Outbound,
  Email$outboundSchema,
} from "./email.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";
import {
  PhoneNumber,
  PhoneNumber$inboundSchema,
  PhoneNumber$Outbound,
  PhoneNumber$outboundSchema,
} from "./phonenumber.js";

/**
 * The type of website
 */
export const ApplicantType = {
  Primary: "primary",
  Secondary: "secondary",
  Work: "work",
  Personal: "personal",
  Other: "other",
} as const;
/**
 * The type of website
 */
export type ApplicantType = ClosedEnum<typeof ApplicantType>;

export type Websites = {
  /**
   * Unique identifier for the website
   */
  id?: string | null | undefined;
  /**
   * The website URL
   */
  url: string;
  /**
   * The type of website
   */
  type?: ApplicantType | null | undefined;
};

export type SocialLinks = {
  /**
   * Unique identifier of the social link
   */
  id?: string | null | undefined;
  /**
   * URL of the social link, e.g. https://www.twitter.com/apideck
   */
  url: string;
  /**
   * Type of the social link, e.g. twitter
   */
  type?: string | null | undefined;
};

export type Applicant = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The name of an applicant.
   */
  name?: string | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  coverLetter?: string | undefined;
  jobUrl?: string | null | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * Typically a list of previous companies where the contact has worked or schools that the contact has attended
   */
  headline?: string | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  emails?: Array<Email> | undefined;
  customFields?: Array<CustomField> | undefined;
  phoneNumbers?: Array<PhoneNumber> | undefined;
  addresses?: Array<Address> | undefined;
  websites?: Array<Websites> | undefined;
  socialLinks?: Array<SocialLinks> | undefined;
  stageId?: string | undefined;
  recruiterId?: string | undefined;
  coordinatorId?: string | undefined;
  applicationIds?: Array<string> | null | undefined;
  applications?: Array<string> | null | undefined;
  followers?: Array<string> | null | undefined;
  sources?: Array<string> | null | undefined;
  sourceId?: string | undefined;
  confidential?: boolean | undefined;
  anonymized?: boolean | undefined;
  tags?: Array<string> | null | undefined;
  archived?: boolean | null | undefined;
  lastInteractionAt?: Date | null | undefined;
  ownerId?: string | null | undefined;
  sourcedBy?: string | null | undefined;
  cvUrl?: string | undefined;
  recordUrl?: string | null | undefined;
  rejectedAt?: Date | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The user who deleted the object.
   */
  deletedBy?: string | null | undefined;
  /**
   * The time at which the object was deleted.
   */
  deletedAt?: Date | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type ApplicantInput = {
  /**
   * The name of an applicant.
   */
  name?: string | undefined;
  /**
   * The first name of the person.
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the person.
   */
  lastName?: string | null | undefined;
  /**
   * Middle name of the person.
   */
  middleName?: string | null | undefined;
  /**
   * The initials of the person, usually derived from their first, middle, and last names.
   */
  initials?: string | null | undefined;
  /**
   * The date of birth of the person.
   */
  birthday?: RFCDate | null | undefined;
  coverLetter?: string | undefined;
  /**
   * The URL of the photo of a person.
   */
  photoUrl?: string | null | undefined;
  /**
   * Typically a list of previous companies where the contact has worked or schools that the contact has attended
   */
  headline?: string | undefined;
  /**
   * The job title of the person.
   */
  title?: string | null | undefined;
  emails?: Array<Email> | undefined;
  customFields?: Array<CustomField> | undefined;
  phoneNumbers?: Array<PhoneNumber> | undefined;
  addresses?: Array<Address> | undefined;
  websites?: Array<Websites> | undefined;
  socialLinks?: Array<SocialLinks> | undefined;
  stageId?: string | undefined;
  recruiterId?: string | undefined;
  coordinatorId?: string | undefined;
  applicationIds?: Array<string> | null | undefined;
  applications?: Array<string> | null | undefined;
  followers?: Array<string> | null | undefined;
  sources?: Array<string> | null | undefined;
  confidential?: boolean | undefined;
  anonymized?: boolean | undefined;
  tags?: Array<string> | null | undefined;
  archived?: boolean | null | undefined;
  ownerId?: string | null | undefined;
  recordUrl?: string | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const ApplicantType$inboundSchema: z.ZodNativeEnum<
  typeof ApplicantType
> = z.nativeEnum(ApplicantType);

/** @internal */
export const ApplicantType$outboundSchema: z.ZodNativeEnum<
  typeof ApplicantType
> = ApplicantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicantType$ {
  /** @deprecated use `ApplicantType$inboundSchema` instead. */
  export const inboundSchema = ApplicantType$inboundSchema;
  /** @deprecated use `ApplicantType$outboundSchema` instead. */
  export const outboundSchema = ApplicantType$outboundSchema;
}

/** @internal */
export const Websites$inboundSchema: z.ZodType<
  Websites,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ApplicantType$inboundSchema).optional(),
});

/** @internal */
export type Websites$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const Websites$outboundSchema: z.ZodType<
  Websites$Outbound,
  z.ZodTypeDef,
  Websites
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(ApplicantType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Websites$ {
  /** @deprecated use `Websites$inboundSchema` instead. */
  export const inboundSchema = Websites$inboundSchema;
  /** @deprecated use `Websites$outboundSchema` instead. */
  export const outboundSchema = Websites$outboundSchema;
  /** @deprecated use `Websites$Outbound` instead. */
  export type Outbound = Websites$Outbound;
}

/** @internal */
export const SocialLinks$inboundSchema: z.ZodType<
  SocialLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/** @internal */
export type SocialLinks$Outbound = {
  id?: string | null | undefined;
  url: string;
  type?: string | null | undefined;
};

/** @internal */
export const SocialLinks$outboundSchema: z.ZodType<
  SocialLinks$Outbound,
  z.ZodTypeDef,
  SocialLinks
> = z.object({
  id: z.nullable(z.string()).optional(),
  url: z.string(),
  type: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SocialLinks$ {
  /** @deprecated use `SocialLinks$inboundSchema` instead. */
  export const inboundSchema = SocialLinks$inboundSchema;
  /** @deprecated use `SocialLinks$outboundSchema` instead. */
  export const outboundSchema = SocialLinks$outboundSchema;
  /** @deprecated use `SocialLinks$Outbound` instead. */
  export type Outbound = SocialLinks$Outbound;
}

/** @internal */
export const Applicant$inboundSchema: z.ZodType<
  Applicant,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  cover_letter: z.string().optional(),
  job_url: z.nullable(z.string()).optional(),
  photo_url: z.nullable(z.string()).optional(),
  headline: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  emails: z.array(Email$inboundSchema).optional(),
  custom_fields: z.array(CustomField$inboundSchema).optional(),
  phone_numbers: z.array(PhoneNumber$inboundSchema).optional(),
  addresses: z.array(Address$inboundSchema).optional(),
  websites: z.array(z.lazy(() => Websites$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => SocialLinks$inboundSchema)).optional(),
  stage_id: z.string().optional(),
  recruiter_id: z.string().optional(),
  coordinator_id: z.string().optional(),
  application_ids: z.nullable(z.array(z.string())).optional(),
  applications: z.nullable(z.array(z.string())).optional(),
  followers: z.nullable(z.array(z.string())).optional(),
  sources: z.nullable(z.array(z.string())).optional(),
  source_id: z.string().optional(),
  confidential: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  archived: z.nullable(z.boolean()).optional(),
  last_interaction_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  owner_id: z.nullable(z.string()).optional(),
  sourced_by: z.nullable(z.string()).optional(),
  cv_url: z.string().optional(),
  record_url: z.nullable(z.string()).optional(),
  rejected_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  deleted_by: z.nullable(z.string()).optional(),
  deleted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "cover_letter": "coverLetter",
    "job_url": "jobUrl",
    "photo_url": "photoUrl",
    "custom_fields": "customFields",
    "phone_numbers": "phoneNumbers",
    "social_links": "socialLinks",
    "stage_id": "stageId",
    "recruiter_id": "recruiterId",
    "coordinator_id": "coordinatorId",
    "application_ids": "applicationIds",
    "source_id": "sourceId",
    "last_interaction_at": "lastInteractionAt",
    "owner_id": "ownerId",
    "sourced_by": "sourcedBy",
    "cv_url": "cvUrl",
    "record_url": "recordUrl",
    "rejected_at": "rejectedAt",
    "custom_mappings": "customMappings",
    "deleted_by": "deletedBy",
    "deleted_at": "deletedAt",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Applicant$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  cover_letter?: string | undefined;
  job_url?: string | null | undefined;
  photo_url?: string | null | undefined;
  headline?: string | undefined;
  title?: string | null | undefined;
  emails?: Array<Email$Outbound> | undefined;
  custom_fields?: Array<CustomField$Outbound> | undefined;
  phone_numbers?: Array<PhoneNumber$Outbound> | undefined;
  addresses?: Array<Address$Outbound> | undefined;
  websites?: Array<Websites$Outbound> | undefined;
  social_links?: Array<SocialLinks$Outbound> | undefined;
  stage_id?: string | undefined;
  recruiter_id?: string | undefined;
  coordinator_id?: string | undefined;
  application_ids?: Array<string> | null | undefined;
  applications?: Array<string> | null | undefined;
  followers?: Array<string> | null | undefined;
  sources?: Array<string> | null | undefined;
  source_id?: string | undefined;
  confidential?: boolean | undefined;
  anonymized?: boolean | undefined;
  tags?: Array<string> | null | undefined;
  archived?: boolean | null | undefined;
  last_interaction_at?: string | null | undefined;
  owner_id?: string | null | undefined;
  sourced_by?: string | null | undefined;
  cv_url?: string | undefined;
  record_url?: string | null | undefined;
  rejected_at?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  deleted?: boolean | null | undefined;
  deleted_by?: string | null | undefined;
  deleted_at?: string | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const Applicant$outboundSchema: z.ZodType<
  Applicant$Outbound,
  z.ZodTypeDef,
  Applicant
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  coverLetter: z.string().optional(),
  jobUrl: z.nullable(z.string()).optional(),
  photoUrl: z.nullable(z.string()).optional(),
  headline: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  emails: z.array(Email$outboundSchema).optional(),
  customFields: z.array(CustomField$outboundSchema).optional(),
  phoneNumbers: z.array(PhoneNumber$outboundSchema).optional(),
  addresses: z.array(Address$outboundSchema).optional(),
  websites: z.array(z.lazy(() => Websites$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => SocialLinks$outboundSchema)).optional(),
  stageId: z.string().optional(),
  recruiterId: z.string().optional(),
  coordinatorId: z.string().optional(),
  applicationIds: z.nullable(z.array(z.string())).optional(),
  applications: z.nullable(z.array(z.string())).optional(),
  followers: z.nullable(z.array(z.string())).optional(),
  sources: z.nullable(z.array(z.string())).optional(),
  sourceId: z.string().optional(),
  confidential: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  archived: z.nullable(z.boolean()).optional(),
  lastInteractionAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  ownerId: z.nullable(z.string()).optional(),
  sourcedBy: z.nullable(z.string()).optional(),
  cvUrl: z.string().optional(),
  recordUrl: z.nullable(z.string()).optional(),
  rejectedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  deletedBy: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    coverLetter: "cover_letter",
    jobUrl: "job_url",
    photoUrl: "photo_url",
    customFields: "custom_fields",
    phoneNumbers: "phone_numbers",
    socialLinks: "social_links",
    stageId: "stage_id",
    recruiterId: "recruiter_id",
    coordinatorId: "coordinator_id",
    applicationIds: "application_ids",
    sourceId: "source_id",
    lastInteractionAt: "last_interaction_at",
    ownerId: "owner_id",
    sourcedBy: "sourced_by",
    cvUrl: "cv_url",
    recordUrl: "record_url",
    rejectedAt: "rejected_at",
    customMappings: "custom_mappings",
    deletedBy: "deleted_by",
    deletedAt: "deleted_at",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Applicant$ {
  /** @deprecated use `Applicant$inboundSchema` instead. */
  export const inboundSchema = Applicant$inboundSchema;
  /** @deprecated use `Applicant$outboundSchema` instead. */
  export const outboundSchema = Applicant$outboundSchema;
  /** @deprecated use `Applicant$Outbound` instead. */
  export type Outbound = Applicant$Outbound;
}

/** @internal */
export const ApplicantInput$inboundSchema: z.ZodType<
  ApplicantInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_name: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  cover_letter: z.string().optional(),
  photo_url: z.nullable(z.string()).optional(),
  headline: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  emails: z.array(Email$inboundSchema).optional(),
  custom_fields: z.array(CustomField$inboundSchema).optional(),
  phone_numbers: z.array(PhoneNumber$inboundSchema).optional(),
  addresses: z.array(Address$inboundSchema).optional(),
  websites: z.array(z.lazy(() => Websites$inboundSchema)).optional(),
  social_links: z.array(z.lazy(() => SocialLinks$inboundSchema)).optional(),
  stage_id: z.string().optional(),
  recruiter_id: z.string().optional(),
  coordinator_id: z.string().optional(),
  application_ids: z.nullable(z.array(z.string())).optional(),
  applications: z.nullable(z.array(z.string())).optional(),
  followers: z.nullable(z.array(z.string())).optional(),
  sources: z.nullable(z.array(z.string())).optional(),
  confidential: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  archived: z.nullable(z.boolean()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  record_url: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_name": "middleName",
    "cover_letter": "coverLetter",
    "photo_url": "photoUrl",
    "custom_fields": "customFields",
    "phone_numbers": "phoneNumbers",
    "social_links": "socialLinks",
    "stage_id": "stageId",
    "recruiter_id": "recruiterId",
    "coordinator_id": "coordinatorId",
    "application_ids": "applicationIds",
    "owner_id": "ownerId",
    "record_url": "recordUrl",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ApplicantInput$Outbound = {
  name?: string | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_name?: string | null | undefined;
  initials?: string | null | undefined;
  birthday?: string | null | undefined;
  cover_letter?: string | undefined;
  photo_url?: string | null | undefined;
  headline?: string | undefined;
  title?: string | null | undefined;
  emails?: Array<Email$Outbound> | undefined;
  custom_fields?: Array<CustomField$Outbound> | undefined;
  phone_numbers?: Array<PhoneNumber$Outbound> | undefined;
  addresses?: Array<Address$Outbound> | undefined;
  websites?: Array<Websites$Outbound> | undefined;
  social_links?: Array<SocialLinks$Outbound> | undefined;
  stage_id?: string | undefined;
  recruiter_id?: string | undefined;
  coordinator_id?: string | undefined;
  application_ids?: Array<string> | null | undefined;
  applications?: Array<string> | null | undefined;
  followers?: Array<string> | null | undefined;
  sources?: Array<string> | null | undefined;
  confidential?: boolean | undefined;
  anonymized?: boolean | undefined;
  tags?: Array<string> | null | undefined;
  archived?: boolean | null | undefined;
  owner_id?: string | null | undefined;
  record_url?: string | null | undefined;
  deleted?: boolean | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const ApplicantInput$outboundSchema: z.ZodType<
  ApplicantInput$Outbound,
  z.ZodTypeDef,
  ApplicantInput
> = z.object({
  name: z.string().optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  initials: z.nullable(z.string()).optional(),
  birthday: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  coverLetter: z.string().optional(),
  photoUrl: z.nullable(z.string()).optional(),
  headline: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  emails: z.array(Email$outboundSchema).optional(),
  customFields: z.array(CustomField$outboundSchema).optional(),
  phoneNumbers: z.array(PhoneNumber$outboundSchema).optional(),
  addresses: z.array(Address$outboundSchema).optional(),
  websites: z.array(z.lazy(() => Websites$outboundSchema)).optional(),
  socialLinks: z.array(z.lazy(() => SocialLinks$outboundSchema)).optional(),
  stageId: z.string().optional(),
  recruiterId: z.string().optional(),
  coordinatorId: z.string().optional(),
  applicationIds: z.nullable(z.array(z.string())).optional(),
  applications: z.nullable(z.array(z.string())).optional(),
  followers: z.nullable(z.array(z.string())).optional(),
  sources: z.nullable(z.array(z.string())).optional(),
  confidential: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  archived: z.nullable(z.boolean()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  recordUrl: z.nullable(z.string()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    middleName: "middle_name",
    coverLetter: "cover_letter",
    photoUrl: "photo_url",
    customFields: "custom_fields",
    phoneNumbers: "phone_numbers",
    socialLinks: "social_links",
    stageId: "stage_id",
    recruiterId: "recruiter_id",
    coordinatorId: "coordinator_id",
    applicationIds: "application_ids",
    ownerId: "owner_id",
    recordUrl: "record_url",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicantInput$ {
  /** @deprecated use `ApplicantInput$inboundSchema` instead. */
  export const inboundSchema = ApplicantInput$inboundSchema;
  /** @deprecated use `ApplicantInput$outboundSchema` instead. */
  export const outboundSchema = ApplicantInput$outboundSchema;
  /** @deprecated use `ApplicantInput$Outbound` instead. */
  export type Outbound = ApplicantInput$Outbound;
}
