/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomField,
  CustomField$inboundSchema,
  CustomField$Outbound,
  CustomField$outboundSchema,
} from "./customfield.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";

/**
 * Type of the bank account.
 */
export const BankAccountType = {
  Bank: "bank",
  CreditCard: "credit_card",
} as const;
/**
 * Type of the bank account.
 */
export type BankAccountType = ClosedEnum<typeof BankAccountType>;

/**
 * Current status of the bank feed.
 */
export const FeedStatus = {
  Pending: "pending",
  Rejected: "rejected",
} as const;
/**
 * Current status of the bank feed.
 */
export type FeedStatus = ClosedEnum<typeof FeedStatus>;

export type BankFeedAccount = {
  /**
   * A unique identifier for an object.
   */
  id: string;
  /**
   * Type of the bank account.
   */
  bankAccountType?: BankAccountType | undefined;
  /**
   * The source account's unique identifier.
   */
  sourceAccountId?: string | undefined;
  /**
   * The target account's unique identifier in the accounting connector.
   */
  targetAccountId?: string | undefined;
  /**
   * Name associated with the target account.
   */
  targetAccountName?: string | undefined;
  /**
   * Account number of the destination bank account.
   */
  targetAccountNumber?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * Current status of the bank feed.
   */
  feedStatus?: FeedStatus | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  customFields?: Array<CustomField> | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
};

export type BankFeedAccountInput = {
  /**
   * Type of the bank account.
   */
  bankAccountType?: BankAccountType | undefined;
  /**
   * The source account's unique identifier.
   */
  sourceAccountId?: string | undefined;
  /**
   * The target account's unique identifier in the accounting connector.
   */
  targetAccountId?: string | undefined;
  /**
   * Name associated with the target account.
   */
  targetAccountName?: string | undefined;
  /**
   * Account number of the destination bank account.
   */
  targetAccountNumber?: string | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * Current status of the bank feed.
   */
  feedStatus?: FeedStatus | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
  customFields?: Array<CustomField> | undefined;
};

/** @internal */
export const BankAccountType$inboundSchema: z.ZodNativeEnum<
  typeof BankAccountType
> = z.nativeEnum(BankAccountType);

/** @internal */
export const BankAccountType$outboundSchema: z.ZodNativeEnum<
  typeof BankAccountType
> = BankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountType$ {
  /** @deprecated use `BankAccountType$inboundSchema` instead. */
  export const inboundSchema = BankAccountType$inboundSchema;
  /** @deprecated use `BankAccountType$outboundSchema` instead. */
  export const outboundSchema = BankAccountType$outboundSchema;
}

/** @internal */
export const FeedStatus$inboundSchema: z.ZodNativeEnum<typeof FeedStatus> = z
  .nativeEnum(FeedStatus);

/** @internal */
export const FeedStatus$outboundSchema: z.ZodNativeEnum<typeof FeedStatus> =
  FeedStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedStatus$ {
  /** @deprecated use `FeedStatus$inboundSchema` instead. */
  export const inboundSchema = FeedStatus$inboundSchema;
  /** @deprecated use `FeedStatus$outboundSchema` instead. */
  export const outboundSchema = FeedStatus$outboundSchema;
}

/** @internal */
export const BankFeedAccount$inboundSchema: z.ZodType<
  BankFeedAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  bank_account_type: BankAccountType$inboundSchema.optional(),
  source_account_id: z.string().optional(),
  target_account_id: z.string().optional(),
  target_account_name: z.string().optional(),
  target_account_number: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  feed_status: FeedStatus$inboundSchema.optional(),
  country: z.nullable(z.string()).optional(),
  custom_fields: z.array(CustomField$inboundSchema).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_account_type": "bankAccountType",
    "source_account_id": "sourceAccountId",
    "target_account_id": "targetAccountId",
    "target_account_name": "targetAccountName",
    "target_account_number": "targetAccountNumber",
    "feed_status": "feedStatus",
    "custom_fields": "customFields",
    "custom_mappings": "customMappings",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
  });
});

/** @internal */
export type BankFeedAccount$Outbound = {
  id: string;
  bank_account_type?: string | undefined;
  source_account_id?: string | undefined;
  target_account_id?: string | undefined;
  target_account_name?: string | undefined;
  target_account_number?: string | undefined;
  currency?: string | null | undefined;
  feed_status?: string | undefined;
  country?: string | null | undefined;
  custom_fields?: Array<CustomField$Outbound> | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  created_at?: string | null | undefined;
  updated_at?: string | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
};

/** @internal */
export const BankFeedAccount$outboundSchema: z.ZodType<
  BankFeedAccount$Outbound,
  z.ZodTypeDef,
  BankFeedAccount
> = z.object({
  id: z.string(),
  bankAccountType: BankAccountType$outboundSchema.optional(),
  sourceAccountId: z.string().optional(),
  targetAccountId: z.string().optional(),
  targetAccountName: z.string().optional(),
  targetAccountNumber: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  feedStatus: FeedStatus$outboundSchema.optional(),
  country: z.nullable(z.string()).optional(),
  customFields: z.array(CustomField$outboundSchema).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    bankAccountType: "bank_account_type",
    sourceAccountId: "source_account_id",
    targetAccountId: "target_account_id",
    targetAccountName: "target_account_name",
    targetAccountNumber: "target_account_number",
    feedStatus: "feed_status",
    customFields: "custom_fields",
    customMappings: "custom_mappings",
    createdAt: "created_at",
    updatedAt: "updated_at",
    updatedBy: "updated_by",
    createdBy: "created_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankFeedAccount$ {
  /** @deprecated use `BankFeedAccount$inboundSchema` instead. */
  export const inboundSchema = BankFeedAccount$inboundSchema;
  /** @deprecated use `BankFeedAccount$outboundSchema` instead. */
  export const outboundSchema = BankFeedAccount$outboundSchema;
  /** @deprecated use `BankFeedAccount$Outbound` instead. */
  export type Outbound = BankFeedAccount$Outbound;
}

export function bankFeedAccountToJSON(
  bankFeedAccount: BankFeedAccount,
): string {
  return JSON.stringify(BankFeedAccount$outboundSchema.parse(bankFeedAccount));
}

export function bankFeedAccountFromJSON(
  jsonString: string,
): SafeParseResult<BankFeedAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankFeedAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankFeedAccount' from JSON`,
  );
}

/** @internal */
export const BankFeedAccountInput$inboundSchema: z.ZodType<
  BankFeedAccountInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_account_type: BankAccountType$inboundSchema.optional(),
  source_account_id: z.string().optional(),
  target_account_id: z.string().optional(),
  target_account_name: z.string().optional(),
  target_account_number: z.string().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  feed_status: FeedStatus$inboundSchema.optional(),
  country: z.nullable(z.string()).optional(),
  custom_fields: z.array(CustomField$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_account_type": "bankAccountType",
    "source_account_id": "sourceAccountId",
    "target_account_id": "targetAccountId",
    "target_account_name": "targetAccountName",
    "target_account_number": "targetAccountNumber",
    "feed_status": "feedStatus",
    "custom_fields": "customFields",
  });
});

/** @internal */
export type BankFeedAccountInput$Outbound = {
  bank_account_type?: string | undefined;
  source_account_id?: string | undefined;
  target_account_id?: string | undefined;
  target_account_name?: string | undefined;
  target_account_number?: string | undefined;
  currency?: string | null | undefined;
  feed_status?: string | undefined;
  country?: string | null | undefined;
  custom_fields?: Array<CustomField$Outbound> | undefined;
};

/** @internal */
export const BankFeedAccountInput$outboundSchema: z.ZodType<
  BankFeedAccountInput$Outbound,
  z.ZodTypeDef,
  BankFeedAccountInput
> = z.object({
  bankAccountType: BankAccountType$outboundSchema.optional(),
  sourceAccountId: z.string().optional(),
  targetAccountId: z.string().optional(),
  targetAccountName: z.string().optional(),
  targetAccountNumber: z.string().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  feedStatus: FeedStatus$outboundSchema.optional(),
  country: z.nullable(z.string()).optional(),
  customFields: z.array(CustomField$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    bankAccountType: "bank_account_type",
    sourceAccountId: "source_account_id",
    targetAccountId: "target_account_id",
    targetAccountName: "target_account_name",
    targetAccountNumber: "target_account_number",
    feedStatus: "feed_status",
    customFields: "custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankFeedAccountInput$ {
  /** @deprecated use `BankFeedAccountInput$inboundSchema` instead. */
  export const inboundSchema = BankFeedAccountInput$inboundSchema;
  /** @deprecated use `BankFeedAccountInput$outboundSchema` instead. */
  export const outboundSchema = BankFeedAccountInput$outboundSchema;
  /** @deprecated use `BankFeedAccountInput$Outbound` instead. */
  export type Outbound = BankFeedAccountInput$Outbound;
}

export function bankFeedAccountInputToJSON(
  bankFeedAccountInput: BankFeedAccountInput,
): string {
  return JSON.stringify(
    BankFeedAccountInput$outboundSchema.parse(bankFeedAccountInput),
  );
}

export function bankFeedAccountInputFromJSON(
  jsonString: string,
): SafeParseResult<BankFeedAccountInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankFeedAccountInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankFeedAccountInput' from JSON`,
  );
}
