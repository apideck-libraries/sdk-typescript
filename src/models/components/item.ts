/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export const ProductType = {
  Regular: "regular",
  Other: "other",
} as const;
export type ProductType = ClosedEnum<typeof ProductType>;

export const PricingType = {
  Fixed: "fixed",
  Variable: "variable",
  PerUnit: "per_unit",
  Other: "other",
} as const;
export type PricingType = ClosedEnum<typeof PricingType>;

export type ItemCategories = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  name?: string | undefined;
  imageIds?: Array<string> | undefined;
};

export type ItemOptions = {
  id?: string | undefined;
  name?: string | undefined;
  attributeId?: string | undefined;
};

export const ItemPricingType = {
  Fixed: "fixed",
  Variable: "variable",
  Other: "other",
} as const;
export type ItemPricingType = ClosedEnum<typeof ItemPricingType>;

export type Variations = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  name?: string | undefined;
  sku?: string | undefined;
  /**
   * A unique identifier for an object.
   */
  itemId?: string | undefined;
  sequence?: number | null | undefined;
  pricingType?: ItemPricingType | undefined;
  priceAmount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  priceCurrency?: Currency | null | undefined;
  stockable?: boolean | undefined;
  presentAtAllLocations?: boolean | undefined;
  /**
   * The user who last updated the object.
   */
  version?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
};

export type ModifierGroups = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
};

export type Item = {
  id?: string | undefined;
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  name: string;
  description?: string | undefined;
  abbreviation?: string | undefined;
  productType?: ProductType | undefined;
  priceAmount?: number | undefined;
  pricingType?: PricingType | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  priceCurrency?: Currency | null | undefined;
  cost?: number | undefined;
  /**
   * A list of Tax IDs for the product.
   */
  taxIds?: Array<string> | undefined;
  /**
   * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
   */
  isRevenue?: boolean | undefined;
  useDefaultTaxRates?: boolean | undefined;
  /**
   * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
   */
  absentAtLocationIds?: Array<string> | undefined;
  presentAtAllLocations?: boolean | undefined;
  availableForPickup?: boolean | undefined;
  availableOnline?: boolean | undefined;
  /**
   * SKU of the item
   */
  sku?: string | undefined;
  /**
   * Product code, e.g. UPC or EAN
   */
  code?: string | undefined;
  categories?: Array<ItemCategories> | undefined;
  /**
   * List of options pertaining to this item's attribute variation
   */
  options?: Array<ItemOptions> | undefined;
  variations?: Array<Variations> | undefined;
  modifierGroups?: Array<ModifierGroups> | undefined;
  available?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  /**
   * The user who last updated the object.
   */
  version?: string | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type ItemCategoriesInput = {
  name?: string | undefined;
  imageIds?: Array<string> | undefined;
};

export type ItemVariations = {
  name?: string | undefined;
  sku?: string | undefined;
  sequence?: number | null | undefined;
  pricingType?: ItemPricingType | undefined;
  priceAmount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  priceCurrency?: Currency | null | undefined;
  stockable?: boolean | undefined;
  presentAtAllLocations?: boolean | undefined;
};

export type ItemModifierGroups = {};

export type ItemInput = {
  id?: string | undefined;
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  name: string;
  description?: string | undefined;
  abbreviation?: string | undefined;
  productType?: ProductType | undefined;
  priceAmount?: number | undefined;
  pricingType?: PricingType | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  priceCurrency?: Currency | null | undefined;
  cost?: number | undefined;
  /**
   * A list of Tax IDs for the product.
   */
  taxIds?: Array<string> | undefined;
  /**
   * True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
   */
  isRevenue?: boolean | undefined;
  useDefaultTaxRates?: boolean | undefined;
  /**
   * A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
   */
  absentAtLocationIds?: Array<string> | undefined;
  presentAtAllLocations?: boolean | undefined;
  availableForPickup?: boolean | undefined;
  availableOnline?: boolean | undefined;
  /**
   * SKU of the item
   */
  sku?: string | undefined;
  /**
   * Product code, e.g. UPC or EAN
   */
  code?: string | undefined;
  categories?: Array<ItemCategoriesInput> | undefined;
  /**
   * List of options pertaining to this item's attribute variation
   */
  options?: Array<ItemOptions> | undefined;
  variations?: Array<ItemVariations> | undefined;
  modifierGroups?: Array<ItemModifierGroups> | undefined;
  available?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const ProductType$inboundSchema: z.ZodNativeEnum<typeof ProductType> = z
  .nativeEnum(ProductType);

/** @internal */
export const ProductType$outboundSchema: z.ZodNativeEnum<typeof ProductType> =
  ProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductType$ {
  /** @deprecated use `ProductType$inboundSchema` instead. */
  export const inboundSchema = ProductType$inboundSchema;
  /** @deprecated use `ProductType$outboundSchema` instead. */
  export const outboundSchema = ProductType$outboundSchema;
}

/** @internal */
export const PricingType$inboundSchema: z.ZodNativeEnum<typeof PricingType> = z
  .nativeEnum(PricingType);

/** @internal */
export const PricingType$outboundSchema: z.ZodNativeEnum<typeof PricingType> =
  PricingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PricingType$ {
  /** @deprecated use `PricingType$inboundSchema` instead. */
  export const inboundSchema = PricingType$inboundSchema;
  /** @deprecated use `PricingType$outboundSchema` instead. */
  export const outboundSchema = PricingType$outboundSchema;
}

/** @internal */
export const ItemCategories$inboundSchema: z.ZodType<
  ItemCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  image_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_ids": "imageIds",
  });
});

/** @internal */
export type ItemCategories$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  image_ids?: Array<string> | undefined;
};

/** @internal */
export const ItemCategories$outboundSchema: z.ZodType<
  ItemCategories$Outbound,
  z.ZodTypeDef,
  ItemCategories
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  imageIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageIds: "image_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemCategories$ {
  /** @deprecated use `ItemCategories$inboundSchema` instead. */
  export const inboundSchema = ItemCategories$inboundSchema;
  /** @deprecated use `ItemCategories$outboundSchema` instead. */
  export const outboundSchema = ItemCategories$outboundSchema;
  /** @deprecated use `ItemCategories$Outbound` instead. */
  export type Outbound = ItemCategories$Outbound;
}

/** @internal */
export const ItemOptions$inboundSchema: z.ZodType<
  ItemOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  attribute_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "attribute_id": "attributeId",
  });
});

/** @internal */
export type ItemOptions$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  attribute_id?: string | undefined;
};

/** @internal */
export const ItemOptions$outboundSchema: z.ZodType<
  ItemOptions$Outbound,
  z.ZodTypeDef,
  ItemOptions
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  attributeId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    attributeId: "attribute_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemOptions$ {
  /** @deprecated use `ItemOptions$inboundSchema` instead. */
  export const inboundSchema = ItemOptions$inboundSchema;
  /** @deprecated use `ItemOptions$outboundSchema` instead. */
  export const outboundSchema = ItemOptions$outboundSchema;
  /** @deprecated use `ItemOptions$Outbound` instead. */
  export type Outbound = ItemOptions$Outbound;
}

/** @internal */
export const ItemPricingType$inboundSchema: z.ZodNativeEnum<
  typeof ItemPricingType
> = z.nativeEnum(ItemPricingType);

/** @internal */
export const ItemPricingType$outboundSchema: z.ZodNativeEnum<
  typeof ItemPricingType
> = ItemPricingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemPricingType$ {
  /** @deprecated use `ItemPricingType$inboundSchema` instead. */
  export const inboundSchema = ItemPricingType$inboundSchema;
  /** @deprecated use `ItemPricingType$outboundSchema` instead. */
  export const outboundSchema = ItemPricingType$outboundSchema;
}

/** @internal */
export const Variations$inboundSchema: z.ZodType<
  Variations,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  sku: z.string().optional(),
  item_id: z.string().optional(),
  sequence: z.nullable(z.number()).optional(),
  pricing_type: ItemPricingType$inboundSchema.optional(),
  price_amount: z.number().optional(),
  price_currency: z.nullable(Currency$inboundSchema).optional(),
  stockable: z.boolean().optional(),
  present_at_all_locations: z.boolean().optional(),
  version: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "item_id": "itemId",
    "pricing_type": "pricingType",
    "price_amount": "priceAmount",
    "price_currency": "priceCurrency",
    "present_at_all_locations": "presentAtAllLocations",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type Variations$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  sku?: string | undefined;
  item_id?: string | undefined;
  sequence?: number | null | undefined;
  pricing_type?: string | undefined;
  price_amount?: number | undefined;
  price_currency?: string | null | undefined;
  stockable?: boolean | undefined;
  present_at_all_locations?: boolean | undefined;
  version?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
};

/** @internal */
export const Variations$outboundSchema: z.ZodType<
  Variations$Outbound,
  z.ZodTypeDef,
  Variations
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  sku: z.string().optional(),
  itemId: z.string().optional(),
  sequence: z.nullable(z.number()).optional(),
  pricingType: ItemPricingType$outboundSchema.optional(),
  priceAmount: z.number().optional(),
  priceCurrency: z.nullable(Currency$outboundSchema).optional(),
  stockable: z.boolean().optional(),
  presentAtAllLocations: z.boolean().optional(),
  version: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    itemId: "item_id",
    pricingType: "pricing_type",
    priceAmount: "price_amount",
    priceCurrency: "price_currency",
    presentAtAllLocations: "present_at_all_locations",
    updatedAt: "updated_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variations$ {
  /** @deprecated use `Variations$inboundSchema` instead. */
  export const inboundSchema = Variations$inboundSchema;
  /** @deprecated use `Variations$outboundSchema` instead. */
  export const outboundSchema = Variations$outboundSchema;
  /** @deprecated use `Variations$Outbound` instead. */
  export type Outbound = Variations$Outbound;
}

/** @internal */
export const ModifierGroups$inboundSchema: z.ZodType<
  ModifierGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type ModifierGroups$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const ModifierGroups$outboundSchema: z.ZodType<
  ModifierGroups$Outbound,
  z.ZodTypeDef,
  ModifierGroups
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifierGroups$ {
  /** @deprecated use `ModifierGroups$inboundSchema` instead. */
  export const inboundSchema = ModifierGroups$inboundSchema;
  /** @deprecated use `ModifierGroups$outboundSchema` instead. */
  export const outboundSchema = ModifierGroups$outboundSchema;
  /** @deprecated use `ModifierGroups$Outbound` instead. */
  export type Outbound = ModifierGroups$Outbound;
}

/** @internal */
export const Item$inboundSchema: z.ZodType<Item, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    idempotency_key: z.string().optional(),
    name: z.string(),
    description: z.string().optional(),
    abbreviation: z.string().optional(),
    product_type: ProductType$inboundSchema.optional(),
    price_amount: z.number().optional(),
    pricing_type: PricingType$inboundSchema.optional(),
    price_currency: z.nullable(Currency$inboundSchema).optional(),
    cost: z.number().optional(),
    tax_ids: z.array(z.string()).optional(),
    is_revenue: z.boolean().optional(),
    use_default_tax_rates: z.boolean().optional(),
    absent_at_location_ids: z.array(z.string()).optional(),
    present_at_all_locations: z.boolean().optional(),
    available_for_pickup: z.boolean().optional(),
    available_online: z.boolean().optional(),
    sku: z.string().optional(),
    code: z.string().optional(),
    categories: z.array(z.lazy(() => ItemCategories$inboundSchema)).optional(),
    options: z.array(z.lazy(() => ItemOptions$inboundSchema)).optional(),
    variations: z.array(z.lazy(() => Variations$inboundSchema)).optional(),
    modifier_groups: z.array(z.lazy(() => ModifierGroups$inboundSchema))
      .optional(),
    available: z.nullable(z.boolean()).optional(),
    hidden: z.nullable(z.boolean()).optional(),
    version: z.nullable(z.string()).optional(),
    custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
    deleted: z.nullable(z.boolean()).optional(),
    updated_by: z.nullable(z.string()).optional(),
    created_by: z.nullable(z.string()).optional(),
    updated_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    created_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    pass_through: z.array(PassThroughBody$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency_key": "idempotencyKey",
      "product_type": "productType",
      "price_amount": "priceAmount",
      "pricing_type": "pricingType",
      "price_currency": "priceCurrency",
      "tax_ids": "taxIds",
      "is_revenue": "isRevenue",
      "use_default_tax_rates": "useDefaultTaxRates",
      "absent_at_location_ids": "absentAtLocationIds",
      "present_at_all_locations": "presentAtAllLocations",
      "available_for_pickup": "availableForPickup",
      "available_online": "availableOnline",
      "modifier_groups": "modifierGroups",
      "custom_mappings": "customMappings",
      "updated_by": "updatedBy",
      "created_by": "createdBy",
      "updated_at": "updatedAt",
      "created_at": "createdAt",
      "pass_through": "passThrough",
    });
  });

/** @internal */
export type Item$Outbound = {
  id?: string | undefined;
  idempotency_key?: string | undefined;
  name: string;
  description?: string | undefined;
  abbreviation?: string | undefined;
  product_type?: string | undefined;
  price_amount?: number | undefined;
  pricing_type?: string | undefined;
  price_currency?: string | null | undefined;
  cost?: number | undefined;
  tax_ids?: Array<string> | undefined;
  is_revenue?: boolean | undefined;
  use_default_tax_rates?: boolean | undefined;
  absent_at_location_ids?: Array<string> | undefined;
  present_at_all_locations?: boolean | undefined;
  available_for_pickup?: boolean | undefined;
  available_online?: boolean | undefined;
  sku?: string | undefined;
  code?: string | undefined;
  categories?: Array<ItemCategories$Outbound> | undefined;
  options?: Array<ItemOptions$Outbound> | undefined;
  variations?: Array<Variations$Outbound> | undefined;
  modifier_groups?: Array<ModifierGroups$Outbound> | undefined;
  available?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  version?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  deleted?: boolean | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const Item$outboundSchema: z.ZodType<Item$Outbound, z.ZodTypeDef, Item> =
  z.object({
    id: z.string().optional(),
    idempotencyKey: z.string().optional(),
    name: z.string(),
    description: z.string().optional(),
    abbreviation: z.string().optional(),
    productType: ProductType$outboundSchema.optional(),
    priceAmount: z.number().optional(),
    pricingType: PricingType$outboundSchema.optional(),
    priceCurrency: z.nullable(Currency$outboundSchema).optional(),
    cost: z.number().optional(),
    taxIds: z.array(z.string()).optional(),
    isRevenue: z.boolean().optional(),
    useDefaultTaxRates: z.boolean().optional(),
    absentAtLocationIds: z.array(z.string()).optional(),
    presentAtAllLocations: z.boolean().optional(),
    availableForPickup: z.boolean().optional(),
    availableOnline: z.boolean().optional(),
    sku: z.string().optional(),
    code: z.string().optional(),
    categories: z.array(z.lazy(() => ItemCategories$outboundSchema)).optional(),
    options: z.array(z.lazy(() => ItemOptions$outboundSchema)).optional(),
    variations: z.array(z.lazy(() => Variations$outboundSchema)).optional(),
    modifierGroups: z.array(z.lazy(() => ModifierGroups$outboundSchema))
      .optional(),
    available: z.nullable(z.boolean()).optional(),
    hidden: z.nullable(z.boolean()).optional(),
    version: z.nullable(z.string()).optional(),
    customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
    deleted: z.nullable(z.boolean()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    passThrough: z.array(PassThroughBody$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency_key",
      productType: "product_type",
      priceAmount: "price_amount",
      pricingType: "pricing_type",
      priceCurrency: "price_currency",
      taxIds: "tax_ids",
      isRevenue: "is_revenue",
      useDefaultTaxRates: "use_default_tax_rates",
      absentAtLocationIds: "absent_at_location_ids",
      presentAtAllLocations: "present_at_all_locations",
      availableForPickup: "available_for_pickup",
      availableOnline: "available_online",
      modifierGroups: "modifier_groups",
      customMappings: "custom_mappings",
      updatedBy: "updated_by",
      createdBy: "created_by",
      updatedAt: "updated_at",
      createdAt: "created_at",
      passThrough: "pass_through",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Item$ {
  /** @deprecated use `Item$inboundSchema` instead. */
  export const inboundSchema = Item$inboundSchema;
  /** @deprecated use `Item$outboundSchema` instead. */
  export const outboundSchema = Item$outboundSchema;
  /** @deprecated use `Item$Outbound` instead. */
  export type Outbound = Item$Outbound;
}

/** @internal */
export const ItemCategoriesInput$inboundSchema: z.ZodType<
  ItemCategoriesInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  image_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_ids": "imageIds",
  });
});

/** @internal */
export type ItemCategoriesInput$Outbound = {
  name?: string | undefined;
  image_ids?: Array<string> | undefined;
};

/** @internal */
export const ItemCategoriesInput$outboundSchema: z.ZodType<
  ItemCategoriesInput$Outbound,
  z.ZodTypeDef,
  ItemCategoriesInput
> = z.object({
  name: z.string().optional(),
  imageIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    imageIds: "image_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemCategoriesInput$ {
  /** @deprecated use `ItemCategoriesInput$inboundSchema` instead. */
  export const inboundSchema = ItemCategoriesInput$inboundSchema;
  /** @deprecated use `ItemCategoriesInput$outboundSchema` instead. */
  export const outboundSchema = ItemCategoriesInput$outboundSchema;
  /** @deprecated use `ItemCategoriesInput$Outbound` instead. */
  export type Outbound = ItemCategoriesInput$Outbound;
}

/** @internal */
export const ItemVariations$inboundSchema: z.ZodType<
  ItemVariations,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  sku: z.string().optional(),
  sequence: z.nullable(z.number()).optional(),
  pricing_type: ItemPricingType$inboundSchema.optional(),
  price_amount: z.number().optional(),
  price_currency: z.nullable(Currency$inboundSchema).optional(),
  stockable: z.boolean().optional(),
  present_at_all_locations: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "pricing_type": "pricingType",
    "price_amount": "priceAmount",
    "price_currency": "priceCurrency",
    "present_at_all_locations": "presentAtAllLocations",
  });
});

/** @internal */
export type ItemVariations$Outbound = {
  name?: string | undefined;
  sku?: string | undefined;
  sequence?: number | null | undefined;
  pricing_type?: string | undefined;
  price_amount?: number | undefined;
  price_currency?: string | null | undefined;
  stockable?: boolean | undefined;
  present_at_all_locations?: boolean | undefined;
};

/** @internal */
export const ItemVariations$outboundSchema: z.ZodType<
  ItemVariations$Outbound,
  z.ZodTypeDef,
  ItemVariations
> = z.object({
  name: z.string().optional(),
  sku: z.string().optional(),
  sequence: z.nullable(z.number()).optional(),
  pricingType: ItemPricingType$outboundSchema.optional(),
  priceAmount: z.number().optional(),
  priceCurrency: z.nullable(Currency$outboundSchema).optional(),
  stockable: z.boolean().optional(),
  presentAtAllLocations: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    pricingType: "pricing_type",
    priceAmount: "price_amount",
    priceCurrency: "price_currency",
    presentAtAllLocations: "present_at_all_locations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemVariations$ {
  /** @deprecated use `ItemVariations$inboundSchema` instead. */
  export const inboundSchema = ItemVariations$inboundSchema;
  /** @deprecated use `ItemVariations$outboundSchema` instead. */
  export const outboundSchema = ItemVariations$outboundSchema;
  /** @deprecated use `ItemVariations$Outbound` instead. */
  export type Outbound = ItemVariations$Outbound;
}

/** @internal */
export const ItemModifierGroups$inboundSchema: z.ZodType<
  ItemModifierGroups,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ItemModifierGroups$Outbound = {};

/** @internal */
export const ItemModifierGroups$outboundSchema: z.ZodType<
  ItemModifierGroups$Outbound,
  z.ZodTypeDef,
  ItemModifierGroups
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemModifierGroups$ {
  /** @deprecated use `ItemModifierGroups$inboundSchema` instead. */
  export const inboundSchema = ItemModifierGroups$inboundSchema;
  /** @deprecated use `ItemModifierGroups$outboundSchema` instead. */
  export const outboundSchema = ItemModifierGroups$outboundSchema;
  /** @deprecated use `ItemModifierGroups$Outbound` instead. */
  export type Outbound = ItemModifierGroups$Outbound;
}

/** @internal */
export const ItemInput$inboundSchema: z.ZodType<
  ItemInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  idempotency_key: z.string().optional(),
  name: z.string(),
  description: z.string().optional(),
  abbreviation: z.string().optional(),
  product_type: ProductType$inboundSchema.optional(),
  price_amount: z.number().optional(),
  pricing_type: PricingType$inboundSchema.optional(),
  price_currency: z.nullable(Currency$inboundSchema).optional(),
  cost: z.number().optional(),
  tax_ids: z.array(z.string()).optional(),
  is_revenue: z.boolean().optional(),
  use_default_tax_rates: z.boolean().optional(),
  absent_at_location_ids: z.array(z.string()).optional(),
  present_at_all_locations: z.boolean().optional(),
  available_for_pickup: z.boolean().optional(),
  available_online: z.boolean().optional(),
  sku: z.string().optional(),
  code: z.string().optional(),
  categories: z.array(z.lazy(() => ItemCategoriesInput$inboundSchema))
    .optional(),
  options: z.array(z.lazy(() => ItemOptions$inboundSchema)).optional(),
  variations: z.array(z.lazy(() => ItemVariations$inboundSchema)).optional(),
  modifier_groups: z.array(z.lazy(() => ItemModifierGroups$inboundSchema))
    .optional(),
  available: z.nullable(z.boolean()).optional(),
  hidden: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency_key": "idempotencyKey",
    "product_type": "productType",
    "price_amount": "priceAmount",
    "pricing_type": "pricingType",
    "price_currency": "priceCurrency",
    "tax_ids": "taxIds",
    "is_revenue": "isRevenue",
    "use_default_tax_rates": "useDefaultTaxRates",
    "absent_at_location_ids": "absentAtLocationIds",
    "present_at_all_locations": "presentAtAllLocations",
    "available_for_pickup": "availableForPickup",
    "available_online": "availableOnline",
    "modifier_groups": "modifierGroups",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ItemInput$Outbound = {
  id?: string | undefined;
  idempotency_key?: string | undefined;
  name: string;
  description?: string | undefined;
  abbreviation?: string | undefined;
  product_type?: string | undefined;
  price_amount?: number | undefined;
  pricing_type?: string | undefined;
  price_currency?: string | null | undefined;
  cost?: number | undefined;
  tax_ids?: Array<string> | undefined;
  is_revenue?: boolean | undefined;
  use_default_tax_rates?: boolean | undefined;
  absent_at_location_ids?: Array<string> | undefined;
  present_at_all_locations?: boolean | undefined;
  available_for_pickup?: boolean | undefined;
  available_online?: boolean | undefined;
  sku?: string | undefined;
  code?: string | undefined;
  categories?: Array<ItemCategoriesInput$Outbound> | undefined;
  options?: Array<ItemOptions$Outbound> | undefined;
  variations?: Array<ItemVariations$Outbound> | undefined;
  modifier_groups?: Array<ItemModifierGroups$Outbound> | undefined;
  available?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  deleted?: boolean | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const ItemInput$outboundSchema: z.ZodType<
  ItemInput$Outbound,
  z.ZodTypeDef,
  ItemInput
> = z.object({
  id: z.string().optional(),
  idempotencyKey: z.string().optional(),
  name: z.string(),
  description: z.string().optional(),
  abbreviation: z.string().optional(),
  productType: ProductType$outboundSchema.optional(),
  priceAmount: z.number().optional(),
  pricingType: PricingType$outboundSchema.optional(),
  priceCurrency: z.nullable(Currency$outboundSchema).optional(),
  cost: z.number().optional(),
  taxIds: z.array(z.string()).optional(),
  isRevenue: z.boolean().optional(),
  useDefaultTaxRates: z.boolean().optional(),
  absentAtLocationIds: z.array(z.string()).optional(),
  presentAtAllLocations: z.boolean().optional(),
  availableForPickup: z.boolean().optional(),
  availableOnline: z.boolean().optional(),
  sku: z.string().optional(),
  code: z.string().optional(),
  categories: z.array(z.lazy(() => ItemCategoriesInput$outboundSchema))
    .optional(),
  options: z.array(z.lazy(() => ItemOptions$outboundSchema)).optional(),
  variations: z.array(z.lazy(() => ItemVariations$outboundSchema)).optional(),
  modifierGroups: z.array(z.lazy(() => ItemModifierGroups$outboundSchema))
    .optional(),
  available: z.nullable(z.boolean()).optional(),
  hidden: z.nullable(z.boolean()).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency_key",
    productType: "product_type",
    priceAmount: "price_amount",
    pricingType: "pricing_type",
    priceCurrency: "price_currency",
    taxIds: "tax_ids",
    isRevenue: "is_revenue",
    useDefaultTaxRates: "use_default_tax_rates",
    absentAtLocationIds: "absent_at_location_ids",
    presentAtAllLocations: "present_at_all_locations",
    availableForPickup: "available_for_pickup",
    availableOnline: "available_online",
    modifierGroups: "modifier_groups",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ItemInput$ {
  /** @deprecated use `ItemInput$inboundSchema` instead. */
  export const inboundSchema = ItemInput$inboundSchema;
  /** @deprecated use `ItemInput$outboundSchema` instead. */
  export const outboundSchema = ItemInput$outboundSchema;
  /** @deprecated use `ItemInput$Outbound` instead. */
  export type Outbound = ItemInput$Outbound;
}
