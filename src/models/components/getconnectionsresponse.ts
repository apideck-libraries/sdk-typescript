/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";

/**
 * Connections
 */
export type GetConnectionsResponse = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  data: Array<Connection>;
};

/** @internal */
export const GetConnectionsResponse$inboundSchema: z.ZodType<
  GetConnectionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  data: z.array(Connection$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
  });
});

/** @internal */
export type GetConnectionsResponse$Outbound = {
  status_code: number;
  status: string;
  data: Array<Connection$Outbound>;
};

/** @internal */
export const GetConnectionsResponse$outboundSchema: z.ZodType<
  GetConnectionsResponse$Outbound,
  z.ZodTypeDef,
  GetConnectionsResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  data: z.array(Connection$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConnectionsResponse$ {
  /** @deprecated use `GetConnectionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetConnectionsResponse$inboundSchema;
  /** @deprecated use `GetConnectionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetConnectionsResponse$outboundSchema;
  /** @deprecated use `GetConnectionsResponse$Outbound` instead. */
  export type Outbound = GetConnectionsResponse$Outbound;
}

export function getConnectionsResponseToJSON(
  getConnectionsResponse: GetConnectionsResponse,
): string {
  return JSON.stringify(
    GetConnectionsResponse$outboundSchema.parse(getConnectionsResponse),
  );
}

export function getConnectionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetConnectionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConnectionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConnectionsResponse' from JSON`,
  );
}
