/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OutstandingBalanceBySupplier,
  OutstandingBalanceBySupplier$inboundSchema,
  OutstandingBalanceBySupplier$Outbound,
  OutstandingBalanceBySupplier$outboundSchema,
} from "./outstandingbalancebysupplier.js";

export type AgedCreditors = {
  /**
   * The exact date and time the report was generated.
   */
  reportGeneratedAt?: Date | undefined;
  /**
   * The cutoff date for transactions included in the report.
   */
  reportAsOfDate?: RFCDate | undefined;
  /**
   * Number of aging periods shown in the report.
   */
  periodCount?: number | undefined;
  /**
   * Length of each aging period in days.
   */
  periodLength?: number | undefined;
  outstandingBalances?: Array<OutstandingBalanceBySupplier> | undefined;
};

/** @internal */
export const AgedCreditors$inboundSchema: z.ZodType<
  AgedCreditors,
  z.ZodTypeDef,
  unknown
> = z.object({
  report_generated_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  report_as_of_date: z.string().transform(v => new RFCDate(v)).optional(),
  period_count: z.number().int().default(4),
  period_length: z.number().int().default(30),
  outstanding_balances: z.array(OutstandingBalanceBySupplier$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "report_generated_at": "reportGeneratedAt",
    "report_as_of_date": "reportAsOfDate",
    "period_count": "periodCount",
    "period_length": "periodLength",
    "outstanding_balances": "outstandingBalances",
  });
});

/** @internal */
export type AgedCreditors$Outbound = {
  report_generated_at?: string | undefined;
  report_as_of_date?: string | undefined;
  period_count: number;
  period_length: number;
  outstanding_balances?:
    | Array<OutstandingBalanceBySupplier$Outbound>
    | undefined;
};

/** @internal */
export const AgedCreditors$outboundSchema: z.ZodType<
  AgedCreditors$Outbound,
  z.ZodTypeDef,
  AgedCreditors
> = z.object({
  reportGeneratedAt: z.date().transform(v => v.toISOString()).optional(),
  reportAsOfDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  periodCount: z.number().int().default(4),
  periodLength: z.number().int().default(30),
  outstandingBalances: z.array(OutstandingBalanceBySupplier$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    reportGeneratedAt: "report_generated_at",
    reportAsOfDate: "report_as_of_date",
    periodCount: "period_count",
    periodLength: "period_length",
    outstandingBalances: "outstanding_balances",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgedCreditors$ {
  /** @deprecated use `AgedCreditors$inboundSchema` instead. */
  export const inboundSchema = AgedCreditors$inboundSchema;
  /** @deprecated use `AgedCreditors$outboundSchema` instead. */
  export const outboundSchema = AgedCreditors$outboundSchema;
  /** @deprecated use `AgedCreditors$Outbound` instead. */
  export type Outbound = AgedCreditors$Outbound;
}

export function agedCreditorsToJSON(agedCreditors: AgedCreditors): string {
  return JSON.stringify(AgedCreditors$outboundSchema.parse(agedCreditors));
}

export function agedCreditorsFromJSON(
  jsonString: string,
): SafeParseResult<AgedCreditors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgedCreditors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgedCreditors' from JSON`,
  );
}
