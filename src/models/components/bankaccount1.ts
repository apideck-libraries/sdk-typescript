/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";

/**
 * The type of bank account.
 */
export const BankAccount1AccountType = {
  BankAccount: "bank_account",
  CreditCard: "credit_card",
  Other: "other",
} as const;
/**
 * The type of bank account.
 */
export type BankAccount1AccountType = ClosedEnum<
  typeof BankAccount1AccountType
>;

export type BankAccount1 = {
  /**
   * The name of the bank or financial institution
   */
  bankName?: string | null | undefined;
  /**
   * The bank account number
   */
  accountNumber?: string | null | undefined;
  /**
   * The name of the bank account
   */
  accountName?: string | null | undefined;
  /**
   * The type of bank account.
   */
  accountType?: BankAccount1AccountType | null | undefined;
  /**
   * International Bank Account Number
   */
  iban?: string | null | undefined;
  /**
   * Bank Identifier Code / SWIFT Code
   */
  bic?: string | null | undefined;
  /**
   * Bank routing number (US)
   */
  routingNumber?: string | null | undefined;
  /**
   * Bank State Branch number (Australia/New Zealand)
   */
  bsbNumber?: string | null | undefined;
  /**
   * Bank branch identifier
   */
  branchIdentifier?: string | null | undefined;
  /**
   * Bank code assigned by central bank
   */
  bankCode?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * Country code according to ISO 3166-1 alpha-2.
   */
  country?: string | null | undefined;
};

/** @internal */
export const BankAccount1AccountType$inboundSchema: z.ZodNativeEnum<
  typeof BankAccount1AccountType
> = z.nativeEnum(BankAccount1AccountType);

/** @internal */
export const BankAccount1AccountType$outboundSchema: z.ZodNativeEnum<
  typeof BankAccount1AccountType
> = BankAccount1AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccount1AccountType$ {
  /** @deprecated use `BankAccount1AccountType$inboundSchema` instead. */
  export const inboundSchema = BankAccount1AccountType$inboundSchema;
  /** @deprecated use `BankAccount1AccountType$outboundSchema` instead. */
  export const outboundSchema = BankAccount1AccountType$outboundSchema;
}

/** @internal */
export const BankAccount1$inboundSchema: z.ZodType<
  BankAccount1,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  account_name: z.nullable(z.string()).optional(),
  account_type: z.nullable(BankAccount1AccountType$inboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  bsb_number: z.nullable(z.string()).optional(),
  branch_identifier: z.nullable(z.string()).optional(),
  bank_code: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  country: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "account_name": "accountName",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "bsb_number": "bsbNumber",
    "branch_identifier": "branchIdentifier",
    "bank_code": "bankCode",
  });
});

/** @internal */
export type BankAccount1$Outbound = {
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  account_name?: string | null | undefined;
  account_type?: string | null | undefined;
  iban?: string | null | undefined;
  bic?: string | null | undefined;
  routing_number?: string | null | undefined;
  bsb_number?: string | null | undefined;
  branch_identifier?: string | null | undefined;
  bank_code?: string | null | undefined;
  currency?: string | null | undefined;
  country?: string | null | undefined;
};

/** @internal */
export const BankAccount1$outboundSchema: z.ZodType<
  BankAccount1$Outbound,
  z.ZodTypeDef,
  BankAccount1
> = z.object({
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  accountName: z.nullable(z.string()).optional(),
  accountType: z.nullable(BankAccount1AccountType$outboundSchema).optional(),
  iban: z.nullable(z.string()).optional(),
  bic: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  bsbNumber: z.nullable(z.string()).optional(),
  branchIdentifier: z.nullable(z.string()).optional(),
  bankCode: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  country: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    bankName: "bank_name",
    accountNumber: "account_number",
    accountName: "account_name",
    accountType: "account_type",
    routingNumber: "routing_number",
    bsbNumber: "bsb_number",
    branchIdentifier: "branch_identifier",
    bankCode: "bank_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccount1$ {
  /** @deprecated use `BankAccount1$inboundSchema` instead. */
  export const inboundSchema = BankAccount1$inboundSchema;
  /** @deprecated use `BankAccount1$outboundSchema` instead. */
  export const outboundSchema = BankAccount1$outboundSchema;
  /** @deprecated use `BankAccount1$Outbound` instead. */
  export type Outbound = BankAccount1$Outbound;
}

export function bankAccount1ToJSON(bankAccount1: BankAccount1): string {
  return JSON.stringify(BankAccount1$outboundSchema.parse(bankAccount1));
}

export function bankAccount1FromJSON(
  jsonString: string,
): SafeParseResult<BankAccount1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BankAccount1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BankAccount1' from JSON`,
  );
}
