/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ExpensesFilterStatus = {
  Draft: "draft",
  PendingApproval: "pending_approval",
  Approved: "approved",
  Posted: "posted",
  Voided: "voided",
  Rejected: "rejected",
  Deleted: "deleted",
  Other: "other",
} as const;
export type ExpensesFilterStatus = ClosedEnum<typeof ExpensesFilterStatus>;

export const ExpensesFilterType = {
  Expense: "expense",
  Refund: "refund",
} as const;
export type ExpensesFilterType = ClosedEnum<typeof ExpensesFilterType>;

export type ExpensesFilter = {
  updatedSince?: Date | undefined;
  status?: ExpensesFilterStatus | undefined;
  type?: ExpensesFilterType | undefined;
};

/** @internal */
export const ExpensesFilterStatus$inboundSchema: z.ZodNativeEnum<
  typeof ExpensesFilterStatus
> = z.nativeEnum(ExpensesFilterStatus);

/** @internal */
export const ExpensesFilterStatus$outboundSchema: z.ZodNativeEnum<
  typeof ExpensesFilterStatus
> = ExpensesFilterStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpensesFilterStatus$ {
  /** @deprecated use `ExpensesFilterStatus$inboundSchema` instead. */
  export const inboundSchema = ExpensesFilterStatus$inboundSchema;
  /** @deprecated use `ExpensesFilterStatus$outboundSchema` instead. */
  export const outboundSchema = ExpensesFilterStatus$outboundSchema;
}

/** @internal */
export const ExpensesFilterType$inboundSchema: z.ZodNativeEnum<
  typeof ExpensesFilterType
> = z.nativeEnum(ExpensesFilterType);

/** @internal */
export const ExpensesFilterType$outboundSchema: z.ZodNativeEnum<
  typeof ExpensesFilterType
> = ExpensesFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpensesFilterType$ {
  /** @deprecated use `ExpensesFilterType$inboundSchema` instead. */
  export const inboundSchema = ExpensesFilterType$inboundSchema;
  /** @deprecated use `ExpensesFilterType$outboundSchema` instead. */
  export const outboundSchema = ExpensesFilterType$outboundSchema;
}

/** @internal */
export const ExpensesFilter$inboundSchema: z.ZodType<
  ExpensesFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated_since: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  status: ExpensesFilterStatus$inboundSchema.optional(),
  type: ExpensesFilterType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_since": "updatedSince",
  });
});

/** @internal */
export type ExpensesFilter$Outbound = {
  updated_since?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ExpensesFilter$outboundSchema: z.ZodType<
  ExpensesFilter$Outbound,
  z.ZodTypeDef,
  ExpensesFilter
> = z.object({
  updatedSince: z.date().transform(v => v.toISOString()).optional(),
  status: ExpensesFilterStatus$outboundSchema.optional(),
  type: ExpensesFilterType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    updatedSince: "updated_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpensesFilter$ {
  /** @deprecated use `ExpensesFilter$inboundSchema` instead. */
  export const inboundSchema = ExpensesFilter$inboundSchema;
  /** @deprecated use `ExpensesFilter$outboundSchema` instead. */
  export const outboundSchema = ExpensesFilter$outboundSchema;
  /** @deprecated use `ExpensesFilter$Outbound` instead. */
  export type Outbound = ExpensesFilter$Outbound;
}

export function expensesFilterToJSON(expensesFilter: ExpensesFilter): string {
  return JSON.stringify(ExpensesFilter$outboundSchema.parse(expensesFilter));
}

export function expensesFilterFromJSON(
  jsonString: string,
): SafeParseResult<ExpensesFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpensesFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpensesFilter' from JSON`,
  );
}
