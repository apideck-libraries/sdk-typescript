/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubsidiaryReference = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The name of the company.
   */
  name?: string | null | undefined;
};

/** @internal */
export const SubsidiaryReference$inboundSchema: z.ZodType<
  SubsidiaryReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type SubsidiaryReference$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const SubsidiaryReference$outboundSchema: z.ZodType<
  SubsidiaryReference$Outbound,
  z.ZodTypeDef,
  SubsidiaryReference
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubsidiaryReference$ {
  /** @deprecated use `SubsidiaryReference$inboundSchema` instead. */
  export const inboundSchema = SubsidiaryReference$inboundSchema;
  /** @deprecated use `SubsidiaryReference$outboundSchema` instead. */
  export const outboundSchema = SubsidiaryReference$outboundSchema;
  /** @deprecated use `SubsidiaryReference$Outbound` instead. */
  export type Outbound = SubsidiaryReference$Outbound;
}

export function subsidiaryReferenceToJSON(
  subsidiaryReference: SubsidiaryReference,
): string {
  return JSON.stringify(
    SubsidiaryReference$outboundSchema.parse(subsidiaryReference),
  );
}

export function subsidiaryReferenceFromJSON(
  jsonString: string,
): SafeParseResult<SubsidiaryReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubsidiaryReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubsidiaryReference' from JSON`,
  );
}
