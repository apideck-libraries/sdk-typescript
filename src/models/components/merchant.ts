/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";
import {
  ServiceCharge,
  ServiceCharge$inboundSchema,
  ServiceCharge$Outbound,
  ServiceCharge$outboundSchema,
  ServiceChargeInput,
  ServiceChargeInput$inboundSchema,
  ServiceChargeInput$Outbound,
  ServiceChargeInput$outboundSchema,
} from "./servicecharge.js";

/**
 * Status of this merchant.
 */
export const MerchantStatus = {
  Active: "active",
  Inactive: "inactive",
  Other: "other",
} as const;
/**
 * Status of this merchant.
 */
export type MerchantStatus = ClosedEnum<typeof MerchantStatus>;

export type Merchant = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  /**
   * The name of the merchant
   */
  name?: string | null | undefined;
  address?: Address | undefined;
  ownerId?: string | undefined;
  /**
   * The main location ID of the merchant
   */
  mainLocationId?: string | null | undefined;
  /**
   * Status of this merchant.
   */
  status?: MerchantStatus | null | undefined;
  serviceCharges?: Array<ServiceCharge> | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type MerchantInput = {
  /**
   * The name of the merchant
   */
  name?: string | null | undefined;
  address?: Address | undefined;
  ownerId?: string | undefined;
  /**
   * The main location ID of the merchant
   */
  mainLocationId?: string | null | undefined;
  /**
   * Status of this merchant.
   */
  status?: MerchantStatus | null | undefined;
  serviceCharges?: Array<ServiceChargeInput> | undefined;
  /**
   * language code according to ISO 639-1. For the United States - EN
   */
  language?: string | null | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const MerchantStatus$inboundSchema: z.ZodNativeEnum<
  typeof MerchantStatus
> = z.nativeEnum(MerchantStatus);

/** @internal */
export const MerchantStatus$outboundSchema: z.ZodNativeEnum<
  typeof MerchantStatus
> = MerchantStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantStatus$ {
  /** @deprecated use `MerchantStatus$inboundSchema` instead. */
  export const inboundSchema = MerchantStatus$inboundSchema;
  /** @deprecated use `MerchantStatus$outboundSchema` instead. */
  export const outboundSchema = MerchantStatus$outboundSchema;
}

/** @internal */
export const Merchant$inboundSchema: z.ZodType<
  Merchant,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  address: Address$inboundSchema.optional(),
  owner_id: z.string().optional(),
  main_location_id: z.nullable(z.string()).optional(),
  status: z.nullable(MerchantStatus$inboundSchema).optional(),
  service_charges: z.array(ServiceCharge$inboundSchema).optional(),
  language: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "main_location_id": "mainLocationId",
    "service_charges": "serviceCharges",
    "custom_mappings": "customMappings",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type Merchant$Outbound = {
  id?: string | undefined;
  name?: string | null | undefined;
  address?: Address$Outbound | undefined;
  owner_id?: string | undefined;
  main_location_id?: string | null | undefined;
  status?: string | null | undefined;
  service_charges?: Array<ServiceCharge$Outbound> | undefined;
  language?: string | null | undefined;
  currency?: string | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const Merchant$outboundSchema: z.ZodType<
  Merchant$Outbound,
  z.ZodTypeDef,
  Merchant
> = z.object({
  id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  address: Address$outboundSchema.optional(),
  ownerId: z.string().optional(),
  mainLocationId: z.nullable(z.string()).optional(),
  status: z.nullable(MerchantStatus$outboundSchema).optional(),
  serviceCharges: z.array(ServiceCharge$outboundSchema).optional(),
  language: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    mainLocationId: "main_location_id",
    serviceCharges: "service_charges",
    customMappings: "custom_mappings",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Merchant$ {
  /** @deprecated use `Merchant$inboundSchema` instead. */
  export const inboundSchema = Merchant$inboundSchema;
  /** @deprecated use `Merchant$outboundSchema` instead. */
  export const outboundSchema = Merchant$outboundSchema;
  /** @deprecated use `Merchant$Outbound` instead. */
  export type Outbound = Merchant$Outbound;
}

/** @internal */
export const MerchantInput$inboundSchema: z.ZodType<
  MerchantInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  address: Address$inboundSchema.optional(),
  owner_id: z.string().optional(),
  main_location_id: z.nullable(z.string()).optional(),
  status: z.nullable(MerchantStatus$inboundSchema).optional(),
  service_charges: z.array(ServiceChargeInput$inboundSchema).optional(),
  language: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "owner_id": "ownerId",
    "main_location_id": "mainLocationId",
    "service_charges": "serviceCharges",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type MerchantInput$Outbound = {
  name?: string | null | undefined;
  address?: Address$Outbound | undefined;
  owner_id?: string | undefined;
  main_location_id?: string | null | undefined;
  status?: string | null | undefined;
  service_charges?: Array<ServiceChargeInput$Outbound> | undefined;
  language?: string | null | undefined;
  currency?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const MerchantInput$outboundSchema: z.ZodType<
  MerchantInput$Outbound,
  z.ZodTypeDef,
  MerchantInput
> = z.object({
  name: z.nullable(z.string()).optional(),
  address: Address$outboundSchema.optional(),
  ownerId: z.string().optional(),
  mainLocationId: z.nullable(z.string()).optional(),
  status: z.nullable(MerchantStatus$outboundSchema).optional(),
  serviceCharges: z.array(ServiceChargeInput$outboundSchema).optional(),
  language: z.nullable(z.string()).optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    ownerId: "owner_id",
    mainLocationId: "main_location_id",
    serviceCharges: "service_charges",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MerchantInput$ {
  /** @deprecated use `MerchantInput$inboundSchema` instead. */
  export const inboundSchema = MerchantInput$inboundSchema;
  /** @deprecated use `MerchantInput$outboundSchema` instead. */
  export const outboundSchema = MerchantInput$outboundSchema;
  /** @deprecated use `MerchantInput$Outbound` instead. */
  export type Outbound = MerchantInput$Outbound;
}
