/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export type ModifierInput = {
  /**
   * A value you specify that uniquely identifies this request among requests you have sent.
   */
  idempotencyKey?: string | undefined;
  name: string;
  alternateName?: string | undefined;
  priceAmount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  modifierGroupId: string;
  available?: boolean | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const ModifierInput$inboundSchema: z.ZodType<
  ModifierInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  idempotency_key: z.string().optional(),
  name: z.string(),
  alternate_name: z.string().optional(),
  price_amount: z.number().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  modifier_group_id: z.string(),
  available: z.nullable(z.boolean()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency_key": "idempotencyKey",
    "alternate_name": "alternateName",
    "price_amount": "priceAmount",
    "modifier_group_id": "modifierGroupId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ModifierInput$Outbound = {
  idempotency_key?: string | undefined;
  name: string;
  alternate_name?: string | undefined;
  price_amount?: number | undefined;
  currency?: string | null | undefined;
  modifier_group_id: string;
  available?: boolean | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const ModifierInput$outboundSchema: z.ZodType<
  ModifierInput$Outbound,
  z.ZodTypeDef,
  ModifierInput
> = z.object({
  idempotencyKey: z.string().optional(),
  name: z.string(),
  alternateName: z.string().optional(),
  priceAmount: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  modifierGroupId: z.string(),
  available: z.nullable(z.boolean()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency_key",
    alternateName: "alternate_name",
    priceAmount: "price_amount",
    modifierGroupId: "modifier_group_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifierInput$ {
  /** @deprecated use `ModifierInput$inboundSchema` instead. */
  export const inboundSchema = ModifierInput$inboundSchema;
  /** @deprecated use `ModifierInput$outboundSchema` instead. */
  export const outboundSchema = ModifierInput$outboundSchema;
  /** @deprecated use `ModifierInput$Outbound` instead. */
  export type Outbound = ModifierInput$Outbound;
}
