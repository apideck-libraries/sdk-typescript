/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export type TenderInput = {
  key?: string | null | undefined;
  label?: string | null | undefined;
  active?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  editable?: boolean | null | undefined;
  /**
   * If this tender opens the cash drawer
   */
  opensCashDrawer?: boolean | undefined;
  /**
   * Allow tipping on payment from tender
   */
  allowsTipping?: boolean | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const TenderInput$inboundSchema: z.ZodType<
  TenderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  hidden: z.nullable(z.boolean()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  opens_cash_drawer: z.boolean().default(true),
  allows_tipping: z.boolean().default(true),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "opens_cash_drawer": "opensCashDrawer",
    "allows_tipping": "allowsTipping",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type TenderInput$Outbound = {
  key?: string | null | undefined;
  label?: string | null | undefined;
  active?: boolean | null | undefined;
  hidden?: boolean | null | undefined;
  editable?: boolean | null | undefined;
  opens_cash_drawer: boolean;
  allows_tipping: boolean;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const TenderInput$outboundSchema: z.ZodType<
  TenderInput$Outbound,
  z.ZodTypeDef,
  TenderInput
> = z.object({
  key: z.nullable(z.string()).optional(),
  label: z.nullable(z.string()).optional(),
  active: z.nullable(z.boolean()).optional(),
  hidden: z.nullable(z.boolean()).optional(),
  editable: z.nullable(z.boolean()).optional(),
  opensCashDrawer: z.boolean().default(true),
  allowsTipping: z.boolean().default(true),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    opensCashDrawer: "opens_cash_drawer",
    allowsTipping: "allows_tipping",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TenderInput$ {
  /** @deprecated use `TenderInput$inboundSchema` instead. */
  export const inboundSchema = TenderInput$inboundSchema;
  /** @deprecated use `TenderInput$outboundSchema` instead. */
  export const outboundSchema = TenderInput$outboundSchema;
  /** @deprecated use `TenderInput$Outbound` instead. */
  export type Outbound = TenderInput$Outbound;
}
