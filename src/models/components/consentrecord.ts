/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DataScopesResources,
  DataScopesResources$inboundSchema,
  DataScopesResources$Outbound,
  DataScopesResources$outboundSchema,
} from "./datascopesresources.js";

export type ConsentRecord = {
  /**
   * Unique identifier for this consent record
   */
  id: string;
  /**
   * ISO timestamp when consent was recorded
   */
  createdAt: string;
  /**
   * Whether consent was granted (true) or denied/revoked (false)
   */
  granted: boolean;
  /**
   * Data scopes resource configuration that can be either detailed field permissions or a wildcard
   */
  resources: DataScopesResources;
};

/** @internal */
export const ConsentRecord$inboundSchema: z.ZodType<
  ConsentRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string(),
  granted: z.boolean(),
  resources: DataScopesResources$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type ConsentRecord$Outbound = {
  id: string;
  created_at: string;
  granted: boolean;
  resources: DataScopesResources$Outbound;
};

/** @internal */
export const ConsentRecord$outboundSchema: z.ZodType<
  ConsentRecord$Outbound,
  z.ZodTypeDef,
  ConsentRecord
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  granted: z.boolean(),
  resources: DataScopesResources$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsentRecord$ {
  /** @deprecated use `ConsentRecord$inboundSchema` instead. */
  export const inboundSchema = ConsentRecord$inboundSchema;
  /** @deprecated use `ConsentRecord$outboundSchema` instead. */
  export const outboundSchema = ConsentRecord$outboundSchema;
  /** @deprecated use `ConsentRecord$Outbound` instead. */
  export type Outbound = ConsentRecord$Outbound;
}

export function consentRecordToJSON(consentRecord: ConsentRecord): string {
  return JSON.stringify(ConsentRecord$outboundSchema.parse(consentRecord));
}

export function consentRecordFromJSON(
  jsonString: string,
): SafeParseResult<ConsentRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConsentRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConsentRecord' from JSON`,
  );
}
