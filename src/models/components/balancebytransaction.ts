/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the transaction.
 */
export const BalanceByTransactionTransactionType = {
  Invoice: "invoice",
  CreditNote: "credit_note",
  Bill: "bill",
  Payment: "payment",
  BillPayment: "bill_payment",
} as const;
/**
 * Type of the transaction.
 */
export type BalanceByTransactionTransactionType = ClosedEnum<
  typeof BalanceByTransactionTransactionType
>;

export type BalanceByTransaction = {
  /**
   * Unique identifier for the transaction.
   */
  transactionId?: string | undefined;
  /**
   * Date of the transaction.
   */
  transactionDate?: RFCDate | undefined;
  /**
   * Type of the transaction.
   */
  transactionType?: BalanceByTransactionTransactionType | undefined;
  /**
   * Due date of the transaction.
   */
  dueDate?: RFCDate | undefined;
  /**
   * Original amount of the transaction.
   */
  originalAmount?: number | undefined;
  /**
   * Outstanding balance of the transaction.
   */
  outstandingBalance?: number | undefined;
  /**
   * Transaction number of the transaction.
   */
  transactionNumber?: string | undefined;
};

/** @internal */
export const BalanceByTransactionTransactionType$inboundSchema: z.ZodNativeEnum<
  typeof BalanceByTransactionTransactionType
> = z.nativeEnum(BalanceByTransactionTransactionType);

/** @internal */
export const BalanceByTransactionTransactionType$outboundSchema:
  z.ZodNativeEnum<typeof BalanceByTransactionTransactionType> =
    BalanceByTransactionTransactionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceByTransactionTransactionType$ {
  /** @deprecated use `BalanceByTransactionTransactionType$inboundSchema` instead. */
  export const inboundSchema =
    BalanceByTransactionTransactionType$inboundSchema;
  /** @deprecated use `BalanceByTransactionTransactionType$outboundSchema` instead. */
  export const outboundSchema =
    BalanceByTransactionTransactionType$outboundSchema;
}

/** @internal */
export const BalanceByTransaction$inboundSchema: z.ZodType<
  BalanceByTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_id: z.string().optional(),
  transaction_date: z.string().transform(v => new RFCDate(v)).optional(),
  transaction_type: BalanceByTransactionTransactionType$inboundSchema
    .optional(),
  due_date: z.string().transform(v => new RFCDate(v)).optional(),
  original_amount: z.number().optional(),
  outstanding_balance: z.number().optional(),
  transaction_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "transaction_date": "transactionDate",
    "transaction_type": "transactionType",
    "due_date": "dueDate",
    "original_amount": "originalAmount",
    "outstanding_balance": "outstandingBalance",
    "transaction_number": "transactionNumber",
  });
});

/** @internal */
export type BalanceByTransaction$Outbound = {
  transaction_id?: string | undefined;
  transaction_date?: string | undefined;
  transaction_type?: string | undefined;
  due_date?: string | undefined;
  original_amount?: number | undefined;
  outstanding_balance?: number | undefined;
  transaction_number?: string | undefined;
};

/** @internal */
export const BalanceByTransaction$outboundSchema: z.ZodType<
  BalanceByTransaction$Outbound,
  z.ZodTypeDef,
  BalanceByTransaction
> = z.object({
  transactionId: z.string().optional(),
  transactionDate: z.instanceof(RFCDate).transform(v => v.toString())
    .optional(),
  transactionType: BalanceByTransactionTransactionType$outboundSchema
    .optional(),
  dueDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  originalAmount: z.number().optional(),
  outstandingBalance: z.number().optional(),
  transactionNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    transactionDate: "transaction_date",
    transactionType: "transaction_type",
    dueDate: "due_date",
    originalAmount: "original_amount",
    outstandingBalance: "outstanding_balance",
    transactionNumber: "transaction_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceByTransaction$ {
  /** @deprecated use `BalanceByTransaction$inboundSchema` instead. */
  export const inboundSchema = BalanceByTransaction$inboundSchema;
  /** @deprecated use `BalanceByTransaction$outboundSchema` instead. */
  export const outboundSchema = BalanceByTransaction$outboundSchema;
  /** @deprecated use `BalanceByTransaction$Outbound` instead. */
  export type Outbound = BalanceByTransaction$Outbound;
}

export function balanceByTransactionToJSON(
  balanceByTransaction: BalanceByTransaction,
): string {
  return JSON.stringify(
    BalanceByTransaction$outboundSchema.parse(balanceByTransaction),
  );
}

export function balanceByTransactionFromJSON(
  jsonString: string,
): SafeParseResult<BalanceByTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceByTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceByTransaction' from JSON`,
  );
}
