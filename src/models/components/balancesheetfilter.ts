/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BalanceSheetFilter = {
  /**
   * Filter by start date. If start date is given, end date is required.
   */
  startDate?: string | undefined;
  /**
   * Filter by end date. If end date is given, start date is required.
   */
  endDate?: string | undefined;
};

/** @internal */
export const BalanceSheetFilter$inboundSchema: z.ZodType<
  BalanceSheetFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type BalanceSheetFilter$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const BalanceSheetFilter$outboundSchema: z.ZodType<
  BalanceSheetFilter$Outbound,
  z.ZodTypeDef,
  BalanceSheetFilter
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceSheetFilter$ {
  /** @deprecated use `BalanceSheetFilter$inboundSchema` instead. */
  export const inboundSchema = BalanceSheetFilter$inboundSchema;
  /** @deprecated use `BalanceSheetFilter$outboundSchema` instead. */
  export const outboundSchema = BalanceSheetFilter$outboundSchema;
  /** @deprecated use `BalanceSheetFilter$Outbound` instead. */
  export type Outbound = BalanceSheetFilter$Outbound;
}

export function balanceSheetFilterToJSON(
  balanceSheetFilter: BalanceSheetFilter,
): string {
  return JSON.stringify(
    BalanceSheetFilter$outboundSchema.parse(balanceSheetFilter),
  );
}

export function balanceSheetFilterFromJSON(
  jsonString: string,
): SafeParseResult<BalanceSheetFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceSheetFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceSheetFilter' from JSON`,
  );
}
