/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Wildcard indicating all resources and fields when Data Scopes is disabled
 */
export const Two = {
  Wildcard: "*",
} as const;
/**
 * Wildcard indicating all resources and fields when Data Scopes is disabled
 */
export type Two = ClosedEnum<typeof Two>;

export type One = {
  /**
   * Whether the field can be read
   */
  read?: boolean | undefined;
  /**
   * Whether the field can be written to
   */
  write?: boolean | undefined;
};

export type UpdateConsentRequestResources = {
  [k: string]: { [k: string]: One };
} | Two;

export type UpdateConsentRequest = {
  resources: { [k: string]: { [k: string]: One } } | Two;
  /**
   * Whether consent is being granted (true) or denied/revoked (false)
   */
  granted: boolean;
};

/** @internal */
export const Two$inboundSchema: z.ZodNativeEnum<typeof Two> = z.nativeEnum(Two);

/** @internal */
export const Two$outboundSchema: z.ZodNativeEnum<typeof Two> =
  Two$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    read: z.boolean().optional(),
    write: z.boolean().optional(),
  });

/** @internal */
export type One$Outbound = {
  read?: boolean | undefined;
  write?: boolean | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    read: z.boolean().optional(),
    write: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const UpdateConsentRequestResources$inboundSchema: z.ZodType<
  UpdateConsentRequestResources,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.record(z.record(z.lazy(() => One$inboundSchema))),
  Two$inboundSchema,
]);

/** @internal */
export type UpdateConsentRequestResources$Outbound = {
  [k: string]: { [k: string]: One$Outbound };
} | string;

/** @internal */
export const UpdateConsentRequestResources$outboundSchema: z.ZodType<
  UpdateConsentRequestResources$Outbound,
  z.ZodTypeDef,
  UpdateConsentRequestResources
> = z.union([
  z.record(z.record(z.lazy(() => One$outboundSchema))),
  Two$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConsentRequestResources$ {
  /** @deprecated use `UpdateConsentRequestResources$inboundSchema` instead. */
  export const inboundSchema = UpdateConsentRequestResources$inboundSchema;
  /** @deprecated use `UpdateConsentRequestResources$outboundSchema` instead. */
  export const outboundSchema = UpdateConsentRequestResources$outboundSchema;
  /** @deprecated use `UpdateConsentRequestResources$Outbound` instead. */
  export type Outbound = UpdateConsentRequestResources$Outbound;
}

export function updateConsentRequestResourcesToJSON(
  updateConsentRequestResources: UpdateConsentRequestResources,
): string {
  return JSON.stringify(
    UpdateConsentRequestResources$outboundSchema.parse(
      updateConsentRequestResources,
    ),
  );
}

export function updateConsentRequestResourcesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConsentRequestResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConsentRequestResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConsentRequestResources' from JSON`,
  );
}

/** @internal */
export const UpdateConsentRequest$inboundSchema: z.ZodType<
  UpdateConsentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.union([
    z.record(z.record(z.lazy(() => One$inboundSchema))),
    Two$inboundSchema,
  ]),
  granted: z.boolean(),
});

/** @internal */
export type UpdateConsentRequest$Outbound = {
  resources: { [k: string]: { [k: string]: One$Outbound } } | string;
  granted: boolean;
};

/** @internal */
export const UpdateConsentRequest$outboundSchema: z.ZodType<
  UpdateConsentRequest$Outbound,
  z.ZodTypeDef,
  UpdateConsentRequest
> = z.object({
  resources: z.union([
    z.record(z.record(z.lazy(() => One$outboundSchema))),
    Two$outboundSchema,
  ]),
  granted: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateConsentRequest$ {
  /** @deprecated use `UpdateConsentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateConsentRequest$inboundSchema;
  /** @deprecated use `UpdateConsentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateConsentRequest$outboundSchema;
  /** @deprecated use `UpdateConsentRequest$Outbound` instead. */
  export type Outbound = UpdateConsentRequest$Outbound;
}

export function updateConsentRequestToJSON(
  updateConsentRequest: UpdateConsentRequest,
): string {
  return JSON.stringify(
    UpdateConsentRequest$outboundSchema.parse(updateConsentRequest),
  );
}

export function updateConsentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateConsentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateConsentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateConsentRequest' from JSON`,
  );
}
