/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EcommerceProductsFilter = {
  /**
   * Product name to filter on
   */
  name?: string | undefined;
  /**
   * Minimum date the product was last modified
   */
  updatedSince?: string | undefined;
  /**
   * Minimum date the product was created
   */
  createdSince?: string | undefined;
};

/** @internal */
export const EcommerceProductsFilter$inboundSchema: z.ZodType<
  EcommerceProductsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  updated_since: z.string().optional(),
  created_since: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_since": "updatedSince",
    "created_since": "createdSince",
  });
});

/** @internal */
export type EcommerceProductsFilter$Outbound = {
  name?: string | undefined;
  updated_since?: string | undefined;
  created_since?: string | undefined;
};

/** @internal */
export const EcommerceProductsFilter$outboundSchema: z.ZodType<
  EcommerceProductsFilter$Outbound,
  z.ZodTypeDef,
  EcommerceProductsFilter
> = z.object({
  name: z.string().optional(),
  updatedSince: z.string().optional(),
  createdSince: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    updatedSince: "updated_since",
    createdSince: "created_since",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceProductsFilter$ {
  /** @deprecated use `EcommerceProductsFilter$inboundSchema` instead. */
  export const inboundSchema = EcommerceProductsFilter$inboundSchema;
  /** @deprecated use `EcommerceProductsFilter$outboundSchema` instead. */
  export const outboundSchema = EcommerceProductsFilter$outboundSchema;
  /** @deprecated use `EcommerceProductsFilter$Outbound` instead. */
  export type Outbound = EcommerceProductsFilter$Outbound;
}

export function ecommerceProductsFilterToJSON(
  ecommerceProductsFilter: EcommerceProductsFilter,
): string {
  return JSON.stringify(
    EcommerceProductsFilter$outboundSchema.parse(ecommerceProductsFilter),
  );
}

export function ecommerceProductsFilterFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceProductsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceProductsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceProductsFilter' from JSON`,
  );
}
