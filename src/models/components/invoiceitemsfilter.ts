/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
 */
export const InvoiceItemType = {
  Inventory: "inventory",
  Service: "service",
  Other: "other",
} as const;
/**
 * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
 */
export type InvoiceItemType = ClosedEnum<typeof InvoiceItemType>;

export type InvoiceItemsFilter = {
  /**
   * Name of Invoice Items to search for
   */
  name?: string | undefined;
  /**
   * The type of invoice item, indicating whether it is an inventory item, a service, or another type.
   */
  type?: InvoiceItemType | null | undefined;
};

/** @internal */
export const InvoiceItemType$inboundSchema: z.ZodNativeEnum<
  typeof InvoiceItemType
> = z.nativeEnum(InvoiceItemType);

/** @internal */
export const InvoiceItemType$outboundSchema: z.ZodNativeEnum<
  typeof InvoiceItemType
> = InvoiceItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceItemType$ {
  /** @deprecated use `InvoiceItemType$inboundSchema` instead. */
  export const inboundSchema = InvoiceItemType$inboundSchema;
  /** @deprecated use `InvoiceItemType$outboundSchema` instead. */
  export const outboundSchema = InvoiceItemType$outboundSchema;
}

/** @internal */
export const InvoiceItemsFilter$inboundSchema: z.ZodType<
  InvoiceItemsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: z.nullable(InvoiceItemType$inboundSchema).optional(),
});

/** @internal */
export type InvoiceItemsFilter$Outbound = {
  name?: string | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const InvoiceItemsFilter$outboundSchema: z.ZodType<
  InvoiceItemsFilter$Outbound,
  z.ZodTypeDef,
  InvoiceItemsFilter
> = z.object({
  name: z.string().optional(),
  type: z.nullable(InvoiceItemType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceItemsFilter$ {
  /** @deprecated use `InvoiceItemsFilter$inboundSchema` instead. */
  export const inboundSchema = InvoiceItemsFilter$inboundSchema;
  /** @deprecated use `InvoiceItemsFilter$outboundSchema` instead. */
  export const outboundSchema = InvoiceItemsFilter$outboundSchema;
  /** @deprecated use `InvoiceItemsFilter$Outbound` instead. */
  export type Outbound = InvoiceItemsFilter$Outbound;
}

export function invoiceItemsFilterToJSON(
  invoiceItemsFilter: InvoiceItemsFilter,
): string {
  return JSON.stringify(
    InvoiceItemsFilter$outboundSchema.parse(invoiceItemsFilter),
  );
}

export function invoiceItemsFilterFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceItemsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceItemsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceItemsFilter' from JSON`,
  );
}
