/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

/**
 * The supplier this entity is linked to.
 */
export type LinkedSupplierInput = {
  /**
   * The ID of the supplier this entity is linked to.
   */
  id?: string | undefined;
  /**
   * The display name of the supplier.
   */
  displayName?: string | null | undefined;
  address?: Address | undefined;
};

/** @internal */
export const LinkedSupplierInput$inboundSchema: z.ZodType<
  LinkedSupplierInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  display_name: z.nullable(z.string()).optional(),
  address: Address$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type LinkedSupplierInput$Outbound = {
  id?: string | undefined;
  display_name?: string | null | undefined;
  address?: Address$Outbound | undefined;
};

/** @internal */
export const LinkedSupplierInput$outboundSchema: z.ZodType<
  LinkedSupplierInput$Outbound,
  z.ZodTypeDef,
  LinkedSupplierInput
> = z.object({
  id: z.string().optional(),
  displayName: z.nullable(z.string()).optional(),
  address: Address$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedSupplierInput$ {
  /** @deprecated use `LinkedSupplierInput$inboundSchema` instead. */
  export const inboundSchema = LinkedSupplierInput$inboundSchema;
  /** @deprecated use `LinkedSupplierInput$outboundSchema` instead. */
  export const outboundSchema = LinkedSupplierInput$outboundSchema;
  /** @deprecated use `LinkedSupplierInput$Outbound` instead. */
  export type Outbound = LinkedSupplierInput$Outbound;
}
