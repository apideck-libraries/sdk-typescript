/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Employee,
  Employee$inboundSchema,
  Employee$Outbound,
  Employee$outboundSchema,
} from "./employee.js";
import {
  Schedule,
  Schedule$inboundSchema,
  Schedule$Outbound,
  Schedule$outboundSchema,
} from "./schedule.js";

export type EmployeeSchedules = {
  employee?: Employee | undefined;
  schedules?: Array<Schedule> | null | undefined;
};

/** @internal */
export const EmployeeSchedules$inboundSchema: z.ZodType<
  EmployeeSchedules,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee: Employee$inboundSchema.optional(),
  schedules: z.nullable(z.array(Schedule$inboundSchema)).optional(),
});

/** @internal */
export type EmployeeSchedules$Outbound = {
  employee?: Employee$Outbound | undefined;
  schedules?: Array<Schedule$Outbound> | null | undefined;
};

/** @internal */
export const EmployeeSchedules$outboundSchema: z.ZodType<
  EmployeeSchedules$Outbound,
  z.ZodTypeDef,
  EmployeeSchedules
> = z.object({
  employee: Employee$outboundSchema.optional(),
  schedules: z.nullable(z.array(Schedule$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeSchedules$ {
  /** @deprecated use `EmployeeSchedules$inboundSchema` instead. */
  export const inboundSchema = EmployeeSchedules$inboundSchema;
  /** @deprecated use `EmployeeSchedules$outboundSchema` instead. */
  export const outboundSchema = EmployeeSchedules$outboundSchema;
  /** @deprecated use `EmployeeSchedules$Outbound` instead. */
  export type Outbound = EmployeeSchedules$Outbound;
}

export function employeeSchedulesToJSON(
  employeeSchedules: EmployeeSchedules,
): string {
  return JSON.stringify(
    EmployeeSchedules$outboundSchema.parse(employeeSchedules),
  );
}

export function employeeSchedulesFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeSchedules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeSchedules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeSchedules' from JSON`,
  );
}
