/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DataScopesResources,
  DataScopesResources$inboundSchema,
  DataScopesResources$Outbound,
  DataScopesResources$outboundSchema,
} from "./datascopesresources.js";

export type ConsentRecordInput = {
  /**
   * Whether consent was granted (true) or denied/revoked (false)
   */
  granted: boolean;
  /**
   * Data scopes resource configuration that can be either detailed field permissions or a wildcard
   */
  resources: DataScopesResources;
};

/** @internal */
export const ConsentRecordInput$inboundSchema: z.ZodType<
  ConsentRecordInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  granted: z.boolean(),
  resources: DataScopesResources$inboundSchema,
});

/** @internal */
export type ConsentRecordInput$Outbound = {
  granted: boolean;
  resources: DataScopesResources$Outbound;
};

/** @internal */
export const ConsentRecordInput$outboundSchema: z.ZodType<
  ConsentRecordInput$Outbound,
  z.ZodTypeDef,
  ConsentRecordInput
> = z.object({
  granted: z.boolean(),
  resources: DataScopesResources$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConsentRecordInput$ {
  /** @deprecated use `ConsentRecordInput$inboundSchema` instead. */
  export const inboundSchema = ConsentRecordInput$inboundSchema;
  /** @deprecated use `ConsentRecordInput$outboundSchema` instead. */
  export const outboundSchema = ConsentRecordInput$outboundSchema;
  /** @deprecated use `ConsentRecordInput$Outbound` instead. */
  export type Outbound = ConsentRecordInput$Outbound;
}

export function consentRecordInputToJSON(
  consentRecordInput: ConsentRecordInput,
): string {
  return JSON.stringify(
    ConsentRecordInput$outboundSchema.parse(consentRecordInput),
  );
}

export function consentRecordInputFromJSON(
  jsonString: string,
): SafeParseResult<ConsentRecordInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConsentRecordInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConsentRecordInput' from JSON`,
  );
}
