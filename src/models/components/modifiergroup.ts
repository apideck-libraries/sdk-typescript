/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  Currency,
  Currency$inboundSchema,
  Currency$outboundSchema,
} from "./currency.js";
import {
  CustomMappings,
  CustomMappings$inboundSchema,
  CustomMappings$Outbound,
  CustomMappings$outboundSchema,
} from "./custommappings.js";
import {
  PassThroughBody,
  PassThroughBody$inboundSchema,
  PassThroughBody$Outbound,
  PassThroughBody$outboundSchema,
} from "./passthroughbody.js";

export const IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers =
  {
    Single: "single",
    Multiple: "multiple",
  } as const;
export type IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers =
  ClosedEnum<
    typeof IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers
  >;

export type Modifiers = {
  id?: string | undefined;
  name?: string | undefined;
  alternateName?: string | undefined;
  priceAmount?: number | undefined;
  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  currency?: Currency | null | undefined;
  available?: boolean | null | undefined;
};

export type ModifierGroup = {
  /**
   * A unique identifier for an object.
   */
  id?: string | undefined;
  name?: string | undefined;
  alternateName?: string | undefined;
  minimumRequired?: number | undefined;
  maximumAllowed?: number | undefined;
  selectionType?:
    | IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers
    | undefined;
  presentAtAllLocations?: boolean | undefined;
  modifiers?: Array<Modifiers> | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * When custom mappings are configured on the resource, the result is included here.
   */
  customMappings?: CustomMappings | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * The user who last updated the object.
   */
  updatedBy?: string | null | undefined;
  /**
   * The user who created the object.
   */
  createdBy?: string | null | undefined;
  /**
   * The date and time when the object was last updated.
   */
  updatedAt?: Date | null | undefined;
  /**
   * The date and time when the object was created.
   */
  createdAt?: Date | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

export type ModifierGroupInput = {
  name?: string | undefined;
  alternateName?: string | undefined;
  minimumRequired?: number | undefined;
  maximumAllowed?: number | undefined;
  selectionType?:
    | IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers
    | undefined;
  presentAtAllLocations?: boolean | undefined;
  modifiers?: Array<Modifiers> | undefined;
  /**
   * Flag to indicate if the object is deleted.
   */
  deleted?: boolean | null | undefined;
  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  rowVersion?: string | null | undefined;
  /**
   * The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
   */
  passThrough?: Array<PassThroughBody> | undefined;
};

/** @internal */
export const IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema:
  z.ZodNativeEnum<
    typeof IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers
  > = z.nativeEnum(
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers,
  );

/** @internal */
export const IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$outboundSchema:
  z.ZodNativeEnum<
    typeof IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers
  > =
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$ {
  /** @deprecated use `IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema` instead. */
  export const inboundSchema =
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema;
  /** @deprecated use `IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$outboundSchema` instead. */
  export const outboundSchema =
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$outboundSchema;
}

/** @internal */
export const Modifiers$inboundSchema: z.ZodType<
  Modifiers,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  alternate_name: z.string().optional(),
  price_amount: z.number().optional(),
  currency: z.nullable(Currency$inboundSchema).optional(),
  available: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "alternate_name": "alternateName",
    "price_amount": "priceAmount",
  });
});

/** @internal */
export type Modifiers$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  alternate_name?: string | undefined;
  price_amount?: number | undefined;
  currency?: string | null | undefined;
  available?: boolean | null | undefined;
};

/** @internal */
export const Modifiers$outboundSchema: z.ZodType<
  Modifiers$Outbound,
  z.ZodTypeDef,
  Modifiers
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  alternateName: z.string().optional(),
  priceAmount: z.number().optional(),
  currency: z.nullable(Currency$outboundSchema).optional(),
  available: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    alternateName: "alternate_name",
    priceAmount: "price_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Modifiers$ {
  /** @deprecated use `Modifiers$inboundSchema` instead. */
  export const inboundSchema = Modifiers$inboundSchema;
  /** @deprecated use `Modifiers$outboundSchema` instead. */
  export const outboundSchema = Modifiers$outboundSchema;
  /** @deprecated use `Modifiers$Outbound` instead. */
  export type Outbound = Modifiers$Outbound;
}

/** @internal */
export const ModifierGroup$inboundSchema: z.ZodType<
  ModifierGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  alternate_name: z.string().optional(),
  minimum_required: z.number().int().optional(),
  maximum_allowed: z.number().int().optional(),
  selection_type:
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema
      .optional(),
  present_at_all_locations: z.boolean().optional(),
  modifiers: z.array(z.lazy(() => Modifiers$inboundSchema)).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  custom_mappings: z.nullable(CustomMappings$inboundSchema).optional(),
  row_version: z.nullable(z.string()).optional(),
  updated_by: z.nullable(z.string()).optional(),
  created_by: z.nullable(z.string()).optional(),
  updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "alternate_name": "alternateName",
    "minimum_required": "minimumRequired",
    "maximum_allowed": "maximumAllowed",
    "selection_type": "selectionType",
    "present_at_all_locations": "presentAtAllLocations",
    "custom_mappings": "customMappings",
    "row_version": "rowVersion",
    "updated_by": "updatedBy",
    "created_by": "createdBy",
    "updated_at": "updatedAt",
    "created_at": "createdAt",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ModifierGroup$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  alternate_name?: string | undefined;
  minimum_required?: number | undefined;
  maximum_allowed?: number | undefined;
  selection_type?: string | undefined;
  present_at_all_locations?: boolean | undefined;
  modifiers?: Array<Modifiers$Outbound> | undefined;
  deleted?: boolean | null | undefined;
  custom_mappings?: CustomMappings$Outbound | null | undefined;
  row_version?: string | null | undefined;
  updated_by?: string | null | undefined;
  created_by?: string | null | undefined;
  updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const ModifierGroup$outboundSchema: z.ZodType<
  ModifierGroup$Outbound,
  z.ZodTypeDef,
  ModifierGroup
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  alternateName: z.string().optional(),
  minimumRequired: z.number().int().optional(),
  maximumAllowed: z.number().int().optional(),
  selectionType:
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$outboundSchema
      .optional(),
  presentAtAllLocations: z.boolean().optional(),
  modifiers: z.array(z.lazy(() => Modifiers$outboundSchema)).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  customMappings: z.nullable(CustomMappings$outboundSchema).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdBy: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    alternateName: "alternate_name",
    minimumRequired: "minimum_required",
    maximumAllowed: "maximum_allowed",
    selectionType: "selection_type",
    presentAtAllLocations: "present_at_all_locations",
    customMappings: "custom_mappings",
    rowVersion: "row_version",
    updatedBy: "updated_by",
    createdBy: "created_by",
    updatedAt: "updated_at",
    createdAt: "created_at",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifierGroup$ {
  /** @deprecated use `ModifierGroup$inboundSchema` instead. */
  export const inboundSchema = ModifierGroup$inboundSchema;
  /** @deprecated use `ModifierGroup$outboundSchema` instead. */
  export const outboundSchema = ModifierGroup$outboundSchema;
  /** @deprecated use `ModifierGroup$Outbound` instead. */
  export type Outbound = ModifierGroup$Outbound;
}

/** @internal */
export const ModifierGroupInput$inboundSchema: z.ZodType<
  ModifierGroupInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  alternate_name: z.string().optional(),
  minimum_required: z.number().int().optional(),
  maximum_allowed: z.number().int().optional(),
  selection_type:
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$inboundSchema
      .optional(),
  present_at_all_locations: z.boolean().optional(),
  modifiers: z.array(z.lazy(() => Modifiers$inboundSchema)).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  row_version: z.nullable(z.string()).optional(),
  pass_through: z.array(PassThroughBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "alternate_name": "alternateName",
    "minimum_required": "minimumRequired",
    "maximum_allowed": "maximumAllowed",
    "selection_type": "selectionType",
    "present_at_all_locations": "presentAtAllLocations",
    "row_version": "rowVersion",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type ModifierGroupInput$Outbound = {
  name?: string | undefined;
  alternate_name?: string | undefined;
  minimum_required?: number | undefined;
  maximum_allowed?: number | undefined;
  selection_type?: string | undefined;
  present_at_all_locations?: boolean | undefined;
  modifiers?: Array<Modifiers$Outbound> | undefined;
  deleted?: boolean | null | undefined;
  row_version?: string | null | undefined;
  pass_through?: Array<PassThroughBody$Outbound> | undefined;
};

/** @internal */
export const ModifierGroupInput$outboundSchema: z.ZodType<
  ModifierGroupInput$Outbound,
  z.ZodTypeDef,
  ModifierGroupInput
> = z.object({
  name: z.string().optional(),
  alternateName: z.string().optional(),
  minimumRequired: z.number().int().optional(),
  maximumAllowed: z.number().int().optional(),
  selectionType:
    IndicatesWhetherMultipleOptionsFromTheModifierGroupCanBeAppliedToASingleOrMultipleModifiers$outboundSchema
      .optional(),
  presentAtAllLocations: z.boolean().optional(),
  modifiers: z.array(z.lazy(() => Modifiers$outboundSchema)).optional(),
  deleted: z.nullable(z.boolean()).optional(),
  rowVersion: z.nullable(z.string()).optional(),
  passThrough: z.array(PassThroughBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    alternateName: "alternate_name",
    minimumRequired: "minimum_required",
    maximumAllowed: "maximum_allowed",
    selectionType: "selection_type",
    presentAtAllLocations: "present_at_all_locations",
    rowVersion: "row_version",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifierGroupInput$ {
  /** @deprecated use `ModifierGroupInput$inboundSchema` instead. */
  export const inboundSchema = ModifierGroupInput$inboundSchema;
  /** @deprecated use `ModifierGroupInput$outboundSchema` instead. */
  export const outboundSchema = ModifierGroupInput$outboundSchema;
  /** @deprecated use `ModifierGroupInput$Outbound` instead. */
  export type Outbound = ModifierGroupInput$Outbound;
}
