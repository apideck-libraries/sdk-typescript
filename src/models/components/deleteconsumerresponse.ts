/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteConsumerResponseData = {
  /**
   * Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
   */
  consumerId?: string | undefined;
};

/**
 * Consumer deleted
 */
export type DeleteConsumerResponse = {
  /**
   * HTTP Response Status Code
   */
  statusCode: number;
  /**
   * HTTP Response Status
   */
  status: string;
  data: DeleteConsumerResponseData;
  /**
   * Raw response from the integration when raw=true query param is provided
   */
  raw?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const DeleteConsumerResponseData$inboundSchema: z.ZodType<
  DeleteConsumerResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumer_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "consumer_id": "consumerId",
  });
});

/** @internal */
export type DeleteConsumerResponseData$Outbound = {
  consumer_id?: string | undefined;
};

/** @internal */
export const DeleteConsumerResponseData$outboundSchema: z.ZodType<
  DeleteConsumerResponseData$Outbound,
  z.ZodTypeDef,
  DeleteConsumerResponseData
> = z.object({
  consumerId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    consumerId: "consumer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConsumerResponseData$ {
  /** @deprecated use `DeleteConsumerResponseData$inboundSchema` instead. */
  export const inboundSchema = DeleteConsumerResponseData$inboundSchema;
  /** @deprecated use `DeleteConsumerResponseData$outboundSchema` instead. */
  export const outboundSchema = DeleteConsumerResponseData$outboundSchema;
  /** @deprecated use `DeleteConsumerResponseData$Outbound` instead. */
  export type Outbound = DeleteConsumerResponseData$Outbound;
}

export function deleteConsumerResponseDataToJSON(
  deleteConsumerResponseData: DeleteConsumerResponseData,
): string {
  return JSON.stringify(
    DeleteConsumerResponseData$outboundSchema.parse(deleteConsumerResponseData),
  );
}

export function deleteConsumerResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConsumerResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConsumerResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConsumerResponseData' from JSON`,
  );
}

/** @internal */
export const DeleteConsumerResponse$inboundSchema: z.ZodType<
  DeleteConsumerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status_code: z.number().int(),
  status: z.string(),
  data: z.lazy(() => DeleteConsumerResponseData$inboundSchema),
  _raw: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "status_code": "statusCode",
    "_raw": "raw",
  });
});

/** @internal */
export type DeleteConsumerResponse$Outbound = {
  status_code: number;
  status: string;
  data: DeleteConsumerResponseData$Outbound;
  _raw?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const DeleteConsumerResponse$outboundSchema: z.ZodType<
  DeleteConsumerResponse$Outbound,
  z.ZodTypeDef,
  DeleteConsumerResponse
> = z.object({
  statusCode: z.number().int(),
  status: z.string(),
  data: z.lazy(() => DeleteConsumerResponseData$outboundSchema),
  raw: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    statusCode: "status_code",
    raw: "_raw",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConsumerResponse$ {
  /** @deprecated use `DeleteConsumerResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteConsumerResponse$inboundSchema;
  /** @deprecated use `DeleteConsumerResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteConsumerResponse$outboundSchema;
  /** @deprecated use `DeleteConsumerResponse$Outbound` instead. */
  export type Outbound = DeleteConsumerResponse$Outbound;
}

export function deleteConsumerResponseToJSON(
  deleteConsumerResponse: DeleteConsumerResponse,
): string {
  return JSON.stringify(
    DeleteConsumerResponse$outboundSchema.parse(deleteConsumerResponse),
  );
}

export function deleteConsumerResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConsumerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConsumerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConsumerResponse' from JSON`,
  );
}
