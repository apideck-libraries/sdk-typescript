/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LinkedWorktag = {
  /**
   * The unique identifier for the worktag.
   */
  id?: string | undefined;
  /**
   * The value of the worktag.
   */
  value?: string | null | undefined;
};

/** @internal */
export const LinkedWorktag$inboundSchema: z.ZodType<
  LinkedWorktag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type LinkedWorktag$Outbound = {
  id?: string | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const LinkedWorktag$outboundSchema: z.ZodType<
  LinkedWorktag$Outbound,
  z.ZodTypeDef,
  LinkedWorktag
> = z.object({
  id: z.string().optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LinkedWorktag$ {
  /** @deprecated use `LinkedWorktag$inboundSchema` instead. */
  export const inboundSchema = LinkedWorktag$inboundSchema;
  /** @deprecated use `LinkedWorktag$outboundSchema` instead. */
  export const outboundSchema = LinkedWorktag$outboundSchema;
  /** @deprecated use `LinkedWorktag$Outbound` instead. */
  export type Outbound = LinkedWorktag$Outbound;
}

export function linkedWorktagToJSON(linkedWorktag: LinkedWorktag): string {
  return JSON.stringify(LinkedWorktag$outboundSchema.parse(linkedWorktag));
}

export function linkedWorktagFromJSON(
  jsonString: string,
): SafeParseResult<LinkedWorktag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LinkedWorktag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LinkedWorktag' from JSON`,
  );
}
