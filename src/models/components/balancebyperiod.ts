/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BalanceByTransaction,
  BalanceByTransaction$inboundSchema,
  BalanceByTransaction$Outbound,
  BalanceByTransaction$outboundSchema,
} from "./balancebytransaction.js";

export type BalanceByPeriod = {
  /**
   * Start date of the period.
   */
  startDate?: RFCDate | undefined;
  /**
   * End date of the period.
   */
  endDate?: RFCDate | undefined;
  /**
   * Total amount of the period.
   */
  totalAmount?: number | undefined;
  balancesByTransaction?: Array<BalanceByTransaction> | undefined;
};

/** @internal */
export const BalanceByPeriod$inboundSchema: z.ZodType<
  BalanceByPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)).optional(),
  end_date: z.string().transform(v => new RFCDate(v)).optional(),
  total_amount: z.number().optional(),
  balances_by_transaction: z.array(BalanceByTransaction$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "total_amount": "totalAmount",
    "balances_by_transaction": "balancesByTransaction",
  });
});

/** @internal */
export type BalanceByPeriod$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  total_amount?: number | undefined;
  balances_by_transaction?: Array<BalanceByTransaction$Outbound> | undefined;
};

/** @internal */
export const BalanceByPeriod$outboundSchema: z.ZodType<
  BalanceByPeriod$Outbound,
  z.ZodTypeDef,
  BalanceByPeriod
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  totalAmount: z.number().optional(),
  balancesByTransaction: z.array(BalanceByTransaction$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    totalAmount: "total_amount",
    balancesByTransaction: "balances_by_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BalanceByPeriod$ {
  /** @deprecated use `BalanceByPeriod$inboundSchema` instead. */
  export const inboundSchema = BalanceByPeriod$inboundSchema;
  /** @deprecated use `BalanceByPeriod$outboundSchema` instead. */
  export const outboundSchema = BalanceByPeriod$outboundSchema;
  /** @deprecated use `BalanceByPeriod$Outbound` instead. */
  export type Outbound = BalanceByPeriod$Outbound;
}

export function balanceByPeriodToJSON(
  balanceByPeriod: BalanceByPeriod,
): string {
  return JSON.stringify(BalanceByPeriod$outboundSchema.parse(balanceByPeriod));
}

export function balanceByPeriodFromJSON(
  jsonString: string,
): SafeParseResult<BalanceByPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BalanceByPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BalanceByPeriod' from JSON`,
  );
}
