/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingInvoicesUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingInvoicesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  invoice: components.InvoiceInput;
};

export type AccountingInvoicesUpdateResponse =
  | components.UpdateInvoiceResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingInvoicesUpdateGlobals$inboundSchema: z.ZodType<
  AccountingInvoicesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingInvoicesUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingInvoicesUpdateGlobals$outboundSchema: z.ZodType<
  AccountingInvoicesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesUpdateGlobals$ {
  /** @deprecated use `AccountingInvoicesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingInvoicesUpdateGlobals$Outbound;
}

/** @internal */
export const AccountingInvoicesUpdateRequest$inboundSchema: z.ZodType<
  AccountingInvoicesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Invoice: components.InvoiceInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Invoice": "invoice",
  });
});

/** @internal */
export type AccountingInvoicesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  Invoice: components.InvoiceInput$Outbound;
};

/** @internal */
export const AccountingInvoicesUpdateRequest$outboundSchema: z.ZodType<
  AccountingInvoicesUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  invoice: components.InvoiceInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    invoice: "Invoice",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesUpdateRequest$ {
  /** @deprecated use `AccountingInvoicesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingInvoicesUpdateRequest$Outbound;
}

/** @internal */
export const AccountingInvoicesUpdateResponse$inboundSchema: z.ZodType<
  AccountingInvoicesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UpdateInvoiceResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingInvoicesUpdateResponse$Outbound =
  | components.UpdateInvoiceResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingInvoicesUpdateResponse$outboundSchema: z.ZodType<
  AccountingInvoicesUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesUpdateResponse
> = z.union([
  components.UpdateInvoiceResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesUpdateResponse$ {
  /** @deprecated use `AccountingInvoicesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingInvoicesUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingInvoicesUpdateResponse$Outbound;
}
