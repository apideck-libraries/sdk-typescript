/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosLocationsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosLocationsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  location: components.LocationInput;
};

export type PosLocationsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Locations
   */
  createLocationResponse?: components.CreateLocationResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosLocationsAddGlobals$inboundSchema: z.ZodType<
  PosLocationsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosLocationsAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosLocationsAddGlobals$outboundSchema: z.ZodType<
  PosLocationsAddGlobals$Outbound,
  z.ZodTypeDef,
  PosLocationsAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsAddGlobals$ {
  /** @deprecated use `PosLocationsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = PosLocationsAddGlobals$inboundSchema;
  /** @deprecated use `PosLocationsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = PosLocationsAddGlobals$outboundSchema;
  /** @deprecated use `PosLocationsAddGlobals$Outbound` instead. */
  export type Outbound = PosLocationsAddGlobals$Outbound;
}

/** @internal */
export const PosLocationsAddRequest$inboundSchema: z.ZodType<
  PosLocationsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Location: components.LocationInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Location": "location",
  });
});

/** @internal */
export type PosLocationsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Location: components.LocationInput$Outbound;
};

/** @internal */
export const PosLocationsAddRequest$outboundSchema: z.ZodType<
  PosLocationsAddRequest$Outbound,
  z.ZodTypeDef,
  PosLocationsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  location: components.LocationInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    location: "Location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsAddRequest$ {
  /** @deprecated use `PosLocationsAddRequest$inboundSchema` instead. */
  export const inboundSchema = PosLocationsAddRequest$inboundSchema;
  /** @deprecated use `PosLocationsAddRequest$outboundSchema` instead. */
  export const outboundSchema = PosLocationsAddRequest$outboundSchema;
  /** @deprecated use `PosLocationsAddRequest$Outbound` instead. */
  export type Outbound = PosLocationsAddRequest$Outbound;
}

/** @internal */
export const PosLocationsAddResponse$inboundSchema: z.ZodType<
  PosLocationsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateLocationResponse: components.CreateLocationResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateLocationResponse": "createLocationResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosLocationsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateLocationResponse?:
    | components.CreateLocationResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosLocationsAddResponse$outboundSchema: z.ZodType<
  PosLocationsAddResponse$Outbound,
  z.ZodTypeDef,
  PosLocationsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createLocationResponse: components.CreateLocationResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createLocationResponse: "CreateLocationResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsAddResponse$ {
  /** @deprecated use `PosLocationsAddResponse$inboundSchema` instead. */
  export const inboundSchema = PosLocationsAddResponse$inboundSchema;
  /** @deprecated use `PosLocationsAddResponse$outboundSchema` instead. */
  export const outboundSchema = PosLocationsAddResponse$outboundSchema;
  /** @deprecated use `PosLocationsAddResponse$Outbound` instead. */
  export type Outbound = PosLocationsAddResponse$Outbound;
}
