/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VaultConnectionConsentsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type VaultConnectionConsentsAllRequest = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Service ID of the resource to return
   */
  serviceId: string;
  /**
   * Unified API
   */
  unifiedApi: string;
};

export type VaultConnectionConsentsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Consent records
   */
  getConsentRecordsResponse?: components.GetConsentRecordsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const VaultConnectionConsentsAllGlobals$inboundSchema: z.ZodType<
  VaultConnectionConsentsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type VaultConnectionConsentsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const VaultConnectionConsentsAllGlobals$outboundSchema: z.ZodType<
  VaultConnectionConsentsAllGlobals$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentsAllGlobals$ {
  /** @deprecated use `VaultConnectionConsentsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionConsentsAllGlobals$inboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllGlobals$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentsAllGlobals$outboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllGlobals$Outbound` instead. */
  export type Outbound = VaultConnectionConsentsAllGlobals$Outbound;
}

export function vaultConnectionConsentsAllGlobalsToJSON(
  vaultConnectionConsentsAllGlobals: VaultConnectionConsentsAllGlobals,
): string {
  return JSON.stringify(
    VaultConnectionConsentsAllGlobals$outboundSchema.parse(
      vaultConnectionConsentsAllGlobals,
    ),
  );
}

export function vaultConnectionConsentsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionConsentsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentsAllGlobals' from JSON`,
  );
}

/** @internal */
export const VaultConnectionConsentsAllRequest$inboundSchema: z.ZodType<
  VaultConnectionConsentsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  service_id: z.string(),
  unified_api: z.string(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "unified_api": "unifiedApi",
  });
});

/** @internal */
export type VaultConnectionConsentsAllRequest$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
  service_id: string;
  unified_api: string;
};

/** @internal */
export const VaultConnectionConsentsAllRequest$outboundSchema: z.ZodType<
  VaultConnectionConsentsAllRequest$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentsAllRequest
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string(),
  unifiedApi: z.string(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    unifiedApi: "unified_api",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentsAllRequest$ {
  /** @deprecated use `VaultConnectionConsentsAllRequest$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionConsentsAllRequest$inboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllRequest$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentsAllRequest$outboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllRequest$Outbound` instead. */
  export type Outbound = VaultConnectionConsentsAllRequest$Outbound;
}

export function vaultConnectionConsentsAllRequestToJSON(
  vaultConnectionConsentsAllRequest: VaultConnectionConsentsAllRequest,
): string {
  return JSON.stringify(
    VaultConnectionConsentsAllRequest$outboundSchema.parse(
      vaultConnectionConsentsAllRequest,
    ),
  );
}

export function vaultConnectionConsentsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionConsentsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentsAllRequest' from JSON`,
  );
}

/** @internal */
export const VaultConnectionConsentsAllResponse$inboundSchema: z.ZodType<
  VaultConnectionConsentsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetConsentRecordsResponse: components.GetConsentRecordsResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetConsentRecordsResponse": "getConsentRecordsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type VaultConnectionConsentsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetConsentRecordsResponse?:
    | components.GetConsentRecordsResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const VaultConnectionConsentsAllResponse$outboundSchema: z.ZodType<
  VaultConnectionConsentsAllResponse$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getConsentRecordsResponse: components.GetConsentRecordsResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getConsentRecordsResponse: "GetConsentRecordsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentsAllResponse$ {
  /** @deprecated use `VaultConnectionConsentsAllResponse$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionConsentsAllResponse$inboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllResponse$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentsAllResponse$outboundSchema;
  /** @deprecated use `VaultConnectionConsentsAllResponse$Outbound` instead. */
  export type Outbound = VaultConnectionConsentsAllResponse$Outbound;
}

export function vaultConnectionConsentsAllResponseToJSON(
  vaultConnectionConsentsAllResponse: VaultConnectionConsentsAllResponse,
): string {
  return JSON.stringify(
    VaultConnectionConsentsAllResponse$outboundSchema.parse(
      vaultConnectionConsentsAllResponse,
    ),
  );
}

export function vaultConnectionConsentsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VaultConnectionConsentsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentsAllResponse' from JSON`,
  );
}
