/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VaultConsumersAllGlobals = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type VaultConsumersAllRequest = {
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
};

export type VaultConsumersAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Consumers
   */
  getConsumersResponse?: components.GetConsumersResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const VaultConsumersAllGlobals$inboundSchema: z.ZodType<
  VaultConsumersAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type VaultConsumersAllGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const VaultConsumersAllGlobals$outboundSchema: z.ZodType<
  VaultConsumersAllGlobals$Outbound,
  z.ZodTypeDef,
  VaultConsumersAllGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConsumersAllGlobals$ {
  /** @deprecated use `VaultConsumersAllGlobals$inboundSchema` instead. */
  export const inboundSchema = VaultConsumersAllGlobals$inboundSchema;
  /** @deprecated use `VaultConsumersAllGlobals$outboundSchema` instead. */
  export const outboundSchema = VaultConsumersAllGlobals$outboundSchema;
  /** @deprecated use `VaultConsumersAllGlobals$Outbound` instead. */
  export type Outbound = VaultConsumersAllGlobals$Outbound;
}

export function vaultConsumersAllGlobalsToJSON(
  vaultConsumersAllGlobals: VaultConsumersAllGlobals,
): string {
  return JSON.stringify(
    VaultConsumersAllGlobals$outboundSchema.parse(vaultConsumersAllGlobals),
  );
}

export function vaultConsumersAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<VaultConsumersAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConsumersAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConsumersAllGlobals' from JSON`,
  );
}

/** @internal */
export const VaultConsumersAllRequest$inboundSchema: z.ZodType<
  VaultConsumersAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/** @internal */
export type VaultConsumersAllRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
};

/** @internal */
export const VaultConsumersAllRequest$outboundSchema: z.ZodType<
  VaultConsumersAllRequest$Outbound,
  z.ZodTypeDef,
  VaultConsumersAllRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConsumersAllRequest$ {
  /** @deprecated use `VaultConsumersAllRequest$inboundSchema` instead. */
  export const inboundSchema = VaultConsumersAllRequest$inboundSchema;
  /** @deprecated use `VaultConsumersAllRequest$outboundSchema` instead. */
  export const outboundSchema = VaultConsumersAllRequest$outboundSchema;
  /** @deprecated use `VaultConsumersAllRequest$Outbound` instead. */
  export type Outbound = VaultConsumersAllRequest$Outbound;
}

export function vaultConsumersAllRequestToJSON(
  vaultConsumersAllRequest: VaultConsumersAllRequest,
): string {
  return JSON.stringify(
    VaultConsumersAllRequest$outboundSchema.parse(vaultConsumersAllRequest),
  );
}

export function vaultConsumersAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<VaultConsumersAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConsumersAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConsumersAllRequest' from JSON`,
  );
}

/** @internal */
export const VaultConsumersAllResponse$inboundSchema: z.ZodType<
  VaultConsumersAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetConsumersResponse: components.GetConsumersResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetConsumersResponse": "getConsumersResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type VaultConsumersAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetConsumersResponse?: components.GetConsumersResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const VaultConsumersAllResponse$outboundSchema: z.ZodType<
  VaultConsumersAllResponse$Outbound,
  z.ZodTypeDef,
  VaultConsumersAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getConsumersResponse: components.GetConsumersResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getConsumersResponse: "GetConsumersResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConsumersAllResponse$ {
  /** @deprecated use `VaultConsumersAllResponse$inboundSchema` instead. */
  export const inboundSchema = VaultConsumersAllResponse$inboundSchema;
  /** @deprecated use `VaultConsumersAllResponse$outboundSchema` instead. */
  export const outboundSchema = VaultConsumersAllResponse$outboundSchema;
  /** @deprecated use `VaultConsumersAllResponse$Outbound` instead. */
  export type Outbound = VaultConsumersAllResponse$Outbound;
}

export function vaultConsumersAllResponseToJSON(
  vaultConsumersAllResponse: VaultConsumersAllResponse,
): string {
  return JSON.stringify(
    VaultConsumersAllResponse$outboundSchema.parse(vaultConsumersAllResponse),
  );
}

export function vaultConsumersAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<VaultConsumersAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConsumersAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConsumersAllResponse' from JSON`,
  );
}
