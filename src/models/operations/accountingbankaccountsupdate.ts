/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankAccountsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankAccountsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  accountingBankAccount: components.AccountingBankAccountInput;
};

export type AccountingBankAccountsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Account updated
   */
  updateBankAccountResponse?: components.UpdateBankAccountResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankAccountsUpdateGlobals$inboundSchema: z.ZodType<
  AccountingBankAccountsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankAccountsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankAccountsUpdateGlobals$outboundSchema: z.ZodType<
  AccountingBankAccountsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsUpdateGlobals$ {
  /** @deprecated use `AccountingBankAccountsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankAccountsUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankAccountsUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingBankAccountsUpdateGlobals$Outbound;
}

export function accountingBankAccountsUpdateGlobalsToJSON(
  accountingBankAccountsUpdateGlobals: AccountingBankAccountsUpdateGlobals,
): string {
  return JSON.stringify(
    AccountingBankAccountsUpdateGlobals$outboundSchema.parse(
      accountingBankAccountsUpdateGlobals,
    ),
  );
}

export function accountingBankAccountsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankAccountsUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsUpdateRequest$inboundSchema: z.ZodType<
  AccountingBankAccountsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  AccountingBankAccount: components.AccountingBankAccountInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AccountingBankAccount": "accountingBankAccount",
  });
});

/** @internal */
export type AccountingBankAccountsUpdateRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  AccountingBankAccount: components.AccountingBankAccountInput$Outbound;
};

/** @internal */
export const AccountingBankAccountsUpdateRequest$outboundSchema: z.ZodType<
  AccountingBankAccountsUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  accountingBankAccount: components.AccountingBankAccountInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountingBankAccount: "AccountingBankAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsUpdateRequest$ {
  /** @deprecated use `AccountingBankAccountsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankAccountsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankAccountsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingBankAccountsUpdateRequest$Outbound;
}

export function accountingBankAccountsUpdateRequestToJSON(
  accountingBankAccountsUpdateRequest: AccountingBankAccountsUpdateRequest,
): string {
  return JSON.stringify(
    AccountingBankAccountsUpdateRequest$outboundSchema.parse(
      accountingBankAccountsUpdateRequest,
    ),
  );
}

export function accountingBankAccountsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankAccountsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsUpdateResponse$inboundSchema: z.ZodType<
  AccountingBankAccountsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateBankAccountResponse: components.UpdateBankAccountResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateBankAccountResponse": "updateBankAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankAccountsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateBankAccountResponse?:
    | components.UpdateBankAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankAccountsUpdateResponse$outboundSchema: z.ZodType<
  AccountingBankAccountsUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateBankAccountResponse: components.UpdateBankAccountResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateBankAccountResponse: "UpdateBankAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsUpdateResponse$ {
  /** @deprecated use `AccountingBankAccountsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankAccountsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankAccountsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingBankAccountsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingBankAccountsUpdateResponse$Outbound;
}

export function accountingBankAccountsUpdateResponseToJSON(
  accountingBankAccountsUpdateResponse: AccountingBankAccountsUpdateResponse,
): string {
  return JSON.stringify(
    AccountingBankAccountsUpdateResponse$outboundSchema.parse(
      accountingBankAccountsUpdateResponse,
    ),
  );
}

export function accountingBankAccountsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankAccountsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsUpdateResponse' from JSON`,
  );
}
