/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileStorageSharedLinksAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageSharedLinksAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  sharedLink: components.SharedLinkInput;
};

export type FileStorageSharedLinksAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Shared Links
   */
  createSharedLinkResponse?: components.CreateSharedLinkResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageSharedLinksAddGlobals$inboundSchema: z.ZodType<
  FileStorageSharedLinksAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageSharedLinksAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageSharedLinksAddGlobals$outboundSchema: z.ZodType<
  FileStorageSharedLinksAddGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageSharedLinksAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageSharedLinksAddGlobals$ {
  /** @deprecated use `FileStorageSharedLinksAddGlobals$inboundSchema` instead. */
  export const inboundSchema = FileStorageSharedLinksAddGlobals$inboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddGlobals$outboundSchema` instead. */
  export const outboundSchema = FileStorageSharedLinksAddGlobals$outboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddGlobals$Outbound` instead. */
  export type Outbound = FileStorageSharedLinksAddGlobals$Outbound;
}

export function fileStorageSharedLinksAddGlobalsToJSON(
  fileStorageSharedLinksAddGlobals: FileStorageSharedLinksAddGlobals,
): string {
  return JSON.stringify(
    FileStorageSharedLinksAddGlobals$outboundSchema.parse(
      fileStorageSharedLinksAddGlobals,
    ),
  );
}

export function fileStorageSharedLinksAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageSharedLinksAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageSharedLinksAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageSharedLinksAddGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageSharedLinksAddRequest$inboundSchema: z.ZodType<
  FileStorageSharedLinksAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  SharedLink: components.SharedLinkInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SharedLink": "sharedLink",
  });
});

/** @internal */
export type FileStorageSharedLinksAddRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  SharedLink: components.SharedLinkInput$Outbound;
};

/** @internal */
export const FileStorageSharedLinksAddRequest$outboundSchema: z.ZodType<
  FileStorageSharedLinksAddRequest$Outbound,
  z.ZodTypeDef,
  FileStorageSharedLinksAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  sharedLink: components.SharedLinkInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    sharedLink: "SharedLink",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageSharedLinksAddRequest$ {
  /** @deprecated use `FileStorageSharedLinksAddRequest$inboundSchema` instead. */
  export const inboundSchema = FileStorageSharedLinksAddRequest$inboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddRequest$outboundSchema` instead. */
  export const outboundSchema = FileStorageSharedLinksAddRequest$outboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddRequest$Outbound` instead. */
  export type Outbound = FileStorageSharedLinksAddRequest$Outbound;
}

export function fileStorageSharedLinksAddRequestToJSON(
  fileStorageSharedLinksAddRequest: FileStorageSharedLinksAddRequest,
): string {
  return JSON.stringify(
    FileStorageSharedLinksAddRequest$outboundSchema.parse(
      fileStorageSharedLinksAddRequest,
    ),
  );
}

export function fileStorageSharedLinksAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageSharedLinksAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageSharedLinksAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageSharedLinksAddRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageSharedLinksAddResponse$inboundSchema: z.ZodType<
  FileStorageSharedLinksAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateSharedLinkResponse: components.CreateSharedLinkResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateSharedLinkResponse": "createSharedLinkResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageSharedLinksAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateSharedLinkResponse?:
    | components.CreateSharedLinkResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageSharedLinksAddResponse$outboundSchema: z.ZodType<
  FileStorageSharedLinksAddResponse$Outbound,
  z.ZodTypeDef,
  FileStorageSharedLinksAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createSharedLinkResponse: components.CreateSharedLinkResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createSharedLinkResponse: "CreateSharedLinkResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageSharedLinksAddResponse$ {
  /** @deprecated use `FileStorageSharedLinksAddResponse$inboundSchema` instead. */
  export const inboundSchema = FileStorageSharedLinksAddResponse$inboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageSharedLinksAddResponse$outboundSchema;
  /** @deprecated use `FileStorageSharedLinksAddResponse$Outbound` instead. */
  export type Outbound = FileStorageSharedLinksAddResponse$Outbound;
}

export function fileStorageSharedLinksAddResponseToJSON(
  fileStorageSharedLinksAddResponse: FileStorageSharedLinksAddResponse,
): string {
  return JSON.stringify(
    FileStorageSharedLinksAddResponse$outboundSchema.parse(
      fileStorageSharedLinksAddResponse,
    ),
  );
}

export function fileStorageSharedLinksAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageSharedLinksAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageSharedLinksAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageSharedLinksAddResponse' from JSON`,
  );
}
