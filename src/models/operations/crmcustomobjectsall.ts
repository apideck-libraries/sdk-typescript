/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmCustomObjectsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmCustomObjectsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * The id of the custom object to query
   */
  objectId: string;
};

export type CrmCustomObjectsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Custom objects
   */
  getCustomObjectsResponse?: components.GetCustomObjectsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmCustomObjectsAllGlobals$inboundSchema: z.ZodType<
  CrmCustomObjectsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmCustomObjectsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmCustomObjectsAllGlobals$outboundSchema: z.ZodType<
  CrmCustomObjectsAllGlobals$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsAllGlobals$ {
  /** @deprecated use `CrmCustomObjectsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsAllGlobals$inboundSchema;
  /** @deprecated use `CrmCustomObjectsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsAllGlobals$outboundSchema;
  /** @deprecated use `CrmCustomObjectsAllGlobals$Outbound` instead. */
  export type Outbound = CrmCustomObjectsAllGlobals$Outbound;
}

export function crmCustomObjectsAllGlobalsToJSON(
  crmCustomObjectsAllGlobals: CrmCustomObjectsAllGlobals,
): string {
  return JSON.stringify(
    CrmCustomObjectsAllGlobals$outboundSchema.parse(crmCustomObjectsAllGlobals),
  );
}

export function crmCustomObjectsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsAllGlobals' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectsAllRequest$inboundSchema: z.ZodType<
  CrmCustomObjectsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
  object_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
    "object_id": "objectId",
  });
});

/** @internal */
export type CrmCustomObjectsAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
  object_id: string;
};

/** @internal */
export const CrmCustomObjectsAllRequest$outboundSchema: z.ZodType<
  CrmCustomObjectsAllRequest$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
  objectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
    objectId: "object_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsAllRequest$ {
  /** @deprecated use `CrmCustomObjectsAllRequest$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsAllRequest$inboundSchema;
  /** @deprecated use `CrmCustomObjectsAllRequest$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsAllRequest$outboundSchema;
  /** @deprecated use `CrmCustomObjectsAllRequest$Outbound` instead. */
  export type Outbound = CrmCustomObjectsAllRequest$Outbound;
}

export function crmCustomObjectsAllRequestToJSON(
  crmCustomObjectsAllRequest: CrmCustomObjectsAllRequest,
): string {
  return JSON.stringify(
    CrmCustomObjectsAllRequest$outboundSchema.parse(crmCustomObjectsAllRequest),
  );
}

export function crmCustomObjectsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsAllRequest' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectsAllResponse$inboundSchema: z.ZodType<
  CrmCustomObjectsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetCustomObjectsResponse: components.GetCustomObjectsResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetCustomObjectsResponse": "getCustomObjectsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmCustomObjectsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetCustomObjectsResponse?:
    | components.GetCustomObjectsResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmCustomObjectsAllResponse$outboundSchema: z.ZodType<
  CrmCustomObjectsAllResponse$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getCustomObjectsResponse: components.GetCustomObjectsResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getCustomObjectsResponse: "GetCustomObjectsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsAllResponse$ {
  /** @deprecated use `CrmCustomObjectsAllResponse$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsAllResponse$inboundSchema;
  /** @deprecated use `CrmCustomObjectsAllResponse$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsAllResponse$outboundSchema;
  /** @deprecated use `CrmCustomObjectsAllResponse$Outbound` instead. */
  export type Outbound = CrmCustomObjectsAllResponse$Outbound;
}

export function crmCustomObjectsAllResponseToJSON(
  crmCustomObjectsAllResponse: CrmCustomObjectsAllResponse,
): string {
  return JSON.stringify(
    CrmCustomObjectsAllResponse$outboundSchema.parse(
      crmCustomObjectsAllResponse,
    ),
  );
}

export function crmCustomObjectsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsAllResponse' from JSON`,
  );
}
