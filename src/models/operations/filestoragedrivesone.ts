/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileStorageDrivesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageDrivesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type FileStorageDrivesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Drives
   */
  getDriveResponse?: components.GetDriveResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageDrivesOneGlobals$inboundSchema: z.ZodType<
  FileStorageDrivesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageDrivesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageDrivesOneGlobals$outboundSchema: z.ZodType<
  FileStorageDrivesOneGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesOneGlobals$ {
  /** @deprecated use `FileStorageDrivesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesOneGlobals$inboundSchema;
  /** @deprecated use `FileStorageDrivesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesOneGlobals$outboundSchema;
  /** @deprecated use `FileStorageDrivesOneGlobals$Outbound` instead. */
  export type Outbound = FileStorageDrivesOneGlobals$Outbound;
}

export function fileStorageDrivesOneGlobalsToJSON(
  fileStorageDrivesOneGlobals: FileStorageDrivesOneGlobals,
): string {
  return JSON.stringify(
    FileStorageDrivesOneGlobals$outboundSchema.parse(
      fileStorageDrivesOneGlobals,
    ),
  );
}

export function fileStorageDrivesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDrivesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDrivesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDrivesOneGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageDrivesOneRequest$inboundSchema: z.ZodType<
  FileStorageDrivesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type FileStorageDrivesOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const FileStorageDrivesOneRequest$outboundSchema: z.ZodType<
  FileStorageDrivesOneRequest$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesOneRequest$ {
  /** @deprecated use `FileStorageDrivesOneRequest$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesOneRequest$inboundSchema;
  /** @deprecated use `FileStorageDrivesOneRequest$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesOneRequest$outboundSchema;
  /** @deprecated use `FileStorageDrivesOneRequest$Outbound` instead. */
  export type Outbound = FileStorageDrivesOneRequest$Outbound;
}

export function fileStorageDrivesOneRequestToJSON(
  fileStorageDrivesOneRequest: FileStorageDrivesOneRequest,
): string {
  return JSON.stringify(
    FileStorageDrivesOneRequest$outboundSchema.parse(
      fileStorageDrivesOneRequest,
    ),
  );
}

export function fileStorageDrivesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDrivesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDrivesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDrivesOneRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageDrivesOneResponse$inboundSchema: z.ZodType<
  FileStorageDrivesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetDriveResponse: components.GetDriveResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetDriveResponse": "getDriveResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageDrivesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetDriveResponse?: components.GetDriveResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageDrivesOneResponse$outboundSchema: z.ZodType<
  FileStorageDrivesOneResponse$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getDriveResponse: components.GetDriveResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getDriveResponse: "GetDriveResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesOneResponse$ {
  /** @deprecated use `FileStorageDrivesOneResponse$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesOneResponse$inboundSchema;
  /** @deprecated use `FileStorageDrivesOneResponse$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesOneResponse$outboundSchema;
  /** @deprecated use `FileStorageDrivesOneResponse$Outbound` instead. */
  export type Outbound = FileStorageDrivesOneResponse$Outbound;
}

export function fileStorageDrivesOneResponseToJSON(
  fileStorageDrivesOneResponse: FileStorageDrivesOneResponse,
): string {
  return JSON.stringify(
    FileStorageDrivesOneResponse$outboundSchema.parse(
      fileStorageDrivesOneResponse,
    ),
  );
}

export function fileStorageDrivesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDrivesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDrivesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDrivesOneResponse' from JSON`,
  );
}
