/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingQuotesDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingQuotesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingQuotesDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Quotes
   */
  deleteQuoteResponse?: components.DeleteQuoteResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingQuotesDeleteGlobals$inboundSchema: z.ZodType<
  AccountingQuotesDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingQuotesDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingQuotesDeleteGlobals$outboundSchema: z.ZodType<
  AccountingQuotesDeleteGlobals$Outbound,
  z.ZodTypeDef,
  AccountingQuotesDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesDeleteGlobals$ {
  /** @deprecated use `AccountingQuotesDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesDeleteGlobals$inboundSchema;
  /** @deprecated use `AccountingQuotesDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesDeleteGlobals$outboundSchema;
  /** @deprecated use `AccountingQuotesDeleteGlobals$Outbound` instead. */
  export type Outbound = AccountingQuotesDeleteGlobals$Outbound;
}

export function accountingQuotesDeleteGlobalsToJSON(
  accountingQuotesDeleteGlobals: AccountingQuotesDeleteGlobals,
): string {
  return JSON.stringify(
    AccountingQuotesDeleteGlobals$outboundSchema.parse(
      accountingQuotesDeleteGlobals,
    ),
  );
}

export function accountingQuotesDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingQuotesDeleteRequest$inboundSchema: z.ZodType<
  AccountingQuotesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingQuotesDeleteRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingQuotesDeleteRequest$outboundSchema: z.ZodType<
  AccountingQuotesDeleteRequest$Outbound,
  z.ZodTypeDef,
  AccountingQuotesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesDeleteRequest$ {
  /** @deprecated use `AccountingQuotesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesDeleteRequest$inboundSchema;
  /** @deprecated use `AccountingQuotesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesDeleteRequest$outboundSchema;
  /** @deprecated use `AccountingQuotesDeleteRequest$Outbound` instead. */
  export type Outbound = AccountingQuotesDeleteRequest$Outbound;
}

export function accountingQuotesDeleteRequestToJSON(
  accountingQuotesDeleteRequest: AccountingQuotesDeleteRequest,
): string {
  return JSON.stringify(
    AccountingQuotesDeleteRequest$outboundSchema.parse(
      accountingQuotesDeleteRequest,
    ),
  );
}

export function accountingQuotesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const AccountingQuotesDeleteResponse$inboundSchema: z.ZodType<
  AccountingQuotesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  DeleteQuoteResponse: components.DeleteQuoteResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "DeleteQuoteResponse": "deleteQuoteResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingQuotesDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteQuoteResponse?: components.DeleteQuoteResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingQuotesDeleteResponse$outboundSchema: z.ZodType<
  AccountingQuotesDeleteResponse$Outbound,
  z.ZodTypeDef,
  AccountingQuotesDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  deleteQuoteResponse: components.DeleteQuoteResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    deleteQuoteResponse: "DeleteQuoteResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesDeleteResponse$ {
  /** @deprecated use `AccountingQuotesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesDeleteResponse$inboundSchema;
  /** @deprecated use `AccountingQuotesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesDeleteResponse$outboundSchema;
  /** @deprecated use `AccountingQuotesDeleteResponse$Outbound` instead. */
  export type Outbound = AccountingQuotesDeleteResponse$Outbound;
}

export function accountingQuotesDeleteResponseToJSON(
  accountingQuotesDeleteResponse: AccountingQuotesDeleteResponse,
): string {
  return JSON.stringify(
    AccountingQuotesDeleteResponse$outboundSchema.parse(
      accountingQuotesDeleteResponse,
    ),
  );
}

export function accountingQuotesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesDeleteResponse' from JSON`,
  );
}
