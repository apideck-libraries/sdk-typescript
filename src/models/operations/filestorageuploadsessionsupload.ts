/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FileStorageUploadSessionsUploadServerList = [
  "https://upload.apideck.com",
] as const;

export type FileStorageUploadSessionsUploadGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageUploadSessionsUploadRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Part number of the file part being uploaded.
   */
  partNumber: number;
  /**
   * The RFC3230 message digest of the uploaded part. Only required for the Box connector. More information on the Box API docs [here](https://developer.box.com/reference/put-files-upload-sessions-id/#param-digest)
   */
  digest?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type FileStorageUploadSessionsUploadResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * UploadSessions
   */
  updateUploadSessionResponse?:
    | components.UpdateUploadSessionResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageUploadSessionsUploadGlobals$inboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageUploadSessionsUploadGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageUploadSessionsUploadGlobals$outboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsUploadGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsUploadGlobals$ {
  /** @deprecated use `FileStorageUploadSessionsUploadGlobals$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsUploadGlobals$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadGlobals$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsUploadGlobals$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadGlobals$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsUploadGlobals$Outbound;
}

export function fileStorageUploadSessionsUploadGlobalsToJSON(
  fileStorageUploadSessionsUploadGlobals:
    FileStorageUploadSessionsUploadGlobals,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsUploadGlobals$outboundSchema.parse(
      fileStorageUploadSessionsUploadGlobals,
    ),
  );
}

export function fileStorageUploadSessionsUploadGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageUploadSessionsUploadGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsUploadGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageUploadSessionsUploadGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageUploadSessionsUploadRequest$inboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  part_number: z.number(),
  digest: z.string().optional(),
  raw: z.boolean().default(false),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "part_number": "partNumber",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FileStorageUploadSessionsUploadRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  part_number: number;
  digest?: string | undefined;
  raw: boolean;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const FileStorageUploadSessionsUploadRequest$outboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadRequest$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsUploadRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  partNumber: z.number(),
  digest: z.string().optional(),
  raw: z.boolean().default(false),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    partNumber: "part_number",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsUploadRequest$ {
  /** @deprecated use `FileStorageUploadSessionsUploadRequest$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsUploadRequest$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadRequest$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsUploadRequest$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadRequest$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsUploadRequest$Outbound;
}

export function fileStorageUploadSessionsUploadRequestToJSON(
  fileStorageUploadSessionsUploadRequest:
    FileStorageUploadSessionsUploadRequest,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsUploadRequest$outboundSchema.parse(
      fileStorageUploadSessionsUploadRequest,
    ),
  );
}

export function fileStorageUploadSessionsUploadRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageUploadSessionsUploadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsUploadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageUploadSessionsUploadRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageUploadSessionsUploadResponse$inboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateUploadSessionResponse: components
    .UpdateUploadSessionResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateUploadSessionResponse": "updateUploadSessionResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageUploadSessionsUploadResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateUploadSessionResponse?:
    | components.UpdateUploadSessionResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageUploadSessionsUploadResponse$outboundSchema: z.ZodType<
  FileStorageUploadSessionsUploadResponse$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsUploadResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateUploadSessionResponse: components
    .UpdateUploadSessionResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateUploadSessionResponse: "UpdateUploadSessionResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsUploadResponse$ {
  /** @deprecated use `FileStorageUploadSessionsUploadResponse$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsUploadResponse$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadResponse$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsUploadResponse$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsUploadResponse$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsUploadResponse$Outbound;
}

export function fileStorageUploadSessionsUploadResponseToJSON(
  fileStorageUploadSessionsUploadResponse:
    FileStorageUploadSessionsUploadResponse,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsUploadResponse$outboundSchema.parse(
      fileStorageUploadSessionsUploadResponse,
    ),
  );
}

export function fileStorageUploadSessionsUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FileStorageUploadSessionsUploadResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsUploadResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FileStorageUploadSessionsUploadResponse' from JSON`,
  );
}
