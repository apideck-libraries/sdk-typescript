/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AtsJobsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AtsJobsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AtsJobsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Jobs
   */
  getJobsResponse?: components.GetJobsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AtsJobsAllGlobals$inboundSchema: z.ZodType<
  AtsJobsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AtsJobsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AtsJobsAllGlobals$outboundSchema: z.ZodType<
  AtsJobsAllGlobals$Outbound,
  z.ZodTypeDef,
  AtsJobsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsAllGlobals$ {
  /** @deprecated use `AtsJobsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = AtsJobsAllGlobals$inboundSchema;
  /** @deprecated use `AtsJobsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = AtsJobsAllGlobals$outboundSchema;
  /** @deprecated use `AtsJobsAllGlobals$Outbound` instead. */
  export type Outbound = AtsJobsAllGlobals$Outbound;
}

export function atsJobsAllGlobalsToJSON(
  atsJobsAllGlobals: AtsJobsAllGlobals,
): string {
  return JSON.stringify(
    AtsJobsAllGlobals$outboundSchema.parse(atsJobsAllGlobals),
  );
}

export function atsJobsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsAllGlobals' from JSON`,
  );
}

/** @internal */
export const AtsJobsAllRequest$inboundSchema: z.ZodType<
  AtsJobsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type AtsJobsAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const AtsJobsAllRequest$outboundSchema: z.ZodType<
  AtsJobsAllRequest$Outbound,
  z.ZodTypeDef,
  AtsJobsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsAllRequest$ {
  /** @deprecated use `AtsJobsAllRequest$inboundSchema` instead. */
  export const inboundSchema = AtsJobsAllRequest$inboundSchema;
  /** @deprecated use `AtsJobsAllRequest$outboundSchema` instead. */
  export const outboundSchema = AtsJobsAllRequest$outboundSchema;
  /** @deprecated use `AtsJobsAllRequest$Outbound` instead. */
  export type Outbound = AtsJobsAllRequest$Outbound;
}

export function atsJobsAllRequestToJSON(
  atsJobsAllRequest: AtsJobsAllRequest,
): string {
  return JSON.stringify(
    AtsJobsAllRequest$outboundSchema.parse(atsJobsAllRequest),
  );
}

export function atsJobsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsAllRequest' from JSON`,
  );
}

/** @internal */
export const AtsJobsAllResponse$inboundSchema: z.ZodType<
  AtsJobsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetJobsResponse: components.GetJobsResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetJobsResponse": "getJobsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AtsJobsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetJobsResponse?: components.GetJobsResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AtsJobsAllResponse$outboundSchema: z.ZodType<
  AtsJobsAllResponse$Outbound,
  z.ZodTypeDef,
  AtsJobsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getJobsResponse: components.GetJobsResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getJobsResponse: "GetJobsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsAllResponse$ {
  /** @deprecated use `AtsJobsAllResponse$inboundSchema` instead. */
  export const inboundSchema = AtsJobsAllResponse$inboundSchema;
  /** @deprecated use `AtsJobsAllResponse$outboundSchema` instead. */
  export const outboundSchema = AtsJobsAllResponse$outboundSchema;
  /** @deprecated use `AtsJobsAllResponse$Outbound` instead. */
  export type Outbound = AtsJobsAllResponse$Outbound;
}

export function atsJobsAllResponseToJSON(
  atsJobsAllResponse: AtsJobsAllResponse,
): string {
  return JSON.stringify(
    AtsJobsAllResponse$outboundSchema.parse(atsJobsAllResponse),
  );
}

export function atsJobsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsAllResponse' from JSON`,
  );
}
