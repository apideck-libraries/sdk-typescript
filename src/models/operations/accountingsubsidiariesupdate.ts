/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingSubsidiariesUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingSubsidiariesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  subsidiary: components.SubsidiaryInput;
};

export type AccountingSubsidiariesUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Subsidiaries
   */
  updateSubsidiaryResponse?: components.UpdateSubsidiaryResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingSubsidiariesUpdateGlobals$inboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingSubsidiariesUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingSubsidiariesUpdateGlobals$outboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesUpdateGlobals$ {
  /** @deprecated use `AccountingSubsidiariesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesUpdateGlobals$Outbound;
}

/** @internal */
export const AccountingSubsidiariesUpdateRequest$inboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Subsidiary: components.SubsidiaryInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Subsidiary": "subsidiary",
  });
});

/** @internal */
export type AccountingSubsidiariesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  Subsidiary: components.SubsidiaryInput$Outbound;
};

/** @internal */
export const AccountingSubsidiariesUpdateRequest$outboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  subsidiary: components.SubsidiaryInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subsidiary: "Subsidiary",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesUpdateRequest$ {
  /** @deprecated use `AccountingSubsidiariesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesUpdateRequest$Outbound;
}

/** @internal */
export const AccountingSubsidiariesUpdateResponse$inboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateSubsidiaryResponse: components.UpdateSubsidiaryResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateSubsidiaryResponse": "updateSubsidiaryResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingSubsidiariesUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateSubsidiaryResponse?:
    | components.UpdateSubsidiaryResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingSubsidiariesUpdateResponse$outboundSchema: z.ZodType<
  AccountingSubsidiariesUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateSubsidiaryResponse: components.UpdateSubsidiaryResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateSubsidiaryResponse: "UpdateSubsidiaryResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesUpdateResponse$ {
  /** @deprecated use `AccountingSubsidiariesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesUpdateResponse$Outbound;
}
