/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type AccountingLocationsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingLocationsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * Apply filters
   */
  filter?: components.AccountingLocationsFilter | undefined;
};

export type AccountingLocationsAllResponse =
  | components.UnexpectedErrorResponse
  | components.GetAccountingLocationsResponse;

/** @internal */
export const AccountingLocationsAllGlobals$inboundSchema: z.ZodType<
  AccountingLocationsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingLocationsAllGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingLocationsAllGlobals$outboundSchema: z.ZodType<
  AccountingLocationsAllGlobals$Outbound,
  z.ZodTypeDef,
  AccountingLocationsAllGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLocationsAllGlobals$ {
  /** @deprecated use `AccountingLocationsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingLocationsAllGlobals$inboundSchema;
  /** @deprecated use `AccountingLocationsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingLocationsAllGlobals$outboundSchema;
  /** @deprecated use `AccountingLocationsAllGlobals$Outbound` instead. */
  export type Outbound = AccountingLocationsAllGlobals$Outbound;
}

/** @internal */
export const AccountingLocationsAllRequest$inboundSchema: z.ZodType<
  AccountingLocationsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  fields: z.nullable(z.string()).optional(),
  filter: components.AccountingLocationsFilter$inboundSchema.optional(),
});

/** @internal */
export type AccountingLocationsAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  fields?: string | null | undefined;
  filter?: components.AccountingLocationsFilter$Outbound | undefined;
};

/** @internal */
export const AccountingLocationsAllRequest$outboundSchema: z.ZodType<
  AccountingLocationsAllRequest$Outbound,
  z.ZodTypeDef,
  AccountingLocationsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  fields: z.nullable(z.string()).optional(),
  filter: components.AccountingLocationsFilter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLocationsAllRequest$ {
  /** @deprecated use `AccountingLocationsAllRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingLocationsAllRequest$inboundSchema;
  /** @deprecated use `AccountingLocationsAllRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingLocationsAllRequest$outboundSchema;
  /** @deprecated use `AccountingLocationsAllRequest$Outbound` instead. */
  export type Outbound = AccountingLocationsAllRequest$Outbound;
}

/** @internal */
export const AccountingLocationsAllResponse$inboundSchema: z.ZodType<
  AccountingLocationsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UnexpectedErrorResponse$inboundSchema,
  components.GetAccountingLocationsResponse$inboundSchema,
]);

/** @internal */
export type AccountingLocationsAllResponse$Outbound =
  | components.UnexpectedErrorResponse$Outbound
  | components.GetAccountingLocationsResponse$Outbound;

/** @internal */
export const AccountingLocationsAllResponse$outboundSchema: z.ZodType<
  AccountingLocationsAllResponse$Outbound,
  z.ZodTypeDef,
  AccountingLocationsAllResponse
> = z.union([
  components.UnexpectedErrorResponse$outboundSchema,
  components.GetAccountingLocationsResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLocationsAllResponse$ {
  /** @deprecated use `AccountingLocationsAllResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingLocationsAllResponse$inboundSchema;
  /** @deprecated use `AccountingLocationsAllResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingLocationsAllResponse$outboundSchema;
  /** @deprecated use `AccountingLocationsAllResponse$Outbound` instead. */
  export type Outbound = AccountingLocationsAllResponse$Outbound;
}
