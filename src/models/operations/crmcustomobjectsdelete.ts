/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmCustomObjectsDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmCustomObjectsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The id of the custom object to query
   */
  objectId: string;
};

export type CrmCustomObjectsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Custom object deleted
   */
  deleteCustomObjectResponse?:
    | components.DeleteCustomObjectResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmCustomObjectsDeleteGlobals$inboundSchema: z.ZodType<
  CrmCustomObjectsDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmCustomObjectsDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmCustomObjectsDeleteGlobals$outboundSchema: z.ZodType<
  CrmCustomObjectsDeleteGlobals$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsDeleteGlobals$ {
  /** @deprecated use `CrmCustomObjectsDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsDeleteGlobals$inboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsDeleteGlobals$outboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteGlobals$Outbound` instead. */
  export type Outbound = CrmCustomObjectsDeleteGlobals$Outbound;
}

export function crmCustomObjectsDeleteGlobalsToJSON(
  crmCustomObjectsDeleteGlobals: CrmCustomObjectsDeleteGlobals,
): string {
  return JSON.stringify(
    CrmCustomObjectsDeleteGlobals$outboundSchema.parse(
      crmCustomObjectsDeleteGlobals,
    ),
  );
}

export function crmCustomObjectsDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectsDeleteRequest$inboundSchema: z.ZodType<
  CrmCustomObjectsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  object_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "object_id": "objectId",
  });
});

/** @internal */
export type CrmCustomObjectsDeleteRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  object_id: string;
};

/** @internal */
export const CrmCustomObjectsDeleteRequest$outboundSchema: z.ZodType<
  CrmCustomObjectsDeleteRequest$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  objectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    objectId: "object_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsDeleteRequest$ {
  /** @deprecated use `CrmCustomObjectsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsDeleteRequest$inboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsDeleteRequest$outboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteRequest$Outbound` instead. */
  export type Outbound = CrmCustomObjectsDeleteRequest$Outbound;
}

export function crmCustomObjectsDeleteRequestToJSON(
  crmCustomObjectsDeleteRequest: CrmCustomObjectsDeleteRequest,
): string {
  return JSON.stringify(
    CrmCustomObjectsDeleteRequest$outboundSchema.parse(
      crmCustomObjectsDeleteRequest,
    ),
  );
}

export function crmCustomObjectsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectsDeleteResponse$inboundSchema: z.ZodType<
  CrmCustomObjectsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  DeleteCustomObjectResponse: components
    .DeleteCustomObjectResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "DeleteCustomObjectResponse": "deleteCustomObjectResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmCustomObjectsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteCustomObjectResponse?:
    | components.DeleteCustomObjectResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmCustomObjectsDeleteResponse$outboundSchema: z.ZodType<
  CrmCustomObjectsDeleteResponse$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectsDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  deleteCustomObjectResponse: components
    .DeleteCustomObjectResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    deleteCustomObjectResponse: "DeleteCustomObjectResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectsDeleteResponse$ {
  /** @deprecated use `CrmCustomObjectsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectsDeleteResponse$inboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectsDeleteResponse$outboundSchema;
  /** @deprecated use `CrmCustomObjectsDeleteResponse$Outbound` instead. */
  export type Outbound = CrmCustomObjectsDeleteResponse$Outbound;
}

export function crmCustomObjectsDeleteResponseToJSON(
  crmCustomObjectsDeleteResponse: CrmCustomObjectsDeleteResponse,
): string {
  return JSON.stringify(
    CrmCustomObjectsDeleteResponse$outboundSchema.parse(
      crmCustomObjectsDeleteResponse,
    ),
  );
}

export function crmCustomObjectsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectsDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectsDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectsDeleteResponse' from JSON`,
  );
}
