/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AccountingAttachmentsUploadServerList = [
  "https://upload.apideck.com",
] as const;

export type AccountingAttachmentsUploadGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingAttachmentsUploadRequest = {
  /**
   * The reference type of the document.
   */
  referenceType: components.AttachmentReferenceType;
  /**
   * The reference id of the object to retrieve.
   */
  referenceId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Metadata to attach to the attachment file (JSON string)
   */
  xApideckMetadata?: string | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type AccountingAttachmentsUploadResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Attachments
   */
  createAttachmentResponse?: components.CreateAttachmentResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingAttachmentsUploadGlobals$inboundSchema: z.ZodType<
  AccountingAttachmentsUploadGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingAttachmentsUploadGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingAttachmentsUploadGlobals$outboundSchema: z.ZodType<
  AccountingAttachmentsUploadGlobals$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsUploadGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsUploadGlobals$ {
  /** @deprecated use `AccountingAttachmentsUploadGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingAttachmentsUploadGlobals$inboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsUploadGlobals$outboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadGlobals$Outbound` instead. */
  export type Outbound = AccountingAttachmentsUploadGlobals$Outbound;
}

export function accountingAttachmentsUploadGlobalsToJSON(
  accountingAttachmentsUploadGlobals: AccountingAttachmentsUploadGlobals,
): string {
  return JSON.stringify(
    AccountingAttachmentsUploadGlobals$outboundSchema.parse(
      accountingAttachmentsUploadGlobals,
    ),
  );
}

export function accountingAttachmentsUploadGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAttachmentsUploadGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingAttachmentsUploadGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAttachmentsUploadGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingAttachmentsUploadRequest$inboundSchema: z.ZodType<
  AccountingAttachmentsUploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference_type: components.AttachmentReferenceType$inboundSchema,
  reference_id: z.string(),
  raw: z.boolean().default(false),
  "x-apideck-metadata": z.string().optional(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "reference_type": "referenceType",
    "reference_id": "referenceId",
    "x-apideck-metadata": "xApideckMetadata",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AccountingAttachmentsUploadRequest$Outbound = {
  reference_type: string;
  reference_id: string;
  raw: boolean;
  "x-apideck-metadata"?: string | undefined;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const AccountingAttachmentsUploadRequest$outboundSchema: z.ZodType<
  AccountingAttachmentsUploadRequest$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsUploadRequest
> = z.object({
  referenceType: components.AttachmentReferenceType$outboundSchema,
  referenceId: z.string(),
  raw: z.boolean().default(false),
  xApideckMetadata: z.string().optional(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    referenceType: "reference_type",
    referenceId: "reference_id",
    xApideckMetadata: "x-apideck-metadata",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsUploadRequest$ {
  /** @deprecated use `AccountingAttachmentsUploadRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingAttachmentsUploadRequest$inboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsUploadRequest$outboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadRequest$Outbound` instead. */
  export type Outbound = AccountingAttachmentsUploadRequest$Outbound;
}

export function accountingAttachmentsUploadRequestToJSON(
  accountingAttachmentsUploadRequest: AccountingAttachmentsUploadRequest,
): string {
  return JSON.stringify(
    AccountingAttachmentsUploadRequest$outboundSchema.parse(
      accountingAttachmentsUploadRequest,
    ),
  );
}

export function accountingAttachmentsUploadRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAttachmentsUploadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingAttachmentsUploadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAttachmentsUploadRequest' from JSON`,
  );
}

/** @internal */
export const AccountingAttachmentsUploadResponse$inboundSchema: z.ZodType<
  AccountingAttachmentsUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateAttachmentResponse: components.CreateAttachmentResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateAttachmentResponse": "createAttachmentResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingAttachmentsUploadResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateAttachmentResponse?:
    | components.CreateAttachmentResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingAttachmentsUploadResponse$outboundSchema: z.ZodType<
  AccountingAttachmentsUploadResponse$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsUploadResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createAttachmentResponse: components.CreateAttachmentResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createAttachmentResponse: "CreateAttachmentResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsUploadResponse$ {
  /** @deprecated use `AccountingAttachmentsUploadResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingAttachmentsUploadResponse$inboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsUploadResponse$outboundSchema;
  /** @deprecated use `AccountingAttachmentsUploadResponse$Outbound` instead. */
  export type Outbound = AccountingAttachmentsUploadResponse$Outbound;
}

export function accountingAttachmentsUploadResponseToJSON(
  accountingAttachmentsUploadResponse: AccountingAttachmentsUploadResponse,
): string {
  return JSON.stringify(
    AccountingAttachmentsUploadResponse$outboundSchema.parse(
      accountingAttachmentsUploadResponse,
    ),
  );
}

export function accountingAttachmentsUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAttachmentsUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingAttachmentsUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAttachmentsUploadResponse' from JSON`,
  );
}
