/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingPaymentsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingPaymentsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  payment: components.PaymentInput;
};

export type AccountingPaymentsAddResponse =
  | components.CreatePaymentResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingPaymentsAddGlobals$inboundSchema: z.ZodType<
  AccountingPaymentsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingPaymentsAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingPaymentsAddGlobals$outboundSchema: z.ZodType<
  AccountingPaymentsAddGlobals$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsAddGlobals$ {
  /** @deprecated use `AccountingPaymentsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsAddGlobals$inboundSchema;
  /** @deprecated use `AccountingPaymentsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsAddGlobals$outboundSchema;
  /** @deprecated use `AccountingPaymentsAddGlobals$Outbound` instead. */
  export type Outbound = AccountingPaymentsAddGlobals$Outbound;
}

/** @internal */
export const AccountingPaymentsAddRequest$inboundSchema: z.ZodType<
  AccountingPaymentsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Payment: components.PaymentInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Payment": "payment",
  });
});

/** @internal */
export type AccountingPaymentsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Payment: components.PaymentInput$Outbound;
};

/** @internal */
export const AccountingPaymentsAddRequest$outboundSchema: z.ZodType<
  AccountingPaymentsAddRequest$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  payment: components.PaymentInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    payment: "Payment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsAddRequest$ {
  /** @deprecated use `AccountingPaymentsAddRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsAddRequest$inboundSchema;
  /** @deprecated use `AccountingPaymentsAddRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsAddRequest$outboundSchema;
  /** @deprecated use `AccountingPaymentsAddRequest$Outbound` instead. */
  export type Outbound = AccountingPaymentsAddRequest$Outbound;
}

/** @internal */
export const AccountingPaymentsAddResponse$inboundSchema: z.ZodType<
  AccountingPaymentsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreatePaymentResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingPaymentsAddResponse$Outbound =
  | components.CreatePaymentResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingPaymentsAddResponse$outboundSchema: z.ZodType<
  AccountingPaymentsAddResponse$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsAddResponse
> = z.union([
  components.CreatePaymentResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsAddResponse$ {
  /** @deprecated use `AccountingPaymentsAddResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsAddResponse$inboundSchema;
  /** @deprecated use `AccountingPaymentsAddResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsAddResponse$outboundSchema;
  /** @deprecated use `AccountingPaymentsAddResponse$Outbound` instead. */
  export type Outbound = AccountingPaymentsAddResponse$Outbound;
}
