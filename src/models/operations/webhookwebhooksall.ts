/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type WebhookWebhooksAllGlobals = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type WebhookWebhooksAllRequest = {
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
};

export type WebhookWebhooksAllResponse =
  | components.GetWebhooksResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const WebhookWebhooksAllGlobals$inboundSchema: z.ZodType<
  WebhookWebhooksAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type WebhookWebhooksAllGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const WebhookWebhooksAllGlobals$outboundSchema: z.ZodType<
  WebhookWebhooksAllGlobals$Outbound,
  z.ZodTypeDef,
  WebhookWebhooksAllGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookWebhooksAllGlobals$ {
  /** @deprecated use `WebhookWebhooksAllGlobals$inboundSchema` instead. */
  export const inboundSchema = WebhookWebhooksAllGlobals$inboundSchema;
  /** @deprecated use `WebhookWebhooksAllGlobals$outboundSchema` instead. */
  export const outboundSchema = WebhookWebhooksAllGlobals$outboundSchema;
  /** @deprecated use `WebhookWebhooksAllGlobals$Outbound` instead. */
  export type Outbound = WebhookWebhooksAllGlobals$Outbound;
}

/** @internal */
export const WebhookWebhooksAllRequest$inboundSchema: z.ZodType<
  WebhookWebhooksAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/** @internal */
export type WebhookWebhooksAllRequest$Outbound = {
  cursor?: string | null | undefined;
  limit: number;
};

/** @internal */
export const WebhookWebhooksAllRequest$outboundSchema: z.ZodType<
  WebhookWebhooksAllRequest$Outbound,
  z.ZodTypeDef,
  WebhookWebhooksAllRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookWebhooksAllRequest$ {
  /** @deprecated use `WebhookWebhooksAllRequest$inboundSchema` instead. */
  export const inboundSchema = WebhookWebhooksAllRequest$inboundSchema;
  /** @deprecated use `WebhookWebhooksAllRequest$outboundSchema` instead. */
  export const outboundSchema = WebhookWebhooksAllRequest$outboundSchema;
  /** @deprecated use `WebhookWebhooksAllRequest$Outbound` instead. */
  export type Outbound = WebhookWebhooksAllRequest$Outbound;
}

/** @internal */
export const WebhookWebhooksAllResponse$inboundSchema: z.ZodType<
  WebhookWebhooksAllResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.GetWebhooksResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type WebhookWebhooksAllResponse$Outbound =
  | components.GetWebhooksResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const WebhookWebhooksAllResponse$outboundSchema: z.ZodType<
  WebhookWebhooksAllResponse$Outbound,
  z.ZodTypeDef,
  WebhookWebhooksAllResponse
> = z.union([
  components.GetWebhooksResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookWebhooksAllResponse$ {
  /** @deprecated use `WebhookWebhooksAllResponse$inboundSchema` instead. */
  export const inboundSchema = WebhookWebhooksAllResponse$inboundSchema;
  /** @deprecated use `WebhookWebhooksAllResponse$outboundSchema` instead. */
  export const outboundSchema = WebhookWebhooksAllResponse$outboundSchema;
  /** @deprecated use `WebhookWebhooksAllResponse$Outbound` instead. */
  export type Outbound = WebhookWebhooksAllResponse$Outbound;
}
