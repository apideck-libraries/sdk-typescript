/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankFeedStatementsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankFeedStatementsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  bankFeedStatement: components.BankFeedStatementInput;
};

export type AccountingBankFeedStatementsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Feed Statements
   */
  updateBankFeedStatementResponse?:
    | components.UpdateBankFeedStatementResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsUpdateGlobals$inboundSchema: z.ZodType<
  AccountingBankFeedStatementsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankFeedStatementsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsUpdateGlobals$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsUpdateGlobals$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsUpdateGlobals
  > = z.object({
    consumerId: z.string().optional(),
    appId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsUpdateGlobals$ {
  /** @deprecated use `AccountingBankFeedStatementsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsUpdateGlobals$Outbound;
}

export function accountingBankFeedStatementsUpdateGlobalsToJSON(
  accountingBankFeedStatementsUpdateGlobals:
    AccountingBankFeedStatementsUpdateGlobals,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsUpdateGlobals$outboundSchema.parse(
      accountingBankFeedStatementsUpdateGlobals,
    ),
  );
}

export function accountingBankFeedStatementsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsUpdateGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsUpdateGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedStatementsUpdateRequest$inboundSchema: z.ZodType<
  AccountingBankFeedStatementsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  BankFeedStatement: components.BankFeedStatementInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "BankFeedStatement": "bankFeedStatement",
  });
});

/** @internal */
export type AccountingBankFeedStatementsUpdateRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  BankFeedStatement: components.BankFeedStatementInput$Outbound;
};

/** @internal */
export const AccountingBankFeedStatementsUpdateRequest$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsUpdateRequest$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsUpdateRequest
  > = z.object({
    id: z.string(),
    consumerId: z.string().optional(),
    appId: z.string().optional(),
    serviceId: z.string().optional(),
    raw: z.boolean().default(false),
    bankFeedStatement: components.BankFeedStatementInput$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      bankFeedStatement: "BankFeedStatement",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsUpdateRequest$ {
  /** @deprecated use `AccountingBankFeedStatementsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsUpdateRequest$Outbound;
}

export function accountingBankFeedStatementsUpdateRequestToJSON(
  accountingBankFeedStatementsUpdateRequest:
    AccountingBankFeedStatementsUpdateRequest,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsUpdateRequest$outboundSchema.parse(
      accountingBankFeedStatementsUpdateRequest,
    ),
  );
}

export function accountingBankFeedStatementsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedStatementsUpdateResponse$inboundSchema:
  z.ZodType<AccountingBankFeedStatementsUpdateResponse, z.ZodTypeDef, unknown> =
    z.object({
      HttpMeta: components.HTTPMetadata$inboundSchema,
      UpdateBankFeedStatementResponse: components
        .UpdateBankFeedStatementResponse$inboundSchema.optional(),
      UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "HttpMeta": "httpMeta",
        "UpdateBankFeedStatementResponse": "updateBankFeedStatementResponse",
        "UnexpectedErrorResponse": "unexpectedErrorResponse",
      });
    });

/** @internal */
export type AccountingBankFeedStatementsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateBankFeedStatementResponse?:
    | components.UpdateBankFeedStatementResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsUpdateResponse$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsUpdateResponse$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsUpdateResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    updateBankFeedStatementResponse: components
      .UpdateBankFeedStatementResponse$outboundSchema.optional(),
    unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      updateBankFeedStatementResponse: "UpdateBankFeedStatementResponse",
      unexpectedErrorResponse: "UnexpectedErrorResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsUpdateResponse$ {
  /** @deprecated use `AccountingBankFeedStatementsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsUpdateResponse$Outbound;
}

export function accountingBankFeedStatementsUpdateResponseToJSON(
  accountingBankFeedStatementsUpdateResponse:
    AccountingBankFeedStatementsUpdateResponse,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsUpdateResponse$outboundSchema.parse(
      accountingBankFeedStatementsUpdateResponse,
    ),
  );
}

export function accountingBankFeedStatementsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsUpdateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsUpdateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsUpdateResponse' from JSON`,
  );
}
