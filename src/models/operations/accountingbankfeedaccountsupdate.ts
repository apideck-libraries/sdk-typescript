/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankFeedAccountsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankFeedAccountsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  bankFeedAccount: components.BankFeedAccountInput;
};

export type AccountingBankFeedAccountsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Feed Accounts
   */
  updateBankFeedAccountResponse?:
    | components.UpdateBankFeedAccountResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsUpdateGlobals$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankFeedAccountsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsUpdateGlobals$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsUpdateGlobals$ {
  /** @deprecated use `AccountingBankFeedAccountsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsUpdateGlobals$Outbound;
}

export function accountingBankFeedAccountsUpdateGlobalsToJSON(
  accountingBankFeedAccountsUpdateGlobals:
    AccountingBankFeedAccountsUpdateGlobals,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsUpdateGlobals$outboundSchema.parse(
      accountingBankFeedAccountsUpdateGlobals,
    ),
  );
}

export function accountingBankFeedAccountsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsUpdateGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsUpdateGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsUpdateRequest$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  BankFeedAccount: components.BankFeedAccountInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "BankFeedAccount": "bankFeedAccount",
  });
});

/** @internal */
export type AccountingBankFeedAccountsUpdateRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  BankFeedAccount: components.BankFeedAccountInput$Outbound;
};

/** @internal */
export const AccountingBankFeedAccountsUpdateRequest$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  bankFeedAccount: components.BankFeedAccountInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    bankFeedAccount: "BankFeedAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsUpdateRequest$ {
  /** @deprecated use `AccountingBankFeedAccountsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsUpdateRequest$Outbound;
}

export function accountingBankFeedAccountsUpdateRequestToJSON(
  accountingBankFeedAccountsUpdateRequest:
    AccountingBankFeedAccountsUpdateRequest,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsUpdateRequest$outboundSchema.parse(
      accountingBankFeedAccountsUpdateRequest,
    ),
  );
}

export function accountingBankFeedAccountsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsUpdateResponse$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateBankFeedAccountResponse: components
    .UpdateBankFeedAccountResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateBankFeedAccountResponse": "updateBankFeedAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankFeedAccountsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateBankFeedAccountResponse?:
    | components.UpdateBankFeedAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsUpdateResponse$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateBankFeedAccountResponse: components
    .UpdateBankFeedAccountResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateBankFeedAccountResponse: "UpdateBankFeedAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsUpdateResponse$ {
  /** @deprecated use `AccountingBankFeedAccountsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsUpdateResponse$Outbound;
}

export function accountingBankFeedAccountsUpdateResponseToJSON(
  accountingBankFeedAccountsUpdateResponse:
    AccountingBankFeedAccountsUpdateResponse,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsUpdateResponse$outboundSchema.parse(
      accountingBankFeedAccountsUpdateResponse,
    ),
  );
}

export function accountingBankFeedAccountsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsUpdateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsUpdateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsUpdateResponse' from JSON`,
  );
}
