/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export const FileStorageUploadSessionsFinishServerList = [
  "https://upload.apideck.com",
] as const;

export type FileStorageUploadSessionsFinishGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageUploadSessionsFinishRequestBody = {};

export type FileStorageUploadSessionsFinishRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The RFC3230 message digest of the uploaded part. Only required for the Box connector. More information on the Box API docs [here](https://developer.box.com/reference/put-files-upload-sessions-id/#param-digest)
   */
  digest?: string | undefined;
  requestBody?: FileStorageUploadSessionsFinishRequestBody | undefined;
};

export type FileStorageUploadSessionsFinishResponse =
  | components.GetFileResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const FileStorageUploadSessionsFinishGlobals$inboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageUploadSessionsFinishGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageUploadSessionsFinishGlobals$outboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsFinishGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsFinishGlobals$ {
  /** @deprecated use `FileStorageUploadSessionsFinishGlobals$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsFinishGlobals$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishGlobals$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsFinishGlobals$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishGlobals$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsFinishGlobals$Outbound;
}

/** @internal */
export const FileStorageUploadSessionsFinishRequestBody$inboundSchema:
  z.ZodType<FileStorageUploadSessionsFinishRequestBody, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type FileStorageUploadSessionsFinishRequestBody$Outbound = {};

/** @internal */
export const FileStorageUploadSessionsFinishRequestBody$outboundSchema:
  z.ZodType<
    FileStorageUploadSessionsFinishRequestBody$Outbound,
    z.ZodTypeDef,
    FileStorageUploadSessionsFinishRequestBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsFinishRequestBody$ {
  /** @deprecated use `FileStorageUploadSessionsFinishRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsFinishRequestBody$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsFinishRequestBody$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishRequestBody$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsFinishRequestBody$Outbound;
}

/** @internal */
export const FileStorageUploadSessionsFinishRequest$inboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  digest: z.string().optional(),
  RequestBody: z.lazy(() =>
    FileStorageUploadSessionsFinishRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type FileStorageUploadSessionsFinishRequest$Outbound = {
  id: string;
  raw: boolean;
  serviceId?: string | undefined;
  digest?: string | undefined;
  RequestBody?: FileStorageUploadSessionsFinishRequestBody$Outbound | undefined;
};

/** @internal */
export const FileStorageUploadSessionsFinishRequest$outboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishRequest$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsFinishRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  digest: z.string().optional(),
  requestBody: z.lazy(() =>
    FileStorageUploadSessionsFinishRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsFinishRequest$ {
  /** @deprecated use `FileStorageUploadSessionsFinishRequest$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsFinishRequest$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishRequest$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsFinishRequest$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishRequest$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsFinishRequest$Outbound;
}

/** @internal */
export const FileStorageUploadSessionsFinishResponse$inboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.GetFileResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type FileStorageUploadSessionsFinishResponse$Outbound =
  | components.GetFileResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const FileStorageUploadSessionsFinishResponse$outboundSchema: z.ZodType<
  FileStorageUploadSessionsFinishResponse$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsFinishResponse
> = z.union([
  components.GetFileResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsFinishResponse$ {
  /** @deprecated use `FileStorageUploadSessionsFinishResponse$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsFinishResponse$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishResponse$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsFinishResponse$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsFinishResponse$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsFinishResponse$Outbound;
}
