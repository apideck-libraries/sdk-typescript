/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingLedgerAccountsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingLedgerAccountsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingLedgerAccountsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * LedgerAccount
   */
  getLedgerAccountResponse?: components.GetLedgerAccountResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingLedgerAccountsOneGlobals$inboundSchema: z.ZodType<
  AccountingLedgerAccountsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingLedgerAccountsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingLedgerAccountsOneGlobals$outboundSchema: z.ZodType<
  AccountingLedgerAccountsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsOneGlobals$ {
  /** @deprecated use `AccountingLedgerAccountsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingLedgerAccountsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsOneGlobals$Outbound;
}

export function accountingLedgerAccountsOneGlobalsToJSON(
  accountingLedgerAccountsOneGlobals: AccountingLedgerAccountsOneGlobals,
): string {
  return JSON.stringify(
    AccountingLedgerAccountsOneGlobals$outboundSchema.parse(
      accountingLedgerAccountsOneGlobals,
    ),
  );
}

export function accountingLedgerAccountsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingLedgerAccountsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingLedgerAccountsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingLedgerAccountsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingLedgerAccountsOneRequest$inboundSchema: z.ZodType<
  AccountingLedgerAccountsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingLedgerAccountsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingLedgerAccountsOneRequest$outboundSchema: z.ZodType<
  AccountingLedgerAccountsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsOneRequest$ {
  /** @deprecated use `AccountingLedgerAccountsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingLedgerAccountsOneRequest$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsOneRequest$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneRequest$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsOneRequest$Outbound;
}

export function accountingLedgerAccountsOneRequestToJSON(
  accountingLedgerAccountsOneRequest: AccountingLedgerAccountsOneRequest,
): string {
  return JSON.stringify(
    AccountingLedgerAccountsOneRequest$outboundSchema.parse(
      accountingLedgerAccountsOneRequest,
    ),
  );
}

export function accountingLedgerAccountsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingLedgerAccountsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingLedgerAccountsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingLedgerAccountsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingLedgerAccountsOneResponse$inboundSchema: z.ZodType<
  AccountingLedgerAccountsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetLedgerAccountResponse: components.GetLedgerAccountResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetLedgerAccountResponse": "getLedgerAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingLedgerAccountsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetLedgerAccountResponse?:
    | components.GetLedgerAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingLedgerAccountsOneResponse$outboundSchema: z.ZodType<
  AccountingLedgerAccountsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getLedgerAccountResponse: components.GetLedgerAccountResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getLedgerAccountResponse: "GetLedgerAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsOneResponse$ {
  /** @deprecated use `AccountingLedgerAccountsOneResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingLedgerAccountsOneResponse$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsOneResponse$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsOneResponse$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsOneResponse$Outbound;
}

export function accountingLedgerAccountsOneResponseToJSON(
  accountingLedgerAccountsOneResponse: AccountingLedgerAccountsOneResponse,
): string {
  return JSON.stringify(
    AccountingLedgerAccountsOneResponse$outboundSchema.parse(
      accountingLedgerAccountsOneResponse,
    ),
  );
}

export function accountingLedgerAccountsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingLedgerAccountsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingLedgerAccountsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingLedgerAccountsOneResponse' from JSON`,
  );
}
