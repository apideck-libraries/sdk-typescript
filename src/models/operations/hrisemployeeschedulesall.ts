/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HrisEmployeeSchedulesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisEmployeeSchedulesAllRequest = {
  /**
   * ID of the employee you are acting upon.
   */
  employeeId: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type HrisEmployeeSchedulesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * EmployeeSchedules
   */
  getEmployeeSchedulesResponse?:
    | components.GetEmployeeSchedulesResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllGlobals$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeeSchedulesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllGlobals$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllGlobals$ {
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllGlobals$Outbound;
}

export function hrisEmployeeSchedulesAllGlobalsToJSON(
  hrisEmployeeSchedulesAllGlobals: HrisEmployeeSchedulesAllGlobals,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllGlobals$outboundSchema.parse(
      hrisEmployeeSchedulesAllGlobals,
    ),
  );
}

export function hrisEmployeeSchedulesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllGlobals' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllRequest$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllRequest$Outbound = {
  employee_id: string;
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllRequest$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllRequest
> = z.object({
  employeeId: z.string(),
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllRequest$ {
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllRequest$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllRequest$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllRequest$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllRequest$Outbound;
}

export function hrisEmployeeSchedulesAllRequestToJSON(
  hrisEmployeeSchedulesAllRequest: HrisEmployeeSchedulesAllRequest,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllRequest$outboundSchema.parse(
      hrisEmployeeSchedulesAllRequest,
    ),
  );
}

export function hrisEmployeeSchedulesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllRequest' from JSON`,
  );
}

/** @internal */
export const HrisEmployeeSchedulesAllResponse$inboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetEmployeeSchedulesResponse: components
    .GetEmployeeSchedulesResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetEmployeeSchedulesResponse": "getEmployeeSchedulesResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type HrisEmployeeSchedulesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetEmployeeSchedulesResponse?:
    | components.GetEmployeeSchedulesResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const HrisEmployeeSchedulesAllResponse$outboundSchema: z.ZodType<
  HrisEmployeeSchedulesAllResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeeSchedulesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getEmployeeSchedulesResponse: components
    .GetEmployeeSchedulesResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getEmployeeSchedulesResponse: "GetEmployeeSchedulesResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeeSchedulesAllResponse$ {
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeeSchedulesAllResponse$inboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeeSchedulesAllResponse$outboundSchema;
  /** @deprecated use `HrisEmployeeSchedulesAllResponse$Outbound` instead. */
  export type Outbound = HrisEmployeeSchedulesAllResponse$Outbound;
}

export function hrisEmployeeSchedulesAllResponseToJSON(
  hrisEmployeeSchedulesAllResponse: HrisEmployeeSchedulesAllResponse,
): string {
  return JSON.stringify(
    HrisEmployeeSchedulesAllResponse$outboundSchema.parse(
      hrisEmployeeSchedulesAllResponse,
    ),
  );
}

export function hrisEmployeeSchedulesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<HrisEmployeeSchedulesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HrisEmployeeSchedulesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HrisEmployeeSchedulesAllResponse' from JSON`,
  );
}
