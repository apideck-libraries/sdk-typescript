/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileStorageFilesExportGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageFilesExportRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * File format to export this file to. A list of available file formats for the current file is available as `export_formats` on the File resource.
   */
  format: string;
};

export type FileStorageFilesExportResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * File Download
   */
  getFileDownloadResponse?: ReadableStream<Uint8Array> | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageFilesExportGlobals$inboundSchema: z.ZodType<
  FileStorageFilesExportGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageFilesExportGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageFilesExportGlobals$outboundSchema: z.ZodType<
  FileStorageFilesExportGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageFilesExportGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageFilesExportGlobals$ {
  /** @deprecated use `FileStorageFilesExportGlobals$inboundSchema` instead. */
  export const inboundSchema = FileStorageFilesExportGlobals$inboundSchema;
  /** @deprecated use `FileStorageFilesExportGlobals$outboundSchema` instead. */
  export const outboundSchema = FileStorageFilesExportGlobals$outboundSchema;
  /** @deprecated use `FileStorageFilesExportGlobals$Outbound` instead. */
  export type Outbound = FileStorageFilesExportGlobals$Outbound;
}

export function fileStorageFilesExportGlobalsToJSON(
  fileStorageFilesExportGlobals: FileStorageFilesExportGlobals,
): string {
  return JSON.stringify(
    FileStorageFilesExportGlobals$outboundSchema.parse(
      fileStorageFilesExportGlobals,
    ),
  );
}

export function fileStorageFilesExportGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageFilesExportGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageFilesExportGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageFilesExportGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageFilesExportRequest$inboundSchema: z.ZodType<
  FileStorageFilesExportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
  format: z.string(),
});

/** @internal */
export type FileStorageFilesExportRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
  format: string;
};

/** @internal */
export const FileStorageFilesExportRequest$outboundSchema: z.ZodType<
  FileStorageFilesExportRequest$Outbound,
  z.ZodTypeDef,
  FileStorageFilesExportRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
  format: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageFilesExportRequest$ {
  /** @deprecated use `FileStorageFilesExportRequest$inboundSchema` instead. */
  export const inboundSchema = FileStorageFilesExportRequest$inboundSchema;
  /** @deprecated use `FileStorageFilesExportRequest$outboundSchema` instead. */
  export const outboundSchema = FileStorageFilesExportRequest$outboundSchema;
  /** @deprecated use `FileStorageFilesExportRequest$Outbound` instead. */
  export type Outbound = FileStorageFilesExportRequest$Outbound;
}

export function fileStorageFilesExportRequestToJSON(
  fileStorageFilesExportRequest: FileStorageFilesExportRequest,
): string {
  return JSON.stringify(
    FileStorageFilesExportRequest$outboundSchema.parse(
      fileStorageFilesExportRequest,
    ),
  );
}

export function fileStorageFilesExportRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageFilesExportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageFilesExportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageFilesExportRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageFilesExportResponse$inboundSchema: z.ZodType<
  FileStorageFilesExportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetFileDownloadResponse: z.instanceof(ReadableStream<Uint8Array>).optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetFileDownloadResponse": "getFileDownloadResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageFilesExportResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetFileDownloadResponse?: ReadableStream<Uint8Array> | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageFilesExportResponse$outboundSchema: z.ZodType<
  FileStorageFilesExportResponse$Outbound,
  z.ZodTypeDef,
  FileStorageFilesExportResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getFileDownloadResponse: z.instanceof(ReadableStream<Uint8Array>).optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getFileDownloadResponse: "GetFileDownloadResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageFilesExportResponse$ {
  /** @deprecated use `FileStorageFilesExportResponse$inboundSchema` instead. */
  export const inboundSchema = FileStorageFilesExportResponse$inboundSchema;
  /** @deprecated use `FileStorageFilesExportResponse$outboundSchema` instead. */
  export const outboundSchema = FileStorageFilesExportResponse$outboundSchema;
  /** @deprecated use `FileStorageFilesExportResponse$Outbound` instead. */
  export type Outbound = FileStorageFilesExportResponse$Outbound;
}

export function fileStorageFilesExportResponseToJSON(
  fileStorageFilesExportResponse: FileStorageFilesExportResponse,
): string {
  return JSON.stringify(
    FileStorageFilesExportResponse$outboundSchema.parse(
      fileStorageFilesExportResponse,
    ),
  );
}

export function fileStorageFilesExportResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageFilesExportResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageFilesExportResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageFilesExportResponse' from JSON`,
  );
}
