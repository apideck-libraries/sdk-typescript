/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FileStorageUploadSessionsOneServerList = [
  "https://upload.apideck.com",
] as const;

export type FileStorageUploadSessionsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageUploadSessionsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type FileStorageUploadSessionsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * UploadSessions
   */
  getUploadSessionResponse?: components.GetUploadSessionResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageUploadSessionsOneGlobals$inboundSchema: z.ZodType<
  FileStorageUploadSessionsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageUploadSessionsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageUploadSessionsOneGlobals$outboundSchema: z.ZodType<
  FileStorageUploadSessionsOneGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsOneGlobals$ {
  /** @deprecated use `FileStorageUploadSessionsOneGlobals$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsOneGlobals$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneGlobals$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsOneGlobals$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneGlobals$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsOneGlobals$Outbound;
}

export function fileStorageUploadSessionsOneGlobalsToJSON(
  fileStorageUploadSessionsOneGlobals: FileStorageUploadSessionsOneGlobals,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsOneGlobals$outboundSchema.parse(
      fileStorageUploadSessionsOneGlobals,
    ),
  );
}

export function fileStorageUploadSessionsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageUploadSessionsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageUploadSessionsOneGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageUploadSessionsOneRequest$inboundSchema: z.ZodType<
  FileStorageUploadSessionsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type FileStorageUploadSessionsOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const FileStorageUploadSessionsOneRequest$outboundSchema: z.ZodType<
  FileStorageUploadSessionsOneRequest$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsOneRequest$ {
  /** @deprecated use `FileStorageUploadSessionsOneRequest$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsOneRequest$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneRequest$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsOneRequest$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneRequest$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsOneRequest$Outbound;
}

export function fileStorageUploadSessionsOneRequestToJSON(
  fileStorageUploadSessionsOneRequest: FileStorageUploadSessionsOneRequest,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsOneRequest$outboundSchema.parse(
      fileStorageUploadSessionsOneRequest,
    ),
  );
}

export function fileStorageUploadSessionsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageUploadSessionsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageUploadSessionsOneRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageUploadSessionsOneResponse$inboundSchema: z.ZodType<
  FileStorageUploadSessionsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetUploadSessionResponse: components.GetUploadSessionResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetUploadSessionResponse": "getUploadSessionResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageUploadSessionsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetUploadSessionResponse?:
    | components.GetUploadSessionResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageUploadSessionsOneResponse$outboundSchema: z.ZodType<
  FileStorageUploadSessionsOneResponse$Outbound,
  z.ZodTypeDef,
  FileStorageUploadSessionsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getUploadSessionResponse: components.GetUploadSessionResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getUploadSessionResponse: "GetUploadSessionResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageUploadSessionsOneResponse$ {
  /** @deprecated use `FileStorageUploadSessionsOneResponse$inboundSchema` instead. */
  export const inboundSchema =
    FileStorageUploadSessionsOneResponse$inboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageUploadSessionsOneResponse$outboundSchema;
  /** @deprecated use `FileStorageUploadSessionsOneResponse$Outbound` instead. */
  export type Outbound = FileStorageUploadSessionsOneResponse$Outbound;
}

export function fileStorageUploadSessionsOneResponseToJSON(
  fileStorageUploadSessionsOneResponse: FileStorageUploadSessionsOneResponse,
): string {
  return JSON.stringify(
    FileStorageUploadSessionsOneResponse$outboundSchema.parse(
      fileStorageUploadSessionsOneResponse,
    ),
  );
}

export function fileStorageUploadSessionsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageUploadSessionsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FileStorageUploadSessionsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageUploadSessionsOneResponse' from JSON`,
  );
}
