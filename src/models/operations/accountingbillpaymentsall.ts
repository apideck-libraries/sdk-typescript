/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBillPaymentsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBillPaymentsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: components.PaymentsFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: components.PaymentsSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingBillPaymentsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bill Payments
   */
  getBillPaymentsResponse?: components.GetBillPaymentsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBillPaymentsAllGlobals$inboundSchema: z.ZodType<
  AccountingBillPaymentsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBillPaymentsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBillPaymentsAllGlobals$outboundSchema: z.ZodType<
  AccountingBillPaymentsAllGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBillPaymentsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillPaymentsAllGlobals$ {
  /** @deprecated use `AccountingBillPaymentsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingBillPaymentsAllGlobals$inboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingBillPaymentsAllGlobals$outboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllGlobals$Outbound` instead. */
  export type Outbound = AccountingBillPaymentsAllGlobals$Outbound;
}

export function accountingBillPaymentsAllGlobalsToJSON(
  accountingBillPaymentsAllGlobals: AccountingBillPaymentsAllGlobals,
): string {
  return JSON.stringify(
    AccountingBillPaymentsAllGlobals$outboundSchema.parse(
      accountingBillPaymentsAllGlobals,
    ),
  );
}

export function accountingBillPaymentsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillPaymentsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillPaymentsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillPaymentsAllGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBillPaymentsAllRequest$inboundSchema: z.ZodType<
  AccountingBillPaymentsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.PaymentsFilter$inboundSchema.optional(),
  sort: components.PaymentsSort$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type AccountingBillPaymentsAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: components.PaymentsFilter$Outbound | undefined;
  sort?: components.PaymentsSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingBillPaymentsAllRequest$outboundSchema: z.ZodType<
  AccountingBillPaymentsAllRequest$Outbound,
  z.ZodTypeDef,
  AccountingBillPaymentsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.PaymentsFilter$outboundSchema.optional(),
  sort: components.PaymentsSort$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillPaymentsAllRequest$ {
  /** @deprecated use `AccountingBillPaymentsAllRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingBillPaymentsAllRequest$inboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingBillPaymentsAllRequest$outboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllRequest$Outbound` instead. */
  export type Outbound = AccountingBillPaymentsAllRequest$Outbound;
}

export function accountingBillPaymentsAllRequestToJSON(
  accountingBillPaymentsAllRequest: AccountingBillPaymentsAllRequest,
): string {
  return JSON.stringify(
    AccountingBillPaymentsAllRequest$outboundSchema.parse(
      accountingBillPaymentsAllRequest,
    ),
  );
}

export function accountingBillPaymentsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillPaymentsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillPaymentsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillPaymentsAllRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBillPaymentsAllResponse$inboundSchema: z.ZodType<
  AccountingBillPaymentsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetBillPaymentsResponse: components.GetBillPaymentsResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetBillPaymentsResponse": "getBillPaymentsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBillPaymentsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetBillPaymentsResponse?:
    | components.GetBillPaymentsResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBillPaymentsAllResponse$outboundSchema: z.ZodType<
  AccountingBillPaymentsAllResponse$Outbound,
  z.ZodTypeDef,
  AccountingBillPaymentsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getBillPaymentsResponse: components.GetBillPaymentsResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getBillPaymentsResponse: "GetBillPaymentsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillPaymentsAllResponse$ {
  /** @deprecated use `AccountingBillPaymentsAllResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingBillPaymentsAllResponse$inboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBillPaymentsAllResponse$outboundSchema;
  /** @deprecated use `AccountingBillPaymentsAllResponse$Outbound` instead. */
  export type Outbound = AccountingBillPaymentsAllResponse$Outbound;
}

export function accountingBillPaymentsAllResponseToJSON(
  accountingBillPaymentsAllResponse: AccountingBillPaymentsAllResponse,
): string {
  return JSON.stringify(
    AccountingBillPaymentsAllResponse$outboundSchema.parse(
      accountingBillPaymentsAllResponse,
    ),
  );
}

export function accountingBillPaymentsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillPaymentsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillPaymentsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillPaymentsAllResponse' from JSON`,
  );
}
