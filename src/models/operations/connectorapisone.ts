/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectorApisOneGlobals = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type ConnectorApisOneRequest = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * ID of the record you are acting upon.
   */
  id: string;
};

export type ConnectorApisOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Apis
   */
  getApiResponse?: components.GetApiResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ConnectorApisOneGlobals$inboundSchema: z.ZodType<
  ConnectorApisOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type ConnectorApisOneGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const ConnectorApisOneGlobals$outboundSchema: z.ZodType<
  ConnectorApisOneGlobals$Outbound,
  z.ZodTypeDef,
  ConnectorApisOneGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorApisOneGlobals$ {
  /** @deprecated use `ConnectorApisOneGlobals$inboundSchema` instead. */
  export const inboundSchema = ConnectorApisOneGlobals$inboundSchema;
  /** @deprecated use `ConnectorApisOneGlobals$outboundSchema` instead. */
  export const outboundSchema = ConnectorApisOneGlobals$outboundSchema;
  /** @deprecated use `ConnectorApisOneGlobals$Outbound` instead. */
  export type Outbound = ConnectorApisOneGlobals$Outbound;
}

export function connectorApisOneGlobalsToJSON(
  connectorApisOneGlobals: ConnectorApisOneGlobals,
): string {
  return JSON.stringify(
    ConnectorApisOneGlobals$outboundSchema.parse(connectorApisOneGlobals),
  );
}

export function connectorApisOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorApisOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorApisOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorApisOneGlobals' from JSON`,
  );
}

/** @internal */
export const ConnectorApisOneRequest$inboundSchema: z.ZodType<
  ConnectorApisOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  id: z.string(),
});

/** @internal */
export type ConnectorApisOneRequest$Outbound = {
  appId?: string | undefined;
  id: string;
};

/** @internal */
export const ConnectorApisOneRequest$outboundSchema: z.ZodType<
  ConnectorApisOneRequest$Outbound,
  z.ZodTypeDef,
  ConnectorApisOneRequest
> = z.object({
  appId: z.string().optional(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorApisOneRequest$ {
  /** @deprecated use `ConnectorApisOneRequest$inboundSchema` instead. */
  export const inboundSchema = ConnectorApisOneRequest$inboundSchema;
  /** @deprecated use `ConnectorApisOneRequest$outboundSchema` instead. */
  export const outboundSchema = ConnectorApisOneRequest$outboundSchema;
  /** @deprecated use `ConnectorApisOneRequest$Outbound` instead. */
  export type Outbound = ConnectorApisOneRequest$Outbound;
}

export function connectorApisOneRequestToJSON(
  connectorApisOneRequest: ConnectorApisOneRequest,
): string {
  return JSON.stringify(
    ConnectorApisOneRequest$outboundSchema.parse(connectorApisOneRequest),
  );
}

export function connectorApisOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorApisOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorApisOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorApisOneRequest' from JSON`,
  );
}

/** @internal */
export const ConnectorApisOneResponse$inboundSchema: z.ZodType<
  ConnectorApisOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetApiResponse: components.GetApiResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetApiResponse": "getApiResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ConnectorApisOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetApiResponse?: components.GetApiResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ConnectorApisOneResponse$outboundSchema: z.ZodType<
  ConnectorApisOneResponse$Outbound,
  z.ZodTypeDef,
  ConnectorApisOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getApiResponse: components.GetApiResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getApiResponse: "GetApiResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorApisOneResponse$ {
  /** @deprecated use `ConnectorApisOneResponse$inboundSchema` instead. */
  export const inboundSchema = ConnectorApisOneResponse$inboundSchema;
  /** @deprecated use `ConnectorApisOneResponse$outboundSchema` instead. */
  export const outboundSchema = ConnectorApisOneResponse$outboundSchema;
  /** @deprecated use `ConnectorApisOneResponse$Outbound` instead. */
  export type Outbound = ConnectorApisOneResponse$Outbound;
}

export function connectorApisOneResponseToJSON(
  connectorApisOneResponse: ConnectorApisOneResponse,
): string {
  return JSON.stringify(
    ConnectorApisOneResponse$outboundSchema.parse(connectorApisOneResponse),
  );
}

export function connectorApisOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorApisOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConnectorApisOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorApisOneResponse' from JSON`,
  );
}
