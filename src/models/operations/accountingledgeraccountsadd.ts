/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingLedgerAccountsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingLedgerAccountsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  ledgerAccount: components.LedgerAccountInput;
};

export type AccountingLedgerAccountsAddResponse =
  | components.CreateLedgerAccountResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingLedgerAccountsAddGlobals$inboundSchema: z.ZodType<
  AccountingLedgerAccountsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingLedgerAccountsAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingLedgerAccountsAddGlobals$outboundSchema: z.ZodType<
  AccountingLedgerAccountsAddGlobals$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsAddGlobals$ {
  /** @deprecated use `AccountingLedgerAccountsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingLedgerAccountsAddGlobals$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsAddGlobals$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddGlobals$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsAddGlobals$Outbound;
}

/** @internal */
export const AccountingLedgerAccountsAddRequest$inboundSchema: z.ZodType<
  AccountingLedgerAccountsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  LedgerAccount: components.LedgerAccountInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "LedgerAccount": "ledgerAccount",
  });
});

/** @internal */
export type AccountingLedgerAccountsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  LedgerAccount: components.LedgerAccountInput$Outbound;
};

/** @internal */
export const AccountingLedgerAccountsAddRequest$outboundSchema: z.ZodType<
  AccountingLedgerAccountsAddRequest$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  ledgerAccount: components.LedgerAccountInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    ledgerAccount: "LedgerAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsAddRequest$ {
  /** @deprecated use `AccountingLedgerAccountsAddRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingLedgerAccountsAddRequest$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsAddRequest$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddRequest$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsAddRequest$Outbound;
}

/** @internal */
export const AccountingLedgerAccountsAddResponse$inboundSchema: z.ZodType<
  AccountingLedgerAccountsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateLedgerAccountResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingLedgerAccountsAddResponse$Outbound =
  | components.CreateLedgerAccountResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingLedgerAccountsAddResponse$outboundSchema: z.ZodType<
  AccountingLedgerAccountsAddResponse$Outbound,
  z.ZodTypeDef,
  AccountingLedgerAccountsAddResponse
> = z.union([
  components.CreateLedgerAccountResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingLedgerAccountsAddResponse$ {
  /** @deprecated use `AccountingLedgerAccountsAddResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingLedgerAccountsAddResponse$inboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingLedgerAccountsAddResponse$outboundSchema;
  /** @deprecated use `AccountingLedgerAccountsAddResponse$Outbound` instead. */
  export type Outbound = AccountingLedgerAccountsAddResponse$Outbound;
}
