/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosModifiersAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosModifiersAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  modifier: components.ModifierInput;
};

export type PosModifiersAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Modifiers
   */
  createModifierResponse?: components.CreateModifierResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosModifiersAddGlobals$inboundSchema: z.ZodType<
  PosModifiersAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosModifiersAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosModifiersAddGlobals$outboundSchema: z.ZodType<
  PosModifiersAddGlobals$Outbound,
  z.ZodTypeDef,
  PosModifiersAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosModifiersAddGlobals$ {
  /** @deprecated use `PosModifiersAddGlobals$inboundSchema` instead. */
  export const inboundSchema = PosModifiersAddGlobals$inboundSchema;
  /** @deprecated use `PosModifiersAddGlobals$outboundSchema` instead. */
  export const outboundSchema = PosModifiersAddGlobals$outboundSchema;
  /** @deprecated use `PosModifiersAddGlobals$Outbound` instead. */
  export type Outbound = PosModifiersAddGlobals$Outbound;
}

/** @internal */
export const PosModifiersAddRequest$inboundSchema: z.ZodType<
  PosModifiersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Modifier: components.ModifierInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Modifier": "modifier",
  });
});

/** @internal */
export type PosModifiersAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Modifier: components.ModifierInput$Outbound;
};

/** @internal */
export const PosModifiersAddRequest$outboundSchema: z.ZodType<
  PosModifiersAddRequest$Outbound,
  z.ZodTypeDef,
  PosModifiersAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  modifier: components.ModifierInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    modifier: "Modifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosModifiersAddRequest$ {
  /** @deprecated use `PosModifiersAddRequest$inboundSchema` instead. */
  export const inboundSchema = PosModifiersAddRequest$inboundSchema;
  /** @deprecated use `PosModifiersAddRequest$outboundSchema` instead. */
  export const outboundSchema = PosModifiersAddRequest$outboundSchema;
  /** @deprecated use `PosModifiersAddRequest$Outbound` instead. */
  export type Outbound = PosModifiersAddRequest$Outbound;
}

/** @internal */
export const PosModifiersAddResponse$inboundSchema: z.ZodType<
  PosModifiersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateModifierResponse: components.CreateModifierResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateModifierResponse": "createModifierResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosModifiersAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateModifierResponse?:
    | components.CreateModifierResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosModifiersAddResponse$outboundSchema: z.ZodType<
  PosModifiersAddResponse$Outbound,
  z.ZodTypeDef,
  PosModifiersAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createModifierResponse: components.CreateModifierResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createModifierResponse: "CreateModifierResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosModifiersAddResponse$ {
  /** @deprecated use `PosModifiersAddResponse$inboundSchema` instead. */
  export const inboundSchema = PosModifiersAddResponse$inboundSchema;
  /** @deprecated use `PosModifiersAddResponse$outboundSchema` instead. */
  export const outboundSchema = PosModifiersAddResponse$outboundSchema;
  /** @deprecated use `PosModifiersAddResponse$Outbound` instead. */
  export type Outbound = PosModifiersAddResponse$Outbound;
}
