/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EcommerceOrdersAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type EcommerceOrdersAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: components.EcommerceOrdersFilter | undefined;
  /**
   * Apply sorting
   */
  sort?: components.OrdersSort | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type EcommerceOrdersAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Orders
   */
  getEcommerceOrdersResponse?:
    | components.GetEcommerceOrdersResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const EcommerceOrdersAllGlobals$inboundSchema: z.ZodType<
  EcommerceOrdersAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type EcommerceOrdersAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const EcommerceOrdersAllGlobals$outboundSchema: z.ZodType<
  EcommerceOrdersAllGlobals$Outbound,
  z.ZodTypeDef,
  EcommerceOrdersAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceOrdersAllGlobals$ {
  /** @deprecated use `EcommerceOrdersAllGlobals$inboundSchema` instead. */
  export const inboundSchema = EcommerceOrdersAllGlobals$inboundSchema;
  /** @deprecated use `EcommerceOrdersAllGlobals$outboundSchema` instead. */
  export const outboundSchema = EcommerceOrdersAllGlobals$outboundSchema;
  /** @deprecated use `EcommerceOrdersAllGlobals$Outbound` instead. */
  export type Outbound = EcommerceOrdersAllGlobals$Outbound;
}

export function ecommerceOrdersAllGlobalsToJSON(
  ecommerceOrdersAllGlobals: EcommerceOrdersAllGlobals,
): string {
  return JSON.stringify(
    EcommerceOrdersAllGlobals$outboundSchema.parse(ecommerceOrdersAllGlobals),
  );
}

export function ecommerceOrdersAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceOrdersAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceOrdersAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceOrdersAllGlobals' from JSON`,
  );
}

/** @internal */
export const EcommerceOrdersAllRequest$inboundSchema: z.ZodType<
  EcommerceOrdersAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.EcommerceOrdersFilter$inboundSchema.optional(),
  sort: components.OrdersSort$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type EcommerceOrdersAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: components.EcommerceOrdersFilter$Outbound | undefined;
  sort?: components.OrdersSort$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const EcommerceOrdersAllRequest$outboundSchema: z.ZodType<
  EcommerceOrdersAllRequest$Outbound,
  z.ZodTypeDef,
  EcommerceOrdersAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.EcommerceOrdersFilter$outboundSchema.optional(),
  sort: components.OrdersSort$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceOrdersAllRequest$ {
  /** @deprecated use `EcommerceOrdersAllRequest$inboundSchema` instead. */
  export const inboundSchema = EcommerceOrdersAllRequest$inboundSchema;
  /** @deprecated use `EcommerceOrdersAllRequest$outboundSchema` instead. */
  export const outboundSchema = EcommerceOrdersAllRequest$outboundSchema;
  /** @deprecated use `EcommerceOrdersAllRequest$Outbound` instead. */
  export type Outbound = EcommerceOrdersAllRequest$Outbound;
}

export function ecommerceOrdersAllRequestToJSON(
  ecommerceOrdersAllRequest: EcommerceOrdersAllRequest,
): string {
  return JSON.stringify(
    EcommerceOrdersAllRequest$outboundSchema.parse(ecommerceOrdersAllRequest),
  );
}

export function ecommerceOrdersAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceOrdersAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceOrdersAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceOrdersAllRequest' from JSON`,
  );
}

/** @internal */
export const EcommerceOrdersAllResponse$inboundSchema: z.ZodType<
  EcommerceOrdersAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetEcommerceOrdersResponse: components
    .GetEcommerceOrdersResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetEcommerceOrdersResponse": "getEcommerceOrdersResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type EcommerceOrdersAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetEcommerceOrdersResponse?:
    | components.GetEcommerceOrdersResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const EcommerceOrdersAllResponse$outboundSchema: z.ZodType<
  EcommerceOrdersAllResponse$Outbound,
  z.ZodTypeDef,
  EcommerceOrdersAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getEcommerceOrdersResponse: components
    .GetEcommerceOrdersResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getEcommerceOrdersResponse: "GetEcommerceOrdersResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EcommerceOrdersAllResponse$ {
  /** @deprecated use `EcommerceOrdersAllResponse$inboundSchema` instead. */
  export const inboundSchema = EcommerceOrdersAllResponse$inboundSchema;
  /** @deprecated use `EcommerceOrdersAllResponse$outboundSchema` instead. */
  export const outboundSchema = EcommerceOrdersAllResponse$outboundSchema;
  /** @deprecated use `EcommerceOrdersAllResponse$Outbound` instead. */
  export type Outbound = EcommerceOrdersAllResponse$Outbound;
}

export function ecommerceOrdersAllResponseToJSON(
  ecommerceOrdersAllResponse: EcommerceOrdersAllResponse,
): string {
  return JSON.stringify(
    EcommerceOrdersAllResponse$outboundSchema.parse(ecommerceOrdersAllResponse),
  );
}

export function ecommerceOrdersAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<EcommerceOrdersAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EcommerceOrdersAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EcommerceOrdersAllResponse' from JSON`,
  );
}
