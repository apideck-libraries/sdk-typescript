/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AtsJobsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AtsJobsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AtsJobsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Jobs
   */
  getJobResponse?: components.GetJobResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AtsJobsOneGlobals$inboundSchema: z.ZodType<
  AtsJobsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AtsJobsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AtsJobsOneGlobals$outboundSchema: z.ZodType<
  AtsJobsOneGlobals$Outbound,
  z.ZodTypeDef,
  AtsJobsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsOneGlobals$ {
  /** @deprecated use `AtsJobsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AtsJobsOneGlobals$inboundSchema;
  /** @deprecated use `AtsJobsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AtsJobsOneGlobals$outboundSchema;
  /** @deprecated use `AtsJobsOneGlobals$Outbound` instead. */
  export type Outbound = AtsJobsOneGlobals$Outbound;
}

export function atsJobsOneGlobalsToJSON(
  atsJobsOneGlobals: AtsJobsOneGlobals,
): string {
  return JSON.stringify(
    AtsJobsOneGlobals$outboundSchema.parse(atsJobsOneGlobals),
  );
}

export function atsJobsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AtsJobsOneRequest$inboundSchema: z.ZodType<
  AtsJobsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AtsJobsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AtsJobsOneRequest$outboundSchema: z.ZodType<
  AtsJobsOneRequest$Outbound,
  z.ZodTypeDef,
  AtsJobsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsOneRequest$ {
  /** @deprecated use `AtsJobsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AtsJobsOneRequest$inboundSchema;
  /** @deprecated use `AtsJobsOneRequest$outboundSchema` instead. */
  export const outboundSchema = AtsJobsOneRequest$outboundSchema;
  /** @deprecated use `AtsJobsOneRequest$Outbound` instead. */
  export type Outbound = AtsJobsOneRequest$Outbound;
}

export function atsJobsOneRequestToJSON(
  atsJobsOneRequest: AtsJobsOneRequest,
): string {
  return JSON.stringify(
    AtsJobsOneRequest$outboundSchema.parse(atsJobsOneRequest),
  );
}

export function atsJobsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsOneRequest' from JSON`,
  );
}

/** @internal */
export const AtsJobsOneResponse$inboundSchema: z.ZodType<
  AtsJobsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetJobResponse: components.GetJobResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetJobResponse": "getJobResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AtsJobsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetJobResponse?: components.GetJobResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AtsJobsOneResponse$outboundSchema: z.ZodType<
  AtsJobsOneResponse$Outbound,
  z.ZodTypeDef,
  AtsJobsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getJobResponse: components.GetJobResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getJobResponse: "GetJobResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AtsJobsOneResponse$ {
  /** @deprecated use `AtsJobsOneResponse$inboundSchema` instead. */
  export const inboundSchema = AtsJobsOneResponse$inboundSchema;
  /** @deprecated use `AtsJobsOneResponse$outboundSchema` instead. */
  export const outboundSchema = AtsJobsOneResponse$outboundSchema;
  /** @deprecated use `AtsJobsOneResponse$Outbound` instead. */
  export type Outbound = AtsJobsOneResponse$Outbound;
}

export function atsJobsOneResponseToJSON(
  atsJobsOneResponse: AtsJobsOneResponse,
): string {
  return JSON.stringify(
    AtsJobsOneResponse$outboundSchema.parse(atsJobsOneResponse),
  );
}

export function atsJobsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AtsJobsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AtsJobsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AtsJobsOneResponse' from JSON`,
  );
}
