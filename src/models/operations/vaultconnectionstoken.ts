/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VaultConnectionsTokenGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type VaultConnectionsTokenRequestBody = {};

export type VaultConnectionsTokenRequest = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Service ID of the resource to return
   */
  serviceId: string;
  /**
   * Unified API
   */
  unifiedApi: string;
  requestBody?: VaultConnectionsTokenRequestBody | undefined;
};

export type VaultConnectionsTokenResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Connection
   */
  getConnectionResponse?: components.GetConnectionResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const VaultConnectionsTokenGlobals$inboundSchema: z.ZodType<
  VaultConnectionsTokenGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type VaultConnectionsTokenGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const VaultConnectionsTokenGlobals$outboundSchema: z.ZodType<
  VaultConnectionsTokenGlobals$Outbound,
  z.ZodTypeDef,
  VaultConnectionsTokenGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionsTokenGlobals$ {
  /** @deprecated use `VaultConnectionsTokenGlobals$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionsTokenGlobals$inboundSchema;
  /** @deprecated use `VaultConnectionsTokenGlobals$outboundSchema` instead. */
  export const outboundSchema = VaultConnectionsTokenGlobals$outboundSchema;
  /** @deprecated use `VaultConnectionsTokenGlobals$Outbound` instead. */
  export type Outbound = VaultConnectionsTokenGlobals$Outbound;
}

export function vaultConnectionsTokenGlobalsToJSON(
  vaultConnectionsTokenGlobals: VaultConnectionsTokenGlobals,
): string {
  return JSON.stringify(
    VaultConnectionsTokenGlobals$outboundSchema.parse(
      vaultConnectionsTokenGlobals,
    ),
  );
}

export function vaultConnectionsTokenGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionsTokenGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionsTokenGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionsTokenGlobals' from JSON`,
  );
}

/** @internal */
export const VaultConnectionsTokenRequestBody$inboundSchema: z.ZodType<
  VaultConnectionsTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type VaultConnectionsTokenRequestBody$Outbound = {};

/** @internal */
export const VaultConnectionsTokenRequestBody$outboundSchema: z.ZodType<
  VaultConnectionsTokenRequestBody$Outbound,
  z.ZodTypeDef,
  VaultConnectionsTokenRequestBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionsTokenRequestBody$ {
  /** @deprecated use `VaultConnectionsTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionsTokenRequestBody$inboundSchema;
  /** @deprecated use `VaultConnectionsTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = VaultConnectionsTokenRequestBody$outboundSchema;
  /** @deprecated use `VaultConnectionsTokenRequestBody$Outbound` instead. */
  export type Outbound = VaultConnectionsTokenRequestBody$Outbound;
}

export function vaultConnectionsTokenRequestBodyToJSON(
  vaultConnectionsTokenRequestBody: VaultConnectionsTokenRequestBody,
): string {
  return JSON.stringify(
    VaultConnectionsTokenRequestBody$outboundSchema.parse(
      vaultConnectionsTokenRequestBody,
    ),
  );
}

export function vaultConnectionsTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionsTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionsTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionsTokenRequestBody' from JSON`,
  );
}

/** @internal */
export const VaultConnectionsTokenRequest$inboundSchema: z.ZodType<
  VaultConnectionsTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  service_id: z.string(),
  unified_api: z.string(),
  RequestBody: z.lazy(() => VaultConnectionsTokenRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "unified_api": "unifiedApi",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VaultConnectionsTokenRequest$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
  service_id: string;
  unified_api: string;
  RequestBody?: VaultConnectionsTokenRequestBody$Outbound | undefined;
};

/** @internal */
export const VaultConnectionsTokenRequest$outboundSchema: z.ZodType<
  VaultConnectionsTokenRequest$Outbound,
  z.ZodTypeDef,
  VaultConnectionsTokenRequest
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string(),
  unifiedApi: z.string(),
  requestBody: z.lazy(() => VaultConnectionsTokenRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    unifiedApi: "unified_api",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionsTokenRequest$ {
  /** @deprecated use `VaultConnectionsTokenRequest$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionsTokenRequest$inboundSchema;
  /** @deprecated use `VaultConnectionsTokenRequest$outboundSchema` instead. */
  export const outboundSchema = VaultConnectionsTokenRequest$outboundSchema;
  /** @deprecated use `VaultConnectionsTokenRequest$Outbound` instead. */
  export type Outbound = VaultConnectionsTokenRequest$Outbound;
}

export function vaultConnectionsTokenRequestToJSON(
  vaultConnectionsTokenRequest: VaultConnectionsTokenRequest,
): string {
  return JSON.stringify(
    VaultConnectionsTokenRequest$outboundSchema.parse(
      vaultConnectionsTokenRequest,
    ),
  );
}

export function vaultConnectionsTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionsTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionsTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionsTokenRequest' from JSON`,
  );
}

/** @internal */
export const VaultConnectionsTokenResponse$inboundSchema: z.ZodType<
  VaultConnectionsTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetConnectionResponse: components.GetConnectionResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetConnectionResponse": "getConnectionResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type VaultConnectionsTokenResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetConnectionResponse?: components.GetConnectionResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const VaultConnectionsTokenResponse$outboundSchema: z.ZodType<
  VaultConnectionsTokenResponse$Outbound,
  z.ZodTypeDef,
  VaultConnectionsTokenResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getConnectionResponse: components.GetConnectionResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getConnectionResponse: "GetConnectionResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionsTokenResponse$ {
  /** @deprecated use `VaultConnectionsTokenResponse$inboundSchema` instead. */
  export const inboundSchema = VaultConnectionsTokenResponse$inboundSchema;
  /** @deprecated use `VaultConnectionsTokenResponse$outboundSchema` instead. */
  export const outboundSchema = VaultConnectionsTokenResponse$outboundSchema;
  /** @deprecated use `VaultConnectionsTokenResponse$Outbound` instead. */
  export type Outbound = VaultConnectionsTokenResponse$Outbound;
}

export function vaultConnectionsTokenResponseToJSON(
  vaultConnectionsTokenResponse: VaultConnectionsTokenResponse,
): string {
  return JSON.stringify(
    VaultConnectionsTokenResponse$outboundSchema.parse(
      vaultConnectionsTokenResponse,
    ),
  );
}

export function vaultConnectionsTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionsTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultConnectionsTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionsTokenResponse' from JSON`,
  );
}
