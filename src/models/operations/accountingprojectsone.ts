/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingProjectsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingProjectsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingProjectsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Projects
   */
  getProjectResponse?: components.GetProjectResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingProjectsOneGlobals$inboundSchema: z.ZodType<
  AccountingProjectsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingProjectsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingProjectsOneGlobals$outboundSchema: z.ZodType<
  AccountingProjectsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingProjectsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsOneGlobals$ {
  /** @deprecated use `AccountingProjectsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingProjectsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingProjectsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingProjectsOneGlobals$Outbound;
}

export function accountingProjectsOneGlobalsToJSON(
  accountingProjectsOneGlobals: AccountingProjectsOneGlobals,
): string {
  return JSON.stringify(
    AccountingProjectsOneGlobals$outboundSchema.parse(
      accountingProjectsOneGlobals,
    ),
  );
}

export function accountingProjectsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsOneRequest$inboundSchema: z.ZodType<
  AccountingProjectsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingProjectsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingProjectsOneRequest$outboundSchema: z.ZodType<
  AccountingProjectsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingProjectsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsOneRequest$ {
  /** @deprecated use `AccountingProjectsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsOneRequest$inboundSchema;
  /** @deprecated use `AccountingProjectsOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsOneRequest$outboundSchema;
  /** @deprecated use `AccountingProjectsOneRequest$Outbound` instead. */
  export type Outbound = AccountingProjectsOneRequest$Outbound;
}

export function accountingProjectsOneRequestToJSON(
  accountingProjectsOneRequest: AccountingProjectsOneRequest,
): string {
  return JSON.stringify(
    AccountingProjectsOneRequest$outboundSchema.parse(
      accountingProjectsOneRequest,
    ),
  );
}

export function accountingProjectsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsOneResponse$inboundSchema: z.ZodType<
  AccountingProjectsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetProjectResponse: components.GetProjectResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetProjectResponse": "getProjectResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingProjectsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetProjectResponse?: components.GetProjectResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingProjectsOneResponse$outboundSchema: z.ZodType<
  AccountingProjectsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingProjectsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getProjectResponse: components.GetProjectResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getProjectResponse: "GetProjectResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsOneResponse$ {
  /** @deprecated use `AccountingProjectsOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsOneResponse$inboundSchema;
  /** @deprecated use `AccountingProjectsOneResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsOneResponse$outboundSchema;
  /** @deprecated use `AccountingProjectsOneResponse$Outbound` instead. */
  export type Outbound = AccountingProjectsOneResponse$Outbound;
}

export function accountingProjectsOneResponseToJSON(
  accountingProjectsOneResponse: AccountingProjectsOneResponse,
): string {
  return JSON.stringify(
    AccountingProjectsOneResponse$outboundSchema.parse(
      accountingProjectsOneResponse,
    ),
  );
}

export function accountingProjectsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsOneResponse' from JSON`,
  );
}
