/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankAccountsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankAccountsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingBankAccountsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Account
   */
  getBankAccountResponse?: components.GetBankAccountResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankAccountsOneGlobals$inboundSchema: z.ZodType<
  AccountingBankAccountsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankAccountsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankAccountsOneGlobals$outboundSchema: z.ZodType<
  AccountingBankAccountsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsOneGlobals$ {
  /** @deprecated use `AccountingBankAccountsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingBankAccountsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingBankAccountsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingBankAccountsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingBankAccountsOneGlobals$Outbound;
}

export function accountingBankAccountsOneGlobalsToJSON(
  accountingBankAccountsOneGlobals: AccountingBankAccountsOneGlobals,
): string {
  return JSON.stringify(
    AccountingBankAccountsOneGlobals$outboundSchema.parse(
      accountingBankAccountsOneGlobals,
    ),
  );
}

export function accountingBankAccountsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsOneRequest$inboundSchema: z.ZodType<
  AccountingBankAccountsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingBankAccountsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingBankAccountsOneRequest$outboundSchema: z.ZodType<
  AccountingBankAccountsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsOneRequest$ {
  /** @deprecated use `AccountingBankAccountsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsOneRequest$inboundSchema;
  /** @deprecated use `AccountingBankAccountsOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingBankAccountsOneRequest$outboundSchema;
  /** @deprecated use `AccountingBankAccountsOneRequest$Outbound` instead. */
  export type Outbound = AccountingBankAccountsOneRequest$Outbound;
}

export function accountingBankAccountsOneRequestToJSON(
  accountingBankAccountsOneRequest: AccountingBankAccountsOneRequest,
): string {
  return JSON.stringify(
    AccountingBankAccountsOneRequest$outboundSchema.parse(
      accountingBankAccountsOneRequest,
    ),
  );
}

export function accountingBankAccountsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsOneResponse$inboundSchema: z.ZodType<
  AccountingBankAccountsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetBankAccountResponse: components.GetBankAccountResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetBankAccountResponse": "getBankAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankAccountsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetBankAccountResponse?:
    | components.GetBankAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankAccountsOneResponse$outboundSchema: z.ZodType<
  AccountingBankAccountsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getBankAccountResponse: components.GetBankAccountResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getBankAccountResponse: "GetBankAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsOneResponse$ {
  /** @deprecated use `AccountingBankAccountsOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsOneResponse$inboundSchema;
  /** @deprecated use `AccountingBankAccountsOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankAccountsOneResponse$outboundSchema;
  /** @deprecated use `AccountingBankAccountsOneResponse$Outbound` instead. */
  export type Outbound = AccountingBankAccountsOneResponse$Outbound;
}

export function accountingBankAccountsOneResponseToJSON(
  accountingBankAccountsOneResponse: AccountingBankAccountsOneResponse,
): string {
  return JSON.stringify(
    AccountingBankAccountsOneResponse$outboundSchema.parse(
      accountingBankAccountsOneResponse,
    ),
  );
}

export function accountingBankAccountsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsOneResponse' from JSON`,
  );
}
