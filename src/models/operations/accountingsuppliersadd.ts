/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingSuppliersAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingSuppliersAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  supplier: components.SupplierInput;
};

export type AccountingSuppliersAddResponse =
  | components.CreateSupplierResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingSuppliersAddGlobals$inboundSchema: z.ZodType<
  AccountingSuppliersAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingSuppliersAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingSuppliersAddGlobals$outboundSchema: z.ZodType<
  AccountingSuppliersAddGlobals$Outbound,
  z.ZodTypeDef,
  AccountingSuppliersAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSuppliersAddGlobals$ {
  /** @deprecated use `AccountingSuppliersAddGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingSuppliersAddGlobals$inboundSchema;
  /** @deprecated use `AccountingSuppliersAddGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingSuppliersAddGlobals$outboundSchema;
  /** @deprecated use `AccountingSuppliersAddGlobals$Outbound` instead. */
  export type Outbound = AccountingSuppliersAddGlobals$Outbound;
}

/** @internal */
export const AccountingSuppliersAddRequest$inboundSchema: z.ZodType<
  AccountingSuppliersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Supplier: components.SupplierInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Supplier": "supplier",
  });
});

/** @internal */
export type AccountingSuppliersAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Supplier: components.SupplierInput$Outbound;
};

/** @internal */
export const AccountingSuppliersAddRequest$outboundSchema: z.ZodType<
  AccountingSuppliersAddRequest$Outbound,
  z.ZodTypeDef,
  AccountingSuppliersAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  supplier: components.SupplierInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    supplier: "Supplier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSuppliersAddRequest$ {
  /** @deprecated use `AccountingSuppliersAddRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingSuppliersAddRequest$inboundSchema;
  /** @deprecated use `AccountingSuppliersAddRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingSuppliersAddRequest$outboundSchema;
  /** @deprecated use `AccountingSuppliersAddRequest$Outbound` instead. */
  export type Outbound = AccountingSuppliersAddRequest$Outbound;
}

/** @internal */
export const AccountingSuppliersAddResponse$inboundSchema: z.ZodType<
  AccountingSuppliersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateSupplierResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingSuppliersAddResponse$Outbound =
  | components.CreateSupplierResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingSuppliersAddResponse$outboundSchema: z.ZodType<
  AccountingSuppliersAddResponse$Outbound,
  z.ZodTypeDef,
  AccountingSuppliersAddResponse
> = z.union([
  components.CreateSupplierResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSuppliersAddResponse$ {
  /** @deprecated use `AccountingSuppliersAddResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingSuppliersAddResponse$inboundSchema;
  /** @deprecated use `AccountingSuppliersAddResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingSuppliersAddResponse$outboundSchema;
  /** @deprecated use `AccountingSuppliersAddResponse$Outbound` instead. */
  export type Outbound = AccountingSuppliersAddResponse$Outbound;
}
