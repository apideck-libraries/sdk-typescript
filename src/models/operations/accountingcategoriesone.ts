/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingCategoriesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingCategoriesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingCategoriesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Category
   */
  getCategoryResponse?: components.GetCategoryResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingCategoriesOneGlobals$inboundSchema: z.ZodType<
  AccountingCategoriesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingCategoriesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingCategoriesOneGlobals$outboundSchema: z.ZodType<
  AccountingCategoriesOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingCategoriesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCategoriesOneGlobals$ {
  /** @deprecated use `AccountingCategoriesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingCategoriesOneGlobals$inboundSchema;
  /** @deprecated use `AccountingCategoriesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingCategoriesOneGlobals$outboundSchema;
  /** @deprecated use `AccountingCategoriesOneGlobals$Outbound` instead. */
  export type Outbound = AccountingCategoriesOneGlobals$Outbound;
}

export function accountingCategoriesOneGlobalsToJSON(
  accountingCategoriesOneGlobals: AccountingCategoriesOneGlobals,
): string {
  return JSON.stringify(
    AccountingCategoriesOneGlobals$outboundSchema.parse(
      accountingCategoriesOneGlobals,
    ),
  );
}

export function accountingCategoriesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCategoriesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCategoriesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCategoriesOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingCategoriesOneRequest$inboundSchema: z.ZodType<
  AccountingCategoriesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingCategoriesOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingCategoriesOneRequest$outboundSchema: z.ZodType<
  AccountingCategoriesOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingCategoriesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCategoriesOneRequest$ {
  /** @deprecated use `AccountingCategoriesOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingCategoriesOneRequest$inboundSchema;
  /** @deprecated use `AccountingCategoriesOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingCategoriesOneRequest$outboundSchema;
  /** @deprecated use `AccountingCategoriesOneRequest$Outbound` instead. */
  export type Outbound = AccountingCategoriesOneRequest$Outbound;
}

export function accountingCategoriesOneRequestToJSON(
  accountingCategoriesOneRequest: AccountingCategoriesOneRequest,
): string {
  return JSON.stringify(
    AccountingCategoriesOneRequest$outboundSchema.parse(
      accountingCategoriesOneRequest,
    ),
  );
}

export function accountingCategoriesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCategoriesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCategoriesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCategoriesOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingCategoriesOneResponse$inboundSchema: z.ZodType<
  AccountingCategoriesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetCategoryResponse: components.GetCategoryResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetCategoryResponse": "getCategoryResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingCategoriesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetCategoryResponse?: components.GetCategoryResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingCategoriesOneResponse$outboundSchema: z.ZodType<
  AccountingCategoriesOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingCategoriesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getCategoryResponse: components.GetCategoryResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getCategoryResponse: "GetCategoryResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingCategoriesOneResponse$ {
  /** @deprecated use `AccountingCategoriesOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingCategoriesOneResponse$inboundSchema;
  /** @deprecated use `AccountingCategoriesOneResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingCategoriesOneResponse$outboundSchema;
  /** @deprecated use `AccountingCategoriesOneResponse$Outbound` instead. */
  export type Outbound = AccountingCategoriesOneResponse$Outbound;
}

export function accountingCategoriesOneResponseToJSON(
  accountingCategoriesOneResponse: AccountingCategoriesOneResponse,
): string {
  return JSON.stringify(
    AccountingCategoriesOneResponse$outboundSchema.parse(
      accountingCategoriesOneResponse,
    ),
  );
}

export function accountingCategoriesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingCategoriesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingCategoriesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingCategoriesOneResponse' from JSON`,
  );
}
