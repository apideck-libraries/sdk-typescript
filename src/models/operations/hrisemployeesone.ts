/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type HrisEmployeesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type HrisEmployeesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * Apply filters
   */
  filter?: components.EmployeesOneFilter | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
};

export type HrisEmployeesOneResponse =
  | components.GetEmployeeResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const HrisEmployeesOneGlobals$inboundSchema: z.ZodType<
  HrisEmployeesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type HrisEmployeesOneGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const HrisEmployeesOneGlobals$outboundSchema: z.ZodType<
  HrisEmployeesOneGlobals$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneGlobals$ {
  /** @deprecated use `HrisEmployeesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneGlobals$inboundSchema;
  /** @deprecated use `HrisEmployeesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneGlobals$outboundSchema;
  /** @deprecated use `HrisEmployeesOneGlobals$Outbound` instead. */
  export type Outbound = HrisEmployeesOneGlobals$Outbound;
}

/** @internal */
export const HrisEmployeesOneRequest$inboundSchema: z.ZodType<
  HrisEmployeesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.EmployeesOneFilter$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type HrisEmployeesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
  filter?: components.EmployeesOneFilter$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
};

/** @internal */
export const HrisEmployeesOneRequest$outboundSchema: z.ZodType<
  HrisEmployeesOneRequest$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
  filter: components.EmployeesOneFilter$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneRequest$ {
  /** @deprecated use `HrisEmployeesOneRequest$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneRequest$inboundSchema;
  /** @deprecated use `HrisEmployeesOneRequest$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneRequest$outboundSchema;
  /** @deprecated use `HrisEmployeesOneRequest$Outbound` instead. */
  export type Outbound = HrisEmployeesOneRequest$Outbound;
}

/** @internal */
export const HrisEmployeesOneResponse$inboundSchema: z.ZodType<
  HrisEmployeesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.GetEmployeeResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type HrisEmployeesOneResponse$Outbound =
  | components.GetEmployeeResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const HrisEmployeesOneResponse$outboundSchema: z.ZodType<
  HrisEmployeesOneResponse$Outbound,
  z.ZodTypeDef,
  HrisEmployeesOneResponse
> = z.union([
  components.GetEmployeeResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HrisEmployeesOneResponse$ {
  /** @deprecated use `HrisEmployeesOneResponse$inboundSchema` instead. */
  export const inboundSchema = HrisEmployeesOneResponse$inboundSchema;
  /** @deprecated use `HrisEmployeesOneResponse$outboundSchema` instead. */
  export const outboundSchema = HrisEmployeesOneResponse$outboundSchema;
  /** @deprecated use `HrisEmployeesOneResponse$Outbound` instead. */
  export type Outbound = HrisEmployeesOneResponse$Outbound;
}
