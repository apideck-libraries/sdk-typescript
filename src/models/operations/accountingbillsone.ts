/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBillsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBillsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingBillsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bill
   */
  getBillResponse?: components.GetBillResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBillsOneGlobals$inboundSchema: z.ZodType<
  AccountingBillsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBillsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBillsOneGlobals$outboundSchema: z.ZodType<
  AccountingBillsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBillsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillsOneGlobals$ {
  /** @deprecated use `AccountingBillsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingBillsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingBillsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingBillsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingBillsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingBillsOneGlobals$Outbound;
}

export function accountingBillsOneGlobalsToJSON(
  accountingBillsOneGlobals: AccountingBillsOneGlobals,
): string {
  return JSON.stringify(
    AccountingBillsOneGlobals$outboundSchema.parse(accountingBillsOneGlobals),
  );
}

export function accountingBillsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBillsOneRequest$inboundSchema: z.ZodType<
  AccountingBillsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingBillsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingBillsOneRequest$outboundSchema: z.ZodType<
  AccountingBillsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingBillsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillsOneRequest$ {
  /** @deprecated use `AccountingBillsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingBillsOneRequest$inboundSchema;
  /** @deprecated use `AccountingBillsOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingBillsOneRequest$outboundSchema;
  /** @deprecated use `AccountingBillsOneRequest$Outbound` instead. */
  export type Outbound = AccountingBillsOneRequest$Outbound;
}

export function accountingBillsOneRequestToJSON(
  accountingBillsOneRequest: AccountingBillsOneRequest,
): string {
  return JSON.stringify(
    AccountingBillsOneRequest$outboundSchema.parse(accountingBillsOneRequest),
  );
}

export function accountingBillsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBillsOneResponse$inboundSchema: z.ZodType<
  AccountingBillsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetBillResponse: components.GetBillResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetBillResponse": "getBillResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBillsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetBillResponse?: components.GetBillResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBillsOneResponse$outboundSchema: z.ZodType<
  AccountingBillsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingBillsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getBillResponse: components.GetBillResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getBillResponse: "GetBillResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBillsOneResponse$ {
  /** @deprecated use `AccountingBillsOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingBillsOneResponse$inboundSchema;
  /** @deprecated use `AccountingBillsOneResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingBillsOneResponse$outboundSchema;
  /** @deprecated use `AccountingBillsOneResponse$Outbound` instead. */
  export type Outbound = AccountingBillsOneResponse$Outbound;
}

export function accountingBillsOneResponseToJSON(
  accountingBillsOneResponse: AccountingBillsOneResponse,
): string {
  return JSON.stringify(
    AccountingBillsOneResponse$outboundSchema.parse(accountingBillsOneResponse),
  );
}

export function accountingBillsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBillsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBillsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBillsOneResponse' from JSON`,
  );
}
