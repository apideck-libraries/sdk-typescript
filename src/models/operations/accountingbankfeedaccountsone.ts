/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankFeedAccountsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankFeedAccountsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingBankFeedAccountsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Feed Accounts
   */
  getBankFeedAccountResponse?:
    | components.GetBankFeedAccountResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsOneGlobals$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankFeedAccountsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsOneGlobals$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsOneGlobals$ {
  /** @deprecated use `AccountingBankFeedAccountsOneGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsOneGlobals$Outbound;
}

export function accountingBankFeedAccountsOneGlobalsToJSON(
  accountingBankFeedAccountsOneGlobals: AccountingBankFeedAccountsOneGlobals,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsOneGlobals$outboundSchema.parse(
      accountingBankFeedAccountsOneGlobals,
    ),
  );
}

export function accountingBankFeedAccountsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankFeedAccountsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankFeedAccountsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsOneRequest$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type AccountingBankFeedAccountsOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsOneRequest$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsOneRequest$ {
  /** @deprecated use `AccountingBankFeedAccountsOneRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsOneRequest$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsOneRequest$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneRequest$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsOneRequest$Outbound;
}

export function accountingBankFeedAccountsOneRequestToJSON(
  accountingBankFeedAccountsOneRequest: AccountingBankFeedAccountsOneRequest,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsOneRequest$outboundSchema.parse(
      accountingBankFeedAccountsOneRequest,
    ),
  );
}

export function accountingBankFeedAccountsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankFeedAccountsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankFeedAccountsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsOneResponse$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetBankFeedAccountResponse: components
    .GetBankFeedAccountResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetBankFeedAccountResponse": "getBankFeedAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankFeedAccountsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetBankFeedAccountResponse?:
    | components.GetBankFeedAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsOneResponse$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getBankFeedAccountResponse: components
    .GetBankFeedAccountResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getBankFeedAccountResponse: "GetBankFeedAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsOneResponse$ {
  /** @deprecated use `AccountingBankFeedAccountsOneResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsOneResponse$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsOneResponse$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsOneResponse$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsOneResponse$Outbound;
}

export function accountingBankFeedAccountsOneResponseToJSON(
  accountingBankFeedAccountsOneResponse: AccountingBankFeedAccountsOneResponse,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsOneResponse$outboundSchema.parse(
      accountingBankFeedAccountsOneResponse,
    ),
  );
}

export function accountingBankFeedAccountsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankFeedAccountsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankFeedAccountsOneResponse' from JSON`,
  );
}
