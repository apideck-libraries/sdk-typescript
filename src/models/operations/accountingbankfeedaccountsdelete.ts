/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankFeedAccountsDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankFeedAccountsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingBankFeedAccountsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Feed Accounts
   */
  deleteBankFeedAccountResponse?:
    | components.DeleteBankFeedAccountResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsDeleteGlobals$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankFeedAccountsDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsDeleteGlobals$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsDeleteGlobals$ {
  /** @deprecated use `AccountingBankFeedAccountsDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsDeleteGlobals$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsDeleteGlobals$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteGlobals$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsDeleteGlobals$Outbound;
}

export function accountingBankFeedAccountsDeleteGlobalsToJSON(
  accountingBankFeedAccountsDeleteGlobals:
    AccountingBankFeedAccountsDeleteGlobals,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsDeleteGlobals$outboundSchema.parse(
      accountingBankFeedAccountsDeleteGlobals,
    ),
  );
}

export function accountingBankFeedAccountsDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsDeleteGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsDeleteGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsDeleteRequest$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingBankFeedAccountsDeleteRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingBankFeedAccountsDeleteRequest$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsDeleteRequest$ {
  /** @deprecated use `AccountingBankFeedAccountsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsDeleteRequest$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsDeleteRequest$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteRequest$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsDeleteRequest$Outbound;
}

export function accountingBankFeedAccountsDeleteRequestToJSON(
  accountingBankFeedAccountsDeleteRequest:
    AccountingBankFeedAccountsDeleteRequest,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsDeleteRequest$outboundSchema.parse(
      accountingBankFeedAccountsDeleteRequest,
    ),
  );
}

export function accountingBankFeedAccountsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedAccountsDeleteResponse$inboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  DeleteBankFeedAccountResponse: components
    .DeleteBankFeedAccountResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "DeleteBankFeedAccountResponse": "deleteBankFeedAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankFeedAccountsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteBankFeedAccountResponse?:
    | components.DeleteBankFeedAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankFeedAccountsDeleteResponse$outboundSchema: z.ZodType<
  AccountingBankFeedAccountsDeleteResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankFeedAccountsDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  deleteBankFeedAccountResponse: components
    .DeleteBankFeedAccountResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    deleteBankFeedAccountResponse: "DeleteBankFeedAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedAccountsDeleteResponse$ {
  /** @deprecated use `AccountingBankFeedAccountsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedAccountsDeleteResponse$inboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedAccountsDeleteResponse$outboundSchema;
  /** @deprecated use `AccountingBankFeedAccountsDeleteResponse$Outbound` instead. */
  export type Outbound = AccountingBankFeedAccountsDeleteResponse$Outbound;
}

export function accountingBankFeedAccountsDeleteResponseToJSON(
  accountingBankFeedAccountsDeleteResponse:
    AccountingBankFeedAccountsDeleteResponse,
): string {
  return JSON.stringify(
    AccountingBankFeedAccountsDeleteResponse$outboundSchema.parse(
      accountingBankFeedAccountsDeleteResponse,
    ),
  );
}

export function accountingBankFeedAccountsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedAccountsDeleteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedAccountsDeleteResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedAccountsDeleteResponse' from JSON`,
  );
}
