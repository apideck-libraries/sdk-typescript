/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmCustomObjectSchemasAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmCustomObjectSchemasAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
};

export type CrmCustomObjectSchemasAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Custom object schemas
   */
  getCustomObjectSchemasResponse?:
    | components.GetCustomObjectSchemasResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmCustomObjectSchemasAllGlobals$inboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmCustomObjectSchemasAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmCustomObjectSchemasAllGlobals$outboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllGlobals$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectSchemasAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectSchemasAllGlobals$ {
  /** @deprecated use `CrmCustomObjectSchemasAllGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectSchemasAllGlobals$inboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectSchemasAllGlobals$outboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllGlobals$Outbound` instead. */
  export type Outbound = CrmCustomObjectSchemasAllGlobals$Outbound;
}

export function crmCustomObjectSchemasAllGlobalsToJSON(
  crmCustomObjectSchemasAllGlobals: CrmCustomObjectSchemasAllGlobals,
): string {
  return JSON.stringify(
    CrmCustomObjectSchemasAllGlobals$outboundSchema.parse(
      crmCustomObjectSchemasAllGlobals,
    ),
  );
}

export function crmCustomObjectSchemasAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectSchemasAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectSchemasAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectSchemasAllGlobals' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectSchemasAllRequest$inboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CrmCustomObjectSchemasAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
};

/** @internal */
export const CrmCustomObjectSchemasAllRequest$outboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllRequest$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectSchemasAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectSchemasAllRequest$ {
  /** @deprecated use `CrmCustomObjectSchemasAllRequest$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectSchemasAllRequest$inboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllRequest$outboundSchema` instead. */
  export const outboundSchema = CrmCustomObjectSchemasAllRequest$outboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllRequest$Outbound` instead. */
  export type Outbound = CrmCustomObjectSchemasAllRequest$Outbound;
}

export function crmCustomObjectSchemasAllRequestToJSON(
  crmCustomObjectSchemasAllRequest: CrmCustomObjectSchemasAllRequest,
): string {
  return JSON.stringify(
    CrmCustomObjectSchemasAllRequest$outboundSchema.parse(
      crmCustomObjectSchemasAllRequest,
    ),
  );
}

export function crmCustomObjectSchemasAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectSchemasAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectSchemasAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectSchemasAllRequest' from JSON`,
  );
}

/** @internal */
export const CrmCustomObjectSchemasAllResponse$inboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetCustomObjectSchemasResponse: components
    .GetCustomObjectSchemasResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetCustomObjectSchemasResponse": "getCustomObjectSchemasResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmCustomObjectSchemasAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetCustomObjectSchemasResponse?:
    | components.GetCustomObjectSchemasResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmCustomObjectSchemasAllResponse$outboundSchema: z.ZodType<
  CrmCustomObjectSchemasAllResponse$Outbound,
  z.ZodTypeDef,
  CrmCustomObjectSchemasAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getCustomObjectSchemasResponse: components
    .GetCustomObjectSchemasResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getCustomObjectSchemasResponse: "GetCustomObjectSchemasResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmCustomObjectSchemasAllResponse$ {
  /** @deprecated use `CrmCustomObjectSchemasAllResponse$inboundSchema` instead. */
  export const inboundSchema = CrmCustomObjectSchemasAllResponse$inboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllResponse$outboundSchema` instead. */
  export const outboundSchema =
    CrmCustomObjectSchemasAllResponse$outboundSchema;
  /** @deprecated use `CrmCustomObjectSchemasAllResponse$Outbound` instead. */
  export type Outbound = CrmCustomObjectSchemasAllResponse$Outbound;
}

export function crmCustomObjectSchemasAllResponseToJSON(
  crmCustomObjectSchemasAllResponse: CrmCustomObjectSchemasAllResponse,
): string {
  return JSON.stringify(
    CrmCustomObjectSchemasAllResponse$outboundSchema.parse(
      crmCustomObjectSchemasAllResponse,
    ),
  );
}

export function crmCustomObjectSchemasAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmCustomObjectSchemasAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmCustomObjectSchemasAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmCustomObjectSchemasAllResponse' from JSON`,
  );
}
