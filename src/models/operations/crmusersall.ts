/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmUsersAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmUsersAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type CrmUsersAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Users
   */
  getUsersResponse?: components.GetUsersResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmUsersAllGlobals$inboundSchema: z.ZodType<
  CrmUsersAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmUsersAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmUsersAllGlobals$outboundSchema: z.ZodType<
  CrmUsersAllGlobals$Outbound,
  z.ZodTypeDef,
  CrmUsersAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmUsersAllGlobals$ {
  /** @deprecated use `CrmUsersAllGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmUsersAllGlobals$inboundSchema;
  /** @deprecated use `CrmUsersAllGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmUsersAllGlobals$outboundSchema;
  /** @deprecated use `CrmUsersAllGlobals$Outbound` instead. */
  export type Outbound = CrmUsersAllGlobals$Outbound;
}

export function crmUsersAllGlobalsToJSON(
  crmUsersAllGlobals: CrmUsersAllGlobals,
): string {
  return JSON.stringify(
    CrmUsersAllGlobals$outboundSchema.parse(crmUsersAllGlobals),
  );
}

export function crmUsersAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmUsersAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmUsersAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmUsersAllGlobals' from JSON`,
  );
}

/** @internal */
export const CrmUsersAllRequest$inboundSchema: z.ZodType<
  CrmUsersAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CrmUsersAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmUsersAllRequest$outboundSchema: z.ZodType<
  CrmUsersAllRequest$Outbound,
  z.ZodTypeDef,
  CrmUsersAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmUsersAllRequest$ {
  /** @deprecated use `CrmUsersAllRequest$inboundSchema` instead. */
  export const inboundSchema = CrmUsersAllRequest$inboundSchema;
  /** @deprecated use `CrmUsersAllRequest$outboundSchema` instead. */
  export const outboundSchema = CrmUsersAllRequest$outboundSchema;
  /** @deprecated use `CrmUsersAllRequest$Outbound` instead. */
  export type Outbound = CrmUsersAllRequest$Outbound;
}

export function crmUsersAllRequestToJSON(
  crmUsersAllRequest: CrmUsersAllRequest,
): string {
  return JSON.stringify(
    CrmUsersAllRequest$outboundSchema.parse(crmUsersAllRequest),
  );
}

export function crmUsersAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmUsersAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmUsersAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmUsersAllRequest' from JSON`,
  );
}

/** @internal */
export const CrmUsersAllResponse$inboundSchema: z.ZodType<
  CrmUsersAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetUsersResponse: components.GetUsersResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetUsersResponse": "getUsersResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmUsersAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetUsersResponse?: components.GetUsersResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmUsersAllResponse$outboundSchema: z.ZodType<
  CrmUsersAllResponse$Outbound,
  z.ZodTypeDef,
  CrmUsersAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getUsersResponse: components.GetUsersResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getUsersResponse: "GetUsersResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmUsersAllResponse$ {
  /** @deprecated use `CrmUsersAllResponse$inboundSchema` instead. */
  export const inboundSchema = CrmUsersAllResponse$inboundSchema;
  /** @deprecated use `CrmUsersAllResponse$outboundSchema` instead. */
  export const outboundSchema = CrmUsersAllResponse$outboundSchema;
  /** @deprecated use `CrmUsersAllResponse$Outbound` instead. */
  export type Outbound = CrmUsersAllResponse$Outbound;
}

export function crmUsersAllResponseToJSON(
  crmUsersAllResponse: CrmUsersAllResponse,
): string {
  return JSON.stringify(
    CrmUsersAllResponse$outboundSchema.parse(crmUsersAllResponse),
  );
}

export function crmUsersAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmUsersAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmUsersAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmUsersAllResponse' from JSON`,
  );
}
