/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingAgedDebtorsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingAgedDebtorsOneRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Apply filters
   */
  filter?: components.AgedReportFilter | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingAgedDebtorsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Aged Debtors
   */
  getAgedDebtorsResponse?: components.GetAgedDebtorsResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingAgedDebtorsOneGlobals$inboundSchema: z.ZodType<
  AccountingAgedDebtorsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingAgedDebtorsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingAgedDebtorsOneGlobals$outboundSchema: z.ZodType<
  AccountingAgedDebtorsOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingAgedDebtorsOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAgedDebtorsOneGlobals$ {
  /** @deprecated use `AccountingAgedDebtorsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingAgedDebtorsOneGlobals$inboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingAgedDebtorsOneGlobals$outboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneGlobals$Outbound` instead. */
  export type Outbound = AccountingAgedDebtorsOneGlobals$Outbound;
}

export function accountingAgedDebtorsOneGlobalsToJSON(
  accountingAgedDebtorsOneGlobals: AccountingAgedDebtorsOneGlobals,
): string {
  return JSON.stringify(
    AccountingAgedDebtorsOneGlobals$outboundSchema.parse(
      accountingAgedDebtorsOneGlobals,
    ),
  );
}

export function accountingAgedDebtorsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAgedDebtorsOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAgedDebtorsOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAgedDebtorsOneGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingAgedDebtorsOneRequest$inboundSchema: z.ZodType<
  AccountingAgedDebtorsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  filter: components.AgedReportFilter$inboundSchema.optional(),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type AccountingAgedDebtorsOneRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  filter?: components.AgedReportFilter$Outbound | undefined;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingAgedDebtorsOneRequest$outboundSchema: z.ZodType<
  AccountingAgedDebtorsOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingAgedDebtorsOneRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  filter: components.AgedReportFilter$outboundSchema.optional(),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAgedDebtorsOneRequest$ {
  /** @deprecated use `AccountingAgedDebtorsOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingAgedDebtorsOneRequest$inboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingAgedDebtorsOneRequest$outboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneRequest$Outbound` instead. */
  export type Outbound = AccountingAgedDebtorsOneRequest$Outbound;
}

export function accountingAgedDebtorsOneRequestToJSON(
  accountingAgedDebtorsOneRequest: AccountingAgedDebtorsOneRequest,
): string {
  return JSON.stringify(
    AccountingAgedDebtorsOneRequest$outboundSchema.parse(
      accountingAgedDebtorsOneRequest,
    ),
  );
}

export function accountingAgedDebtorsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAgedDebtorsOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAgedDebtorsOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAgedDebtorsOneRequest' from JSON`,
  );
}

/** @internal */
export const AccountingAgedDebtorsOneResponse$inboundSchema: z.ZodType<
  AccountingAgedDebtorsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetAgedDebtorsResponse: components.GetAgedDebtorsResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetAgedDebtorsResponse": "getAgedDebtorsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingAgedDebtorsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetAgedDebtorsResponse?:
    | components.GetAgedDebtorsResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingAgedDebtorsOneResponse$outboundSchema: z.ZodType<
  AccountingAgedDebtorsOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingAgedDebtorsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getAgedDebtorsResponse: components.GetAgedDebtorsResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getAgedDebtorsResponse: "GetAgedDebtorsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAgedDebtorsOneResponse$ {
  /** @deprecated use `AccountingAgedDebtorsOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingAgedDebtorsOneResponse$inboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingAgedDebtorsOneResponse$outboundSchema;
  /** @deprecated use `AccountingAgedDebtorsOneResponse$Outbound` instead. */
  export type Outbound = AccountingAgedDebtorsOneResponse$Outbound;
}

export function accountingAgedDebtorsOneResponseToJSON(
  accountingAgedDebtorsOneResponse: AccountingAgedDebtorsOneResponse,
): string {
  return JSON.stringify(
    AccountingAgedDebtorsOneResponse$outboundSchema.parse(
      accountingAgedDebtorsOneResponse,
    ),
  );
}

export function accountingAgedDebtorsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingAgedDebtorsOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingAgedDebtorsOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingAgedDebtorsOneResponse' from JSON`,
  );
}
