/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingInvoicesDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingInvoicesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingInvoicesDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Invoice deleted
   */
  deleteInvoiceResponse?: components.DeleteInvoiceResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingInvoicesDeleteGlobals$inboundSchema: z.ZodType<
  AccountingInvoicesDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingInvoicesDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingInvoicesDeleteGlobals$outboundSchema: z.ZodType<
  AccountingInvoicesDeleteGlobals$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesDeleteGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesDeleteGlobals$ {
  /** @deprecated use `AccountingInvoicesDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesDeleteGlobals$inboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesDeleteGlobals$outboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteGlobals$Outbound` instead. */
  export type Outbound = AccountingInvoicesDeleteGlobals$Outbound;
}

export function accountingInvoicesDeleteGlobalsToJSON(
  accountingInvoicesDeleteGlobals: AccountingInvoicesDeleteGlobals,
): string {
  return JSON.stringify(
    AccountingInvoicesDeleteGlobals$outboundSchema.parse(
      accountingInvoicesDeleteGlobals,
    ),
  );
}

export function accountingInvoicesDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingInvoicesDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingInvoicesDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingInvoicesDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingInvoicesDeleteRequest$inboundSchema: z.ZodType<
  AccountingInvoicesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingInvoicesDeleteRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingInvoicesDeleteRequest$outboundSchema: z.ZodType<
  AccountingInvoicesDeleteRequest$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesDeleteRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesDeleteRequest$ {
  /** @deprecated use `AccountingInvoicesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesDeleteRequest$inboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesDeleteRequest$outboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteRequest$Outbound` instead. */
  export type Outbound = AccountingInvoicesDeleteRequest$Outbound;
}

export function accountingInvoicesDeleteRequestToJSON(
  accountingInvoicesDeleteRequest: AccountingInvoicesDeleteRequest,
): string {
  return JSON.stringify(
    AccountingInvoicesDeleteRequest$outboundSchema.parse(
      accountingInvoicesDeleteRequest,
    ),
  );
}

export function accountingInvoicesDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingInvoicesDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingInvoicesDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingInvoicesDeleteRequest' from JSON`,
  );
}

/** @internal */
export const AccountingInvoicesDeleteResponse$inboundSchema: z.ZodType<
  AccountingInvoicesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  DeleteInvoiceResponse: components.DeleteInvoiceResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "DeleteInvoiceResponse": "deleteInvoiceResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingInvoicesDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteInvoiceResponse?: components.DeleteInvoiceResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingInvoicesDeleteResponse$outboundSchema: z.ZodType<
  AccountingInvoicesDeleteResponse$Outbound,
  z.ZodTypeDef,
  AccountingInvoicesDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  deleteInvoiceResponse: components.DeleteInvoiceResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    deleteInvoiceResponse: "DeleteInvoiceResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingInvoicesDeleteResponse$ {
  /** @deprecated use `AccountingInvoicesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingInvoicesDeleteResponse$inboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingInvoicesDeleteResponse$outboundSchema;
  /** @deprecated use `AccountingInvoicesDeleteResponse$Outbound` instead. */
  export type Outbound = AccountingInvoicesDeleteResponse$Outbound;
}

export function accountingInvoicesDeleteResponseToJSON(
  accountingInvoicesDeleteResponse: AccountingInvoicesDeleteResponse,
): string {
  return JSON.stringify(
    AccountingInvoicesDeleteResponse$outboundSchema.parse(
      accountingInvoicesDeleteResponse,
    ),
  );
}

export function accountingInvoicesDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingInvoicesDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingInvoicesDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingInvoicesDeleteResponse' from JSON`,
  );
}
