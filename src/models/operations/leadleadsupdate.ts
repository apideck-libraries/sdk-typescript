/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type LeadLeadsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type LeadLeadsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  lead: components.LeadInput;
};

export type LeadLeadsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Lead updated
   */
  updateLeadResponse?: components.UpdateLeadResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const LeadLeadsUpdateGlobals$inboundSchema: z.ZodType<
  LeadLeadsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type LeadLeadsUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const LeadLeadsUpdateGlobals$outboundSchema: z.ZodType<
  LeadLeadsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  LeadLeadsUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsUpdateGlobals$ {
  /** @deprecated use `LeadLeadsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsUpdateGlobals$inboundSchema;
  /** @deprecated use `LeadLeadsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsUpdateGlobals$outboundSchema;
  /** @deprecated use `LeadLeadsUpdateGlobals$Outbound` instead. */
  export type Outbound = LeadLeadsUpdateGlobals$Outbound;
}

/** @internal */
export const LeadLeadsUpdateRequest$inboundSchema: z.ZodType<
  LeadLeadsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Lead: components.LeadInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Lead": "lead",
  });
});

/** @internal */
export type LeadLeadsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  Lead: components.LeadInput$Outbound;
};

/** @internal */
export const LeadLeadsUpdateRequest$outboundSchema: z.ZodType<
  LeadLeadsUpdateRequest$Outbound,
  z.ZodTypeDef,
  LeadLeadsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  lead: components.LeadInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    lead: "Lead",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsUpdateRequest$ {
  /** @deprecated use `LeadLeadsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsUpdateRequest$inboundSchema;
  /** @deprecated use `LeadLeadsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsUpdateRequest$outboundSchema;
  /** @deprecated use `LeadLeadsUpdateRequest$Outbound` instead. */
  export type Outbound = LeadLeadsUpdateRequest$Outbound;
}

/** @internal */
export const LeadLeadsUpdateResponse$inboundSchema: z.ZodType<
  LeadLeadsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateLeadResponse: components.UpdateLeadResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateLeadResponse": "updateLeadResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type LeadLeadsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateLeadResponse?: components.UpdateLeadResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const LeadLeadsUpdateResponse$outboundSchema: z.ZodType<
  LeadLeadsUpdateResponse$Outbound,
  z.ZodTypeDef,
  LeadLeadsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateLeadResponse: components.UpdateLeadResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateLeadResponse: "UpdateLeadResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsUpdateResponse$ {
  /** @deprecated use `LeadLeadsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsUpdateResponse$inboundSchema;
  /** @deprecated use `LeadLeadsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsUpdateResponse$outboundSchema;
  /** @deprecated use `LeadLeadsUpdateResponse$Outbound` instead. */
  export type Outbound = LeadLeadsUpdateResponse$Outbound;
}
