/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileStorageDriveGroupsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageDriveGroupsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  driveGroup: components.DriveGroupInput;
};

export type FileStorageDriveGroupsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * DriveGroups
   */
  createDriveGroupResponse?: components.CreateDriveGroupResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageDriveGroupsAddGlobals$inboundSchema: z.ZodType<
  FileStorageDriveGroupsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageDriveGroupsAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageDriveGroupsAddGlobals$outboundSchema: z.ZodType<
  FileStorageDriveGroupsAddGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageDriveGroupsAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDriveGroupsAddGlobals$ {
  /** @deprecated use `FileStorageDriveGroupsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = FileStorageDriveGroupsAddGlobals$inboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = FileStorageDriveGroupsAddGlobals$outboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddGlobals$Outbound` instead. */
  export type Outbound = FileStorageDriveGroupsAddGlobals$Outbound;
}

export function fileStorageDriveGroupsAddGlobalsToJSON(
  fileStorageDriveGroupsAddGlobals: FileStorageDriveGroupsAddGlobals,
): string {
  return JSON.stringify(
    FileStorageDriveGroupsAddGlobals$outboundSchema.parse(
      fileStorageDriveGroupsAddGlobals,
    ),
  );
}

export function fileStorageDriveGroupsAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDriveGroupsAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDriveGroupsAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDriveGroupsAddGlobals' from JSON`,
  );
}

/** @internal */
export const FileStorageDriveGroupsAddRequest$inboundSchema: z.ZodType<
  FileStorageDriveGroupsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  DriveGroup: components.DriveGroupInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "DriveGroup": "driveGroup",
  });
});

/** @internal */
export type FileStorageDriveGroupsAddRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  DriveGroup: components.DriveGroupInput$Outbound;
};

/** @internal */
export const FileStorageDriveGroupsAddRequest$outboundSchema: z.ZodType<
  FileStorageDriveGroupsAddRequest$Outbound,
  z.ZodTypeDef,
  FileStorageDriveGroupsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  driveGroup: components.DriveGroupInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    driveGroup: "DriveGroup",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDriveGroupsAddRequest$ {
  /** @deprecated use `FileStorageDriveGroupsAddRequest$inboundSchema` instead. */
  export const inboundSchema = FileStorageDriveGroupsAddRequest$inboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddRequest$outboundSchema` instead. */
  export const outboundSchema = FileStorageDriveGroupsAddRequest$outboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddRequest$Outbound` instead. */
  export type Outbound = FileStorageDriveGroupsAddRequest$Outbound;
}

export function fileStorageDriveGroupsAddRequestToJSON(
  fileStorageDriveGroupsAddRequest: FileStorageDriveGroupsAddRequest,
): string {
  return JSON.stringify(
    FileStorageDriveGroupsAddRequest$outboundSchema.parse(
      fileStorageDriveGroupsAddRequest,
    ),
  );
}

export function fileStorageDriveGroupsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDriveGroupsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDriveGroupsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDriveGroupsAddRequest' from JSON`,
  );
}

/** @internal */
export const FileStorageDriveGroupsAddResponse$inboundSchema: z.ZodType<
  FileStorageDriveGroupsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateDriveGroupResponse: components.CreateDriveGroupResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateDriveGroupResponse": "createDriveGroupResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageDriveGroupsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateDriveGroupResponse?:
    | components.CreateDriveGroupResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageDriveGroupsAddResponse$outboundSchema: z.ZodType<
  FileStorageDriveGroupsAddResponse$Outbound,
  z.ZodTypeDef,
  FileStorageDriveGroupsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createDriveGroupResponse: components.CreateDriveGroupResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createDriveGroupResponse: "CreateDriveGroupResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDriveGroupsAddResponse$ {
  /** @deprecated use `FileStorageDriveGroupsAddResponse$inboundSchema` instead. */
  export const inboundSchema = FileStorageDriveGroupsAddResponse$inboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    FileStorageDriveGroupsAddResponse$outboundSchema;
  /** @deprecated use `FileStorageDriveGroupsAddResponse$Outbound` instead. */
  export type Outbound = FileStorageDriveGroupsAddResponse$Outbound;
}

export function fileStorageDriveGroupsAddResponseToJSON(
  fileStorageDriveGroupsAddResponse: FileStorageDriveGroupsAddResponse,
): string {
  return JSON.stringify(
    FileStorageDriveGroupsAddResponse$outboundSchema.parse(
      fileStorageDriveGroupsAddResponse,
    ),
  );
}

export function fileStorageDriveGroupsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileStorageDriveGroupsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileStorageDriveGroupsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileStorageDriveGroupsAddResponse' from JSON`,
  );
}
