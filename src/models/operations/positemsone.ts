/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosItemsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosItemsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type PosItemsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Items
   */
  getItemResponse?: components.GetItemResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosItemsOneGlobals$inboundSchema: z.ZodType<
  PosItemsOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosItemsOneGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosItemsOneGlobals$outboundSchema: z.ZodType<
  PosItemsOneGlobals$Outbound,
  z.ZodTypeDef,
  PosItemsOneGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosItemsOneGlobals$ {
  /** @deprecated use `PosItemsOneGlobals$inboundSchema` instead. */
  export const inboundSchema = PosItemsOneGlobals$inboundSchema;
  /** @deprecated use `PosItemsOneGlobals$outboundSchema` instead. */
  export const outboundSchema = PosItemsOneGlobals$outboundSchema;
  /** @deprecated use `PosItemsOneGlobals$Outbound` instead. */
  export type Outbound = PosItemsOneGlobals$Outbound;
}

/** @internal */
export const PosItemsOneRequest$inboundSchema: z.ZodType<
  PosItemsOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type PosItemsOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const PosItemsOneRequest$outboundSchema: z.ZodType<
  PosItemsOneRequest$Outbound,
  z.ZodTypeDef,
  PosItemsOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosItemsOneRequest$ {
  /** @deprecated use `PosItemsOneRequest$inboundSchema` instead. */
  export const inboundSchema = PosItemsOneRequest$inboundSchema;
  /** @deprecated use `PosItemsOneRequest$outboundSchema` instead. */
  export const outboundSchema = PosItemsOneRequest$outboundSchema;
  /** @deprecated use `PosItemsOneRequest$Outbound` instead. */
  export type Outbound = PosItemsOneRequest$Outbound;
}

/** @internal */
export const PosItemsOneResponse$inboundSchema: z.ZodType<
  PosItemsOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetItemResponse: components.GetItemResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetItemResponse": "getItemResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosItemsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetItemResponse?: components.GetItemResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosItemsOneResponse$outboundSchema: z.ZodType<
  PosItemsOneResponse$Outbound,
  z.ZodTypeDef,
  PosItemsOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getItemResponse: components.GetItemResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getItemResponse: "GetItemResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosItemsOneResponse$ {
  /** @deprecated use `PosItemsOneResponse$inboundSchema` instead. */
  export const inboundSchema = PosItemsOneResponse$inboundSchema;
  /** @deprecated use `PosItemsOneResponse$outboundSchema` instead. */
  export const outboundSchema = PosItemsOneResponse$outboundSchema;
  /** @deprecated use `PosItemsOneResponse$Outbound` instead. */
  export type Outbound = PosItemsOneResponse$Outbound;
}
