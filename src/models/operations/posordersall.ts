/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosOrdersAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosOrdersAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * ID of the location.
   */
  locationId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type PosOrdersAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Orders
   */
  getOrdersResponse?: components.GetOrdersResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosOrdersAllGlobals$inboundSchema: z.ZodType<
  PosOrdersAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosOrdersAllGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosOrdersAllGlobals$outboundSchema: z.ZodType<
  PosOrdersAllGlobals$Outbound,
  z.ZodTypeDef,
  PosOrdersAllGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAllGlobals$ {
  /** @deprecated use `PosOrdersAllGlobals$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAllGlobals$inboundSchema;
  /** @deprecated use `PosOrdersAllGlobals$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAllGlobals$outboundSchema;
  /** @deprecated use `PosOrdersAllGlobals$Outbound` instead. */
  export type Outbound = PosOrdersAllGlobals$Outbound;
}

/** @internal */
export const PosOrdersAllRequest$inboundSchema: z.ZodType<
  PosOrdersAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  location_id: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "location_id": "locationId",
  });
});

/** @internal */
export type PosOrdersAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  location_id?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const PosOrdersAllRequest$outboundSchema: z.ZodType<
  PosOrdersAllRequest$Outbound,
  z.ZodTypeDef,
  PosOrdersAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  locationId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    locationId: "location_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAllRequest$ {
  /** @deprecated use `PosOrdersAllRequest$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAllRequest$inboundSchema;
  /** @deprecated use `PosOrdersAllRequest$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAllRequest$outboundSchema;
  /** @deprecated use `PosOrdersAllRequest$Outbound` instead. */
  export type Outbound = PosOrdersAllRequest$Outbound;
}

/** @internal */
export const PosOrdersAllResponse$inboundSchema: z.ZodType<
  PosOrdersAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetOrdersResponse: components.GetOrdersResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetOrdersResponse": "getOrdersResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosOrdersAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetOrdersResponse?: components.GetOrdersResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosOrdersAllResponse$outboundSchema: z.ZodType<
  PosOrdersAllResponse$Outbound,
  z.ZodTypeDef,
  PosOrdersAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getOrdersResponse: components.GetOrdersResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getOrdersResponse: "GetOrdersResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAllResponse$ {
  /** @deprecated use `PosOrdersAllResponse$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAllResponse$inboundSchema;
  /** @deprecated use `PosOrdersAllResponse$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAllResponse$outboundSchema;
  /** @deprecated use `PosOrdersAllResponse$Outbound` instead. */
  export type Outbound = PosOrdersAllResponse$Outbound;
}
