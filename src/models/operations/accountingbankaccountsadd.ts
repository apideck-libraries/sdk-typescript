/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankAccountsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankAccountsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  accountingBankAccount: components.AccountingBankAccountInput;
};

export type AccountingBankAccountsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Account created
   */
  createBankAccountResponse?: components.CreateBankAccountResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankAccountsAddGlobals$inboundSchema: z.ZodType<
  AccountingBankAccountsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankAccountsAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankAccountsAddGlobals$outboundSchema: z.ZodType<
  AccountingBankAccountsAddGlobals$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsAddGlobals$ {
  /** @deprecated use `AccountingBankAccountsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsAddGlobals$inboundSchema;
  /** @deprecated use `AccountingBankAccountsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingBankAccountsAddGlobals$outboundSchema;
  /** @deprecated use `AccountingBankAccountsAddGlobals$Outbound` instead. */
  export type Outbound = AccountingBankAccountsAddGlobals$Outbound;
}

export function accountingBankAccountsAddGlobalsToJSON(
  accountingBankAccountsAddGlobals: AccountingBankAccountsAddGlobals,
): string {
  return JSON.stringify(
    AccountingBankAccountsAddGlobals$outboundSchema.parse(
      accountingBankAccountsAddGlobals,
    ),
  );
}

export function accountingBankAccountsAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsAddGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsAddRequest$inboundSchema: z.ZodType<
  AccountingBankAccountsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  AccountingBankAccount: components.AccountingBankAccountInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AccountingBankAccount": "accountingBankAccount",
  });
});

/** @internal */
export type AccountingBankAccountsAddRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  AccountingBankAccount: components.AccountingBankAccountInput$Outbound;
};

/** @internal */
export const AccountingBankAccountsAddRequest$outboundSchema: z.ZodType<
  AccountingBankAccountsAddRequest$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  accountingBankAccount: components.AccountingBankAccountInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    accountingBankAccount: "AccountingBankAccount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsAddRequest$ {
  /** @deprecated use `AccountingBankAccountsAddRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsAddRequest$inboundSchema;
  /** @deprecated use `AccountingBankAccountsAddRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingBankAccountsAddRequest$outboundSchema;
  /** @deprecated use `AccountingBankAccountsAddRequest$Outbound` instead. */
  export type Outbound = AccountingBankAccountsAddRequest$Outbound;
}

export function accountingBankAccountsAddRequestToJSON(
  accountingBankAccountsAddRequest: AccountingBankAccountsAddRequest,
): string {
  return JSON.stringify(
    AccountingBankAccountsAddRequest$outboundSchema.parse(
      accountingBankAccountsAddRequest,
    ),
  );
}

export function accountingBankAccountsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsAddRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankAccountsAddResponse$inboundSchema: z.ZodType<
  AccountingBankAccountsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateBankAccountResponse: components.CreateBankAccountResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateBankAccountResponse": "createBankAccountResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingBankAccountsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateBankAccountResponse?:
    | components.CreateBankAccountResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankAccountsAddResponse$outboundSchema: z.ZodType<
  AccountingBankAccountsAddResponse$Outbound,
  z.ZodTypeDef,
  AccountingBankAccountsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createBankAccountResponse: components.CreateBankAccountResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createBankAccountResponse: "CreateBankAccountResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankAccountsAddResponse$ {
  /** @deprecated use `AccountingBankAccountsAddResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingBankAccountsAddResponse$inboundSchema;
  /** @deprecated use `AccountingBankAccountsAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankAccountsAddResponse$outboundSchema;
  /** @deprecated use `AccountingBankAccountsAddResponse$Outbound` instead. */
  export type Outbound = AccountingBankAccountsAddResponse$Outbound;
}

export function accountingBankAccountsAddResponseToJSON(
  accountingBankAccountsAddResponse: AccountingBankAccountsAddResponse,
): string {
  return JSON.stringify(
    AccountingBankAccountsAddResponse$outboundSchema.parse(
      accountingBankAccountsAddResponse,
    ),
  );
}

export function accountingBankAccountsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingBankAccountsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingBankAccountsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingBankAccountsAddResponse' from JSON`,
  );
}
