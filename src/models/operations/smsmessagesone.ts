/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type SmsMessagesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type SmsMessagesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type SmsMessagesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Messages
   */
  getMessageResponse?: components.GetMessageResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const SmsMessagesOneGlobals$inboundSchema: z.ZodType<
  SmsMessagesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type SmsMessagesOneGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const SmsMessagesOneGlobals$outboundSchema: z.ZodType<
  SmsMessagesOneGlobals$Outbound,
  z.ZodTypeDef,
  SmsMessagesOneGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesOneGlobals$ {
  /** @deprecated use `SmsMessagesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesOneGlobals$inboundSchema;
  /** @deprecated use `SmsMessagesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesOneGlobals$outboundSchema;
  /** @deprecated use `SmsMessagesOneGlobals$Outbound` instead. */
  export type Outbound = SmsMessagesOneGlobals$Outbound;
}

/** @internal */
export const SmsMessagesOneRequest$inboundSchema: z.ZodType<
  SmsMessagesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type SmsMessagesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const SmsMessagesOneRequest$outboundSchema: z.ZodType<
  SmsMessagesOneRequest$Outbound,
  z.ZodTypeDef,
  SmsMessagesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesOneRequest$ {
  /** @deprecated use `SmsMessagesOneRequest$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesOneRequest$inboundSchema;
  /** @deprecated use `SmsMessagesOneRequest$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesOneRequest$outboundSchema;
  /** @deprecated use `SmsMessagesOneRequest$Outbound` instead. */
  export type Outbound = SmsMessagesOneRequest$Outbound;
}

/** @internal */
export const SmsMessagesOneResponse$inboundSchema: z.ZodType<
  SmsMessagesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetMessageResponse: components.GetMessageResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetMessageResponse": "getMessageResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type SmsMessagesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetMessageResponse?: components.GetMessageResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const SmsMessagesOneResponse$outboundSchema: z.ZodType<
  SmsMessagesOneResponse$Outbound,
  z.ZodTypeDef,
  SmsMessagesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getMessageResponse: components.GetMessageResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getMessageResponse: "GetMessageResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessagesOneResponse$ {
  /** @deprecated use `SmsMessagesOneResponse$inboundSchema` instead. */
  export const inboundSchema = SmsMessagesOneResponse$inboundSchema;
  /** @deprecated use `SmsMessagesOneResponse$outboundSchema` instead. */
  export const outboundSchema = SmsMessagesOneResponse$outboundSchema;
  /** @deprecated use `SmsMessagesOneResponse$Outbound` instead. */
  export type Outbound = SmsMessagesOneResponse$Outbound;
}
