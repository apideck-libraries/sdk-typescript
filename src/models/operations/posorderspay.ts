/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosOrdersPayGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosOrdersPayRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  order: components.OrderInput;
};

export type PosOrdersPayResponse =
  | components.CreateOrderResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const PosOrdersPayGlobals$inboundSchema: z.ZodType<
  PosOrdersPayGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosOrdersPayGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosOrdersPayGlobals$outboundSchema: z.ZodType<
  PosOrdersPayGlobals$Outbound,
  z.ZodTypeDef,
  PosOrdersPayGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersPayGlobals$ {
  /** @deprecated use `PosOrdersPayGlobals$inboundSchema` instead. */
  export const inboundSchema = PosOrdersPayGlobals$inboundSchema;
  /** @deprecated use `PosOrdersPayGlobals$outboundSchema` instead. */
  export const outboundSchema = PosOrdersPayGlobals$outboundSchema;
  /** @deprecated use `PosOrdersPayGlobals$Outbound` instead. */
  export type Outbound = PosOrdersPayGlobals$Outbound;
}

/** @internal */
export const PosOrdersPayRequest$inboundSchema: z.ZodType<
  PosOrdersPayRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
  Order: components.OrderInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Order": "order",
  });
});

/** @internal */
export type PosOrdersPayRequest$Outbound = {
  id: string;
  raw: boolean;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
  Order: components.OrderInput$Outbound;
};

/** @internal */
export const PosOrdersPayRequest$outboundSchema: z.ZodType<
  PosOrdersPayRequest$Outbound,
  z.ZodTypeDef,
  PosOrdersPayRequest
> = z.object({
  id: z.string(),
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
  order: components.OrderInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersPayRequest$ {
  /** @deprecated use `PosOrdersPayRequest$inboundSchema` instead. */
  export const inboundSchema = PosOrdersPayRequest$inboundSchema;
  /** @deprecated use `PosOrdersPayRequest$outboundSchema` instead. */
  export const outboundSchema = PosOrdersPayRequest$outboundSchema;
  /** @deprecated use `PosOrdersPayRequest$Outbound` instead. */
  export type Outbound = PosOrdersPayRequest$Outbound;
}

/** @internal */
export const PosOrdersPayResponse$inboundSchema: z.ZodType<
  PosOrdersPayResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CreateOrderResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type PosOrdersPayResponse$Outbound =
  | components.CreateOrderResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const PosOrdersPayResponse$outboundSchema: z.ZodType<
  PosOrdersPayResponse$Outbound,
  z.ZodTypeDef,
  PosOrdersPayResponse
> = z.union([
  components.CreateOrderResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersPayResponse$ {
  /** @deprecated use `PosOrdersPayResponse$inboundSchema` instead. */
  export const inboundSchema = PosOrdersPayResponse$inboundSchema;
  /** @deprecated use `PosOrdersPayResponse$outboundSchema` instead. */
  export const outboundSchema = PosOrdersPayResponse$outboundSchema;
  /** @deprecated use `PosOrdersPayResponse$Outbound` instead. */
  export type Outbound = PosOrdersPayResponse$Outbound;
}
