/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosOrdersAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosOrdersAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  order: components.OrderInput;
};

export type PosOrdersAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Orders
   */
  createOrderResponse?: components.CreateOrderResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosOrdersAddGlobals$inboundSchema: z.ZodType<
  PosOrdersAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosOrdersAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosOrdersAddGlobals$outboundSchema: z.ZodType<
  PosOrdersAddGlobals$Outbound,
  z.ZodTypeDef,
  PosOrdersAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAddGlobals$ {
  /** @deprecated use `PosOrdersAddGlobals$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAddGlobals$inboundSchema;
  /** @deprecated use `PosOrdersAddGlobals$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAddGlobals$outboundSchema;
  /** @deprecated use `PosOrdersAddGlobals$Outbound` instead. */
  export type Outbound = PosOrdersAddGlobals$Outbound;
}

/** @internal */
export const PosOrdersAddRequest$inboundSchema: z.ZodType<
  PosOrdersAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Order: components.OrderInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Order": "order",
  });
});

/** @internal */
export type PosOrdersAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Order: components.OrderInput$Outbound;
};

/** @internal */
export const PosOrdersAddRequest$outboundSchema: z.ZodType<
  PosOrdersAddRequest$Outbound,
  z.ZodTypeDef,
  PosOrdersAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  order: components.OrderInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    order: "Order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAddRequest$ {
  /** @deprecated use `PosOrdersAddRequest$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAddRequest$inboundSchema;
  /** @deprecated use `PosOrdersAddRequest$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAddRequest$outboundSchema;
  /** @deprecated use `PosOrdersAddRequest$Outbound` instead. */
  export type Outbound = PosOrdersAddRequest$Outbound;
}

/** @internal */
export const PosOrdersAddResponse$inboundSchema: z.ZodType<
  PosOrdersAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateOrderResponse: components.CreateOrderResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateOrderResponse": "createOrderResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosOrdersAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateOrderResponse?: components.CreateOrderResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosOrdersAddResponse$outboundSchema: z.ZodType<
  PosOrdersAddResponse$Outbound,
  z.ZodTypeDef,
  PosOrdersAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createOrderResponse: components.CreateOrderResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createOrderResponse: "CreateOrderResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosOrdersAddResponse$ {
  /** @deprecated use `PosOrdersAddResponse$inboundSchema` instead. */
  export const inboundSchema = PosOrdersAddResponse$inboundSchema;
  /** @deprecated use `PosOrdersAddResponse$outboundSchema` instead. */
  export const outboundSchema = PosOrdersAddResponse$outboundSchema;
  /** @deprecated use `PosOrdersAddResponse$Outbound` instead. */
  export type Outbound = PosOrdersAddResponse$Outbound;
}
