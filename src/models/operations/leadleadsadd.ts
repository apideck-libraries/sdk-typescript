/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type LeadLeadsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type LeadLeadsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  lead: components.LeadInput;
};

export type LeadLeadsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Lead created
   */
  createLeadResponse?: components.CreateLeadResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const LeadLeadsAddGlobals$inboundSchema: z.ZodType<
  LeadLeadsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type LeadLeadsAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const LeadLeadsAddGlobals$outboundSchema: z.ZodType<
  LeadLeadsAddGlobals$Outbound,
  z.ZodTypeDef,
  LeadLeadsAddGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsAddGlobals$ {
  /** @deprecated use `LeadLeadsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsAddGlobals$inboundSchema;
  /** @deprecated use `LeadLeadsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsAddGlobals$outboundSchema;
  /** @deprecated use `LeadLeadsAddGlobals$Outbound` instead. */
  export type Outbound = LeadLeadsAddGlobals$Outbound;
}

/** @internal */
export const LeadLeadsAddRequest$inboundSchema: z.ZodType<
  LeadLeadsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  Lead: components.LeadInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Lead": "lead",
  });
});

/** @internal */
export type LeadLeadsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  Lead: components.LeadInput$Outbound;
};

/** @internal */
export const LeadLeadsAddRequest$outboundSchema: z.ZodType<
  LeadLeadsAddRequest$Outbound,
  z.ZodTypeDef,
  LeadLeadsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  lead: components.LeadInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    lead: "Lead",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsAddRequest$ {
  /** @deprecated use `LeadLeadsAddRequest$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsAddRequest$inboundSchema;
  /** @deprecated use `LeadLeadsAddRequest$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsAddRequest$outboundSchema;
  /** @deprecated use `LeadLeadsAddRequest$Outbound` instead. */
  export type Outbound = LeadLeadsAddRequest$Outbound;
}

/** @internal */
export const LeadLeadsAddResponse$inboundSchema: z.ZodType<
  LeadLeadsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateLeadResponse: components.CreateLeadResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateLeadResponse": "createLeadResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type LeadLeadsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateLeadResponse?: components.CreateLeadResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const LeadLeadsAddResponse$outboundSchema: z.ZodType<
  LeadLeadsAddResponse$Outbound,
  z.ZodTypeDef,
  LeadLeadsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createLeadResponse: components.CreateLeadResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createLeadResponse: "CreateLeadResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeadLeadsAddResponse$ {
  /** @deprecated use `LeadLeadsAddResponse$inboundSchema` instead. */
  export const inboundSchema = LeadLeadsAddResponse$inboundSchema;
  /** @deprecated use `LeadLeadsAddResponse$outboundSchema` instead. */
  export const outboundSchema = LeadLeadsAddResponse$outboundSchema;
  /** @deprecated use `LeadLeadsAddResponse$Outbound` instead. */
  export type Outbound = LeadLeadsAddResponse$Outbound;
}
