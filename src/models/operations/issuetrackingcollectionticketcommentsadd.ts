/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type IssueTrackingCollectionTicketCommentsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type IssueTrackingCollectionTicketCommentsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The collection ID
   */
  collectionId: string;
  /**
   * ID of the ticket you are acting upon.
   */
  ticketId: string;
  collectionTicketComment: components.CollectionTicketCommentInput;
};

export type IssueTrackingCollectionTicketCommentsAddResponse =
  | components.CreateCommentResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddGlobals$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customerId: z.string().optional(),
    appId: z.string().optional(),
  });

/** @internal */
export type IssueTrackingCollectionTicketCommentsAddGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddGlobals$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddGlobals$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsAddGlobals
  > = z.object({
    customerId: z.string().optional(),
    appId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsAddGlobals$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddGlobals$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsAddGlobals$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddGlobals$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsAddGlobals$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddGlobals$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsAddGlobals$Outbound;
}

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddRequest$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    raw: z.boolean().default(false),
    serviceId: z.string().optional(),
    collection_id: z.string(),
    ticket_id: z.string(),
    CollectionTicketComment:
      components.CollectionTicketCommentInput$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "collection_id": "collectionId",
      "ticket_id": "ticketId",
      "CollectionTicketComment": "collectionTicketComment",
    });
  });

/** @internal */
export type IssueTrackingCollectionTicketCommentsAddRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  collection_id: string;
  ticket_id: string;
  CollectionTicketComment: components.CollectionTicketCommentInput$Outbound;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddRequest$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddRequest$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsAddRequest
  > = z.object({
    raw: z.boolean().default(false),
    serviceId: z.string().optional(),
    collectionId: z.string(),
    ticketId: z.string(),
    collectionTicketComment:
      components.CollectionTicketCommentInput$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      collectionId: "collection_id",
      ticketId: "ticket_id",
      collectionTicketComment: "CollectionTicketComment",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsAddRequest$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddRequest$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsAddRequest$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddRequest$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsAddRequest$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddRequest$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsAddRequest$Outbound;
}

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddResponse$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.CreateCommentResponse$inboundSchema,
    components.UnexpectedErrorResponse$inboundSchema,
  ]);

/** @internal */
export type IssueTrackingCollectionTicketCommentsAddResponse$Outbound =
  | components.CreateCommentResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const IssueTrackingCollectionTicketCommentsAddResponse$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsAddResponse$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsAddResponse
  > = z.union([
    components.CreateCommentResponse$outboundSchema,
    components.UnexpectedErrorResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsAddResponse$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddResponse$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsAddResponse$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddResponse$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsAddResponse$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsAddResponse$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsAddResponse$Outbound;
}
