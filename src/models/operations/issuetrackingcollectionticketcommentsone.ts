/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IssueTrackingCollectionTicketCommentsOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type IssueTrackingCollectionTicketCommentsOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * The collection ID
   */
  collectionId: string;
  /**
   * ID of the ticket you are acting upon.
   */
  ticketId: string;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type IssueTrackingCollectionTicketCommentsOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Get a Comment
   */
  getCommentResponse?: components.GetCommentResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneGlobals$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    consumerId: z.string().optional(),
    appId: z.string().optional(),
  });

/** @internal */
export type IssueTrackingCollectionTicketCommentsOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneGlobals$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneGlobals$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsOneGlobals
  > = z.object({
    consumerId: z.string().optional(),
    appId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsOneGlobals$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneGlobals$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsOneGlobals$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneGlobals$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsOneGlobals$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneGlobals$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsOneGlobals$Outbound;
}

export function issueTrackingCollectionTicketCommentsOneGlobalsToJSON(
  issueTrackingCollectionTicketCommentsOneGlobals:
    IssueTrackingCollectionTicketCommentsOneGlobals,
): string {
  return JSON.stringify(
    IssueTrackingCollectionTicketCommentsOneGlobals$outboundSchema.parse(
      issueTrackingCollectionTicketCommentsOneGlobals,
    ),
  );
}

export function issueTrackingCollectionTicketCommentsOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  IssueTrackingCollectionTicketCommentsOneGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IssueTrackingCollectionTicketCommentsOneGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IssueTrackingCollectionTicketCommentsOneGlobals' from JSON`,
  );
}

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneRequest$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    raw: z.boolean().default(false),
    consumerId: z.string().optional(),
    appId: z.string().optional(),
    serviceId: z.string().optional(),
    cursor: z.nullable(z.string()).optional(),
    limit: z.number().int().default(20),
    collection_id: z.string(),
    ticket_id: z.string(),
    fields: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "collection_id": "collectionId",
      "ticket_id": "ticketId",
    });
  });

/** @internal */
export type IssueTrackingCollectionTicketCommentsOneRequest$Outbound = {
  id: string;
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  collection_id: string;
  ticket_id: string;
  fields?: string | null | undefined;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneRequest$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneRequest$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsOneRequest
  > = z.object({
    id: z.string(),
    raw: z.boolean().default(false),
    consumerId: z.string().optional(),
    appId: z.string().optional(),
    serviceId: z.string().optional(),
    cursor: z.nullable(z.string()).optional(),
    limit: z.number().int().default(20),
    collectionId: z.string(),
    ticketId: z.string(),
    fields: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      collectionId: "collection_id",
      ticketId: "ticket_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsOneRequest$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneRequest$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsOneRequest$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneRequest$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsOneRequest$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneRequest$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsOneRequest$Outbound;
}

export function issueTrackingCollectionTicketCommentsOneRequestToJSON(
  issueTrackingCollectionTicketCommentsOneRequest:
    IssueTrackingCollectionTicketCommentsOneRequest,
): string {
  return JSON.stringify(
    IssueTrackingCollectionTicketCommentsOneRequest$outboundSchema.parse(
      issueTrackingCollectionTicketCommentsOneRequest,
    ),
  );
}

export function issueTrackingCollectionTicketCommentsOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  IssueTrackingCollectionTicketCommentsOneRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IssueTrackingCollectionTicketCommentsOneRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IssueTrackingCollectionTicketCommentsOneRequest' from JSON`,
  );
}

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneResponse$inboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: components.HTTPMetadata$inboundSchema,
    GetCommentResponse: components.GetCommentResponse$inboundSchema.optional(),
    UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "GetCommentResponse": "getCommentResponse",
      "UnexpectedErrorResponse": "unexpectedErrorResponse",
    });
  });

/** @internal */
export type IssueTrackingCollectionTicketCommentsOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetCommentResponse?: components.GetCommentResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const IssueTrackingCollectionTicketCommentsOneResponse$outboundSchema:
  z.ZodType<
    IssueTrackingCollectionTicketCommentsOneResponse$Outbound,
    z.ZodTypeDef,
    IssueTrackingCollectionTicketCommentsOneResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    getCommentResponse: components.GetCommentResponse$outboundSchema.optional(),
    unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      getCommentResponse: "GetCommentResponse",
      unexpectedErrorResponse: "UnexpectedErrorResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueTrackingCollectionTicketCommentsOneResponse$ {
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneResponse$inboundSchema` instead. */
  export const inboundSchema =
    IssueTrackingCollectionTicketCommentsOneResponse$inboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    IssueTrackingCollectionTicketCommentsOneResponse$outboundSchema;
  /** @deprecated use `IssueTrackingCollectionTicketCommentsOneResponse$Outbound` instead. */
  export type Outbound =
    IssueTrackingCollectionTicketCommentsOneResponse$Outbound;
}

export function issueTrackingCollectionTicketCommentsOneResponseToJSON(
  issueTrackingCollectionTicketCommentsOneResponse:
    IssueTrackingCollectionTicketCommentsOneResponse,
): string {
  return JSON.stringify(
    IssueTrackingCollectionTicketCommentsOneResponse$outboundSchema.parse(
      issueTrackingCollectionTicketCommentsOneResponse,
    ),
  );
}

export function issueTrackingCollectionTicketCommentsOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  IssueTrackingCollectionTicketCommentsOneResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IssueTrackingCollectionTicketCommentsOneResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IssueTrackingCollectionTicketCommentsOneResponse' from JSON`,
  );
}
