/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingProjectsAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingProjectsAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  project: components.ProjectInput;
};

export type AccountingProjectsAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Projects
   */
  createProjectResponse?: components.CreateProjectResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingProjectsAddGlobals$inboundSchema: z.ZodType<
  AccountingProjectsAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingProjectsAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingProjectsAddGlobals$outboundSchema: z.ZodType<
  AccountingProjectsAddGlobals$Outbound,
  z.ZodTypeDef,
  AccountingProjectsAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsAddGlobals$ {
  /** @deprecated use `AccountingProjectsAddGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsAddGlobals$inboundSchema;
  /** @deprecated use `AccountingProjectsAddGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsAddGlobals$outboundSchema;
  /** @deprecated use `AccountingProjectsAddGlobals$Outbound` instead. */
  export type Outbound = AccountingProjectsAddGlobals$Outbound;
}

export function accountingProjectsAddGlobalsToJSON(
  accountingProjectsAddGlobals: AccountingProjectsAddGlobals,
): string {
  return JSON.stringify(
    AccountingProjectsAddGlobals$outboundSchema.parse(
      accountingProjectsAddGlobals,
    ),
  );
}

export function accountingProjectsAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsAddGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsAddRequest$inboundSchema: z.ZodType<
  AccountingProjectsAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  Project: components.ProjectInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Project": "project",
  });
});

/** @internal */
export type AccountingProjectsAddRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  Project: components.ProjectInput$Outbound;
};

/** @internal */
export const AccountingProjectsAddRequest$outboundSchema: z.ZodType<
  AccountingProjectsAddRequest$Outbound,
  z.ZodTypeDef,
  AccountingProjectsAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  project: components.ProjectInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    project: "Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsAddRequest$ {
  /** @deprecated use `AccountingProjectsAddRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsAddRequest$inboundSchema;
  /** @deprecated use `AccountingProjectsAddRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsAddRequest$outboundSchema;
  /** @deprecated use `AccountingProjectsAddRequest$Outbound` instead. */
  export type Outbound = AccountingProjectsAddRequest$Outbound;
}

export function accountingProjectsAddRequestToJSON(
  accountingProjectsAddRequest: AccountingProjectsAddRequest,
): string {
  return JSON.stringify(
    AccountingProjectsAddRequest$outboundSchema.parse(
      accountingProjectsAddRequest,
    ),
  );
}

export function accountingProjectsAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsAddRequest' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsAddResponse$inboundSchema: z.ZodType<
  AccountingProjectsAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreateProjectResponse: components.CreateProjectResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreateProjectResponse": "createProjectResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingProjectsAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreateProjectResponse?: components.CreateProjectResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingProjectsAddResponse$outboundSchema: z.ZodType<
  AccountingProjectsAddResponse$Outbound,
  z.ZodTypeDef,
  AccountingProjectsAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createProjectResponse: components.CreateProjectResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createProjectResponse: "CreateProjectResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsAddResponse$ {
  /** @deprecated use `AccountingProjectsAddResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsAddResponse$inboundSchema;
  /** @deprecated use `AccountingProjectsAddResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsAddResponse$outboundSchema;
  /** @deprecated use `AccountingProjectsAddResponse$Outbound` instead. */
  export type Outbound = AccountingProjectsAddResponse$Outbound;
}

export function accountingProjectsAddResponseToJSON(
  accountingProjectsAddResponse: AccountingProjectsAddResponse,
): string {
  return JSON.stringify(
    AccountingProjectsAddResponse$outboundSchema.parse(
      accountingProjectsAddResponse,
    ),
  );
}

export function accountingProjectsAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsAddResponse' from JSON`,
  );
}
