/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type AccountingSubsidiariesDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingSubsidiariesDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingSubsidiariesDeleteResponse =
  | components.DeleteSubsidiaryResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingSubsidiariesDeleteGlobals$inboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingSubsidiariesDeleteGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingSubsidiariesDeleteGlobals$outboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteGlobals$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesDeleteGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesDeleteGlobals$ {
  /** @deprecated use `AccountingSubsidiariesDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesDeleteGlobals$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesDeleteGlobals$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteGlobals$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesDeleteGlobals$Outbound;
}

/** @internal */
export const AccountingSubsidiariesDeleteRequest$inboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingSubsidiariesDeleteRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingSubsidiariesDeleteRequest$outboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteRequest$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesDeleteRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesDeleteRequest$ {
  /** @deprecated use `AccountingSubsidiariesDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesDeleteRequest$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesDeleteRequest$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteRequest$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesDeleteRequest$Outbound;
}

/** @internal */
export const AccountingSubsidiariesDeleteResponse$inboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DeleteSubsidiaryResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingSubsidiariesDeleteResponse$Outbound =
  | components.DeleteSubsidiaryResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingSubsidiariesDeleteResponse$outboundSchema: z.ZodType<
  AccountingSubsidiariesDeleteResponse$Outbound,
  z.ZodTypeDef,
  AccountingSubsidiariesDeleteResponse
> = z.union([
  components.DeleteSubsidiaryResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingSubsidiariesDeleteResponse$ {
  /** @deprecated use `AccountingSubsidiariesDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingSubsidiariesDeleteResponse$inboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingSubsidiariesDeleteResponse$outboundSchema;
  /** @deprecated use `AccountingSubsidiariesDeleteResponse$Outbound` instead. */
  export type Outbound = AccountingSubsidiariesDeleteResponse$Outbound;
}
