/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingAttachmentsDownloadGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingAttachmentsDownloadRequest = {
  /**
   * The reference type of the document.
   */
  referenceType: components.AttachmentReferenceType;
  /**
   * The reference id of the object to retrieve.
   */
  referenceId: string;
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingAttachmentsDownloadResponse =
  | components.UnexpectedErrorResponse
  | ReadableStream<Uint8Array>;

/** @internal */
export const AccountingAttachmentsDownloadGlobals$inboundSchema: z.ZodType<
  AccountingAttachmentsDownloadGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingAttachmentsDownloadGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingAttachmentsDownloadGlobals$outboundSchema: z.ZodType<
  AccountingAttachmentsDownloadGlobals$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsDownloadGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsDownloadGlobals$ {
  /** @deprecated use `AccountingAttachmentsDownloadGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingAttachmentsDownloadGlobals$inboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsDownloadGlobals$outboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadGlobals$Outbound` instead. */
  export type Outbound = AccountingAttachmentsDownloadGlobals$Outbound;
}

/** @internal */
export const AccountingAttachmentsDownloadRequest$inboundSchema: z.ZodType<
  AccountingAttachmentsDownloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference_type: components.AttachmentReferenceType$inboundSchema,
  reference_id: z.string(),
  id: z.string(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reference_type": "referenceType",
    "reference_id": "referenceId",
  });
});

/** @internal */
export type AccountingAttachmentsDownloadRequest$Outbound = {
  reference_type: string;
  reference_id: string;
  id: string;
  serviceId?: string | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingAttachmentsDownloadRequest$outboundSchema: z.ZodType<
  AccountingAttachmentsDownloadRequest$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsDownloadRequest
> = z.object({
  referenceType: components.AttachmentReferenceType$outboundSchema,
  referenceId: z.string(),
  id: z.string(),
  serviceId: z.string().optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    referenceType: "reference_type",
    referenceId: "reference_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsDownloadRequest$ {
  /** @deprecated use `AccountingAttachmentsDownloadRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingAttachmentsDownloadRequest$inboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsDownloadRequest$outboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadRequest$Outbound` instead. */
  export type Outbound = AccountingAttachmentsDownloadRequest$Outbound;
}

/** @internal */
export const AccountingAttachmentsDownloadResponse$inboundSchema: z.ZodType<
  AccountingAttachmentsDownloadResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UnexpectedErrorResponse$inboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type AccountingAttachmentsDownloadResponse$Outbound =
  | components.UnexpectedErrorResponse$Outbound
  | ReadableStream<Uint8Array>;

/** @internal */
export const AccountingAttachmentsDownloadResponse$outboundSchema: z.ZodType<
  AccountingAttachmentsDownloadResponse$Outbound,
  z.ZodTypeDef,
  AccountingAttachmentsDownloadResponse
> = z.union([
  components.UnexpectedErrorResponse$outboundSchema,
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingAttachmentsDownloadResponse$ {
  /** @deprecated use `AccountingAttachmentsDownloadResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingAttachmentsDownloadResponse$inboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingAttachmentsDownloadResponse$outboundSchema;
  /** @deprecated use `AccountingAttachmentsDownloadResponse$Outbound` instead. */
  export type Outbound = AccountingAttachmentsDownloadResponse$Outbound;
}
