/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmPipelinesAddGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmPipelinesAddRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  pipeline: components.PipelineInput;
};

export type CrmPipelinesAddResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Pipeline created
   */
  createPipelineResponse?: components.CreatePipelineResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmPipelinesAddGlobals$inboundSchema: z.ZodType<
  CrmPipelinesAddGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmPipelinesAddGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmPipelinesAddGlobals$outboundSchema: z.ZodType<
  CrmPipelinesAddGlobals$Outbound,
  z.ZodTypeDef,
  CrmPipelinesAddGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmPipelinesAddGlobals$ {
  /** @deprecated use `CrmPipelinesAddGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmPipelinesAddGlobals$inboundSchema;
  /** @deprecated use `CrmPipelinesAddGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmPipelinesAddGlobals$outboundSchema;
  /** @deprecated use `CrmPipelinesAddGlobals$Outbound` instead. */
  export type Outbound = CrmPipelinesAddGlobals$Outbound;
}

export function crmPipelinesAddGlobalsToJSON(
  crmPipelinesAddGlobals: CrmPipelinesAddGlobals,
): string {
  return JSON.stringify(
    CrmPipelinesAddGlobals$outboundSchema.parse(crmPipelinesAddGlobals),
  );
}

export function crmPipelinesAddGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmPipelinesAddGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmPipelinesAddGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmPipelinesAddGlobals' from JSON`,
  );
}

/** @internal */
export const CrmPipelinesAddRequest$inboundSchema: z.ZodType<
  CrmPipelinesAddRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  Pipeline: components.PipelineInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Pipeline": "pipeline",
  });
});

/** @internal */
export type CrmPipelinesAddRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  Pipeline: components.PipelineInput$Outbound;
};

/** @internal */
export const CrmPipelinesAddRequest$outboundSchema: z.ZodType<
  CrmPipelinesAddRequest$Outbound,
  z.ZodTypeDef,
  CrmPipelinesAddRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  pipeline: components.PipelineInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    pipeline: "Pipeline",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmPipelinesAddRequest$ {
  /** @deprecated use `CrmPipelinesAddRequest$inboundSchema` instead. */
  export const inboundSchema = CrmPipelinesAddRequest$inboundSchema;
  /** @deprecated use `CrmPipelinesAddRequest$outboundSchema` instead. */
  export const outboundSchema = CrmPipelinesAddRequest$outboundSchema;
  /** @deprecated use `CrmPipelinesAddRequest$Outbound` instead. */
  export type Outbound = CrmPipelinesAddRequest$Outbound;
}

export function crmPipelinesAddRequestToJSON(
  crmPipelinesAddRequest: CrmPipelinesAddRequest,
): string {
  return JSON.stringify(
    CrmPipelinesAddRequest$outboundSchema.parse(crmPipelinesAddRequest),
  );
}

export function crmPipelinesAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmPipelinesAddRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmPipelinesAddRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmPipelinesAddRequest' from JSON`,
  );
}

/** @internal */
export const CrmPipelinesAddResponse$inboundSchema: z.ZodType<
  CrmPipelinesAddResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  CreatePipelineResponse: components.CreatePipelineResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "CreatePipelineResponse": "createPipelineResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmPipelinesAddResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  CreatePipelineResponse?:
    | components.CreatePipelineResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmPipelinesAddResponse$outboundSchema: z.ZodType<
  CrmPipelinesAddResponse$Outbound,
  z.ZodTypeDef,
  CrmPipelinesAddResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  createPipelineResponse: components.CreatePipelineResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    createPipelineResponse: "CreatePipelineResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmPipelinesAddResponse$ {
  /** @deprecated use `CrmPipelinesAddResponse$inboundSchema` instead. */
  export const inboundSchema = CrmPipelinesAddResponse$inboundSchema;
  /** @deprecated use `CrmPipelinesAddResponse$outboundSchema` instead. */
  export const outboundSchema = CrmPipelinesAddResponse$outboundSchema;
  /** @deprecated use `CrmPipelinesAddResponse$Outbound` instead. */
  export type Outbound = CrmPipelinesAddResponse$Outbound;
}

export function crmPipelinesAddResponseToJSON(
  crmPipelinesAddResponse: CrmPipelinesAddResponse,
): string {
  return JSON.stringify(
    CrmPipelinesAddResponse$outboundSchema.parse(crmPipelinesAddResponse),
  );
}

export function crmPipelinesAddResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmPipelinesAddResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmPipelinesAddResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmPipelinesAddResponse' from JSON`,
  );
}
