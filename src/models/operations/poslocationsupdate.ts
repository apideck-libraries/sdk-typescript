/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosLocationsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosLocationsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  location: components.LocationInput;
};

export type PosLocationsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Locations
   */
  updateLocationResponse?: components.UpdateLocationResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosLocationsUpdateGlobals$inboundSchema: z.ZodType<
  PosLocationsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosLocationsUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosLocationsUpdateGlobals$outboundSchema: z.ZodType<
  PosLocationsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  PosLocationsUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsUpdateGlobals$ {
  /** @deprecated use `PosLocationsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = PosLocationsUpdateGlobals$inboundSchema;
  /** @deprecated use `PosLocationsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = PosLocationsUpdateGlobals$outboundSchema;
  /** @deprecated use `PosLocationsUpdateGlobals$Outbound` instead. */
  export type Outbound = PosLocationsUpdateGlobals$Outbound;
}

/** @internal */
export const PosLocationsUpdateRequest$inboundSchema: z.ZodType<
  PosLocationsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Location: components.LocationInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Location": "location",
  });
});

/** @internal */
export type PosLocationsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  Location: components.LocationInput$Outbound;
};

/** @internal */
export const PosLocationsUpdateRequest$outboundSchema: z.ZodType<
  PosLocationsUpdateRequest$Outbound,
  z.ZodTypeDef,
  PosLocationsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  location: components.LocationInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    location: "Location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsUpdateRequest$ {
  /** @deprecated use `PosLocationsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = PosLocationsUpdateRequest$inboundSchema;
  /** @deprecated use `PosLocationsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = PosLocationsUpdateRequest$outboundSchema;
  /** @deprecated use `PosLocationsUpdateRequest$Outbound` instead. */
  export type Outbound = PosLocationsUpdateRequest$Outbound;
}

/** @internal */
export const PosLocationsUpdateResponse$inboundSchema: z.ZodType<
  PosLocationsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateLocationResponse: components.UpdateLocationResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateLocationResponse": "updateLocationResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosLocationsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateLocationResponse?:
    | components.UpdateLocationResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosLocationsUpdateResponse$outboundSchema: z.ZodType<
  PosLocationsUpdateResponse$Outbound,
  z.ZodTypeDef,
  PosLocationsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateLocationResponse: components.UpdateLocationResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateLocationResponse: "UpdateLocationResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsUpdateResponse$ {
  /** @deprecated use `PosLocationsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = PosLocationsUpdateResponse$inboundSchema;
  /** @deprecated use `PosLocationsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = PosLocationsUpdateResponse$outboundSchema;
  /** @deprecated use `PosLocationsUpdateResponse$Outbound` instead. */
  export type Outbound = PosLocationsUpdateResponse$Outbound;
}
