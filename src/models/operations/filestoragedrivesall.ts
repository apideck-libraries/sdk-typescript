/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type FileStorageDrivesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type FileStorageDrivesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Apply filters
   */
  filter?: components.DrivesFilter | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type FileStorageDrivesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Drives
   */
  getDrivesResponse?: components.GetDrivesResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const FileStorageDrivesAllGlobals$inboundSchema: z.ZodType<
  FileStorageDrivesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type FileStorageDrivesAllGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const FileStorageDrivesAllGlobals$outboundSchema: z.ZodType<
  FileStorageDrivesAllGlobals$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesAllGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesAllGlobals$ {
  /** @deprecated use `FileStorageDrivesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesAllGlobals$inboundSchema;
  /** @deprecated use `FileStorageDrivesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesAllGlobals$outboundSchema;
  /** @deprecated use `FileStorageDrivesAllGlobals$Outbound` instead. */
  export type Outbound = FileStorageDrivesAllGlobals$Outbound;
}

/** @internal */
export const FileStorageDrivesAllRequest$inboundSchema: z.ZodType<
  FileStorageDrivesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.DrivesFilter$inboundSchema.optional(),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type FileStorageDrivesAllRequest$Outbound = {
  raw: boolean;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  filter?: components.DrivesFilter$Outbound | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const FileStorageDrivesAllRequest$outboundSchema: z.ZodType<
  FileStorageDrivesAllRequest$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  filter: components.DrivesFilter$outboundSchema.optional(),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesAllRequest$ {
  /** @deprecated use `FileStorageDrivesAllRequest$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesAllRequest$inboundSchema;
  /** @deprecated use `FileStorageDrivesAllRequest$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesAllRequest$outboundSchema;
  /** @deprecated use `FileStorageDrivesAllRequest$Outbound` instead. */
  export type Outbound = FileStorageDrivesAllRequest$Outbound;
}

/** @internal */
export const FileStorageDrivesAllResponse$inboundSchema: z.ZodType<
  FileStorageDrivesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetDrivesResponse: components.GetDrivesResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetDrivesResponse": "getDrivesResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type FileStorageDrivesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetDrivesResponse?: components.GetDrivesResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const FileStorageDrivesAllResponse$outboundSchema: z.ZodType<
  FileStorageDrivesAllResponse$Outbound,
  z.ZodTypeDef,
  FileStorageDrivesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getDrivesResponse: components.GetDrivesResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getDrivesResponse: "GetDrivesResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileStorageDrivesAllResponse$ {
  /** @deprecated use `FileStorageDrivesAllResponse$inboundSchema` instead. */
  export const inboundSchema = FileStorageDrivesAllResponse$inboundSchema;
  /** @deprecated use `FileStorageDrivesAllResponse$outboundSchema` instead. */
  export const outboundSchema = FileStorageDrivesAllResponse$outboundSchema;
  /** @deprecated use `FileStorageDrivesAllResponse$Outbound` instead. */
  export type Outbound = FileStorageDrivesAllResponse$Outbound;
}
