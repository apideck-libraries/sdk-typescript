/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type AccountingExpensesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingExpensesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingExpensesOneResponse =
  | components.GetExpenseResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingExpensesOneGlobals$inboundSchema: z.ZodType<
  AccountingExpensesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingExpensesOneGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingExpensesOneGlobals$outboundSchema: z.ZodType<
  AccountingExpensesOneGlobals$Outbound,
  z.ZodTypeDef,
  AccountingExpensesOneGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingExpensesOneGlobals$ {
  /** @deprecated use `AccountingExpensesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingExpensesOneGlobals$inboundSchema;
  /** @deprecated use `AccountingExpensesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingExpensesOneGlobals$outboundSchema;
  /** @deprecated use `AccountingExpensesOneGlobals$Outbound` instead. */
  export type Outbound = AccountingExpensesOneGlobals$Outbound;
}

/** @internal */
export const AccountingExpensesOneRequest$inboundSchema: z.ZodType<
  AccountingExpensesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingExpensesOneRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingExpensesOneRequest$outboundSchema: z.ZodType<
  AccountingExpensesOneRequest$Outbound,
  z.ZodTypeDef,
  AccountingExpensesOneRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingExpensesOneRequest$ {
  /** @deprecated use `AccountingExpensesOneRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingExpensesOneRequest$inboundSchema;
  /** @deprecated use `AccountingExpensesOneRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingExpensesOneRequest$outboundSchema;
  /** @deprecated use `AccountingExpensesOneRequest$Outbound` instead. */
  export type Outbound = AccountingExpensesOneRequest$Outbound;
}

/** @internal */
export const AccountingExpensesOneResponse$inboundSchema: z.ZodType<
  AccountingExpensesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.GetExpenseResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingExpensesOneResponse$Outbound =
  | components.GetExpenseResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingExpensesOneResponse$outboundSchema: z.ZodType<
  AccountingExpensesOneResponse$Outbound,
  z.ZodTypeDef,
  AccountingExpensesOneResponse
> = z.union([
  components.GetExpenseResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingExpensesOneResponse$ {
  /** @deprecated use `AccountingExpensesOneResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingExpensesOneResponse$inboundSchema;
  /** @deprecated use `AccountingExpensesOneResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingExpensesOneResponse$outboundSchema;
  /** @deprecated use `AccountingExpensesOneResponse$Outbound` instead. */
  export type Outbound = AccountingExpensesOneResponse$Outbound;
}
