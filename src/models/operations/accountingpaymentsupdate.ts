/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingPaymentsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingPaymentsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  payment: components.PaymentInput;
};

export type AccountingPaymentsUpdateResponse =
  | components.UpdatePaymentResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingPaymentsUpdateGlobals$inboundSchema: z.ZodType<
  AccountingPaymentsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingPaymentsUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingPaymentsUpdateGlobals$outboundSchema: z.ZodType<
  AccountingPaymentsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsUpdateGlobals$ {
  /** @deprecated use `AccountingPaymentsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingPaymentsUpdateGlobals$Outbound;
}

/** @internal */
export const AccountingPaymentsUpdateRequest$inboundSchema: z.ZodType<
  AccountingPaymentsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Payment: components.PaymentInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Payment": "payment",
  });
});

/** @internal */
export type AccountingPaymentsUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  Payment: components.PaymentInput$Outbound;
};

/** @internal */
export const AccountingPaymentsUpdateRequest$outboundSchema: z.ZodType<
  AccountingPaymentsUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  payment: components.PaymentInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    payment: "Payment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsUpdateRequest$ {
  /** @deprecated use `AccountingPaymentsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingPaymentsUpdateRequest$Outbound;
}

/** @internal */
export const AccountingPaymentsUpdateResponse$inboundSchema: z.ZodType<
  AccountingPaymentsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UpdatePaymentResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingPaymentsUpdateResponse$Outbound =
  | components.UpdatePaymentResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingPaymentsUpdateResponse$outboundSchema: z.ZodType<
  AccountingPaymentsUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingPaymentsUpdateResponse
> = z.union([
  components.UpdatePaymentResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingPaymentsUpdateResponse$ {
  /** @deprecated use `AccountingPaymentsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingPaymentsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingPaymentsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingPaymentsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingPaymentsUpdateResponse$Outbound;
}
