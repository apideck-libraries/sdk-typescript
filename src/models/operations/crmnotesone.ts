/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmNotesOneGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmNotesOneRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type CrmNotesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Note
   */
  getNoteResponse?: components.GetNoteResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmNotesOneGlobals$inboundSchema: z.ZodType<
  CrmNotesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmNotesOneGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmNotesOneGlobals$outboundSchema: z.ZodType<
  CrmNotesOneGlobals$Outbound,
  z.ZodTypeDef,
  CrmNotesOneGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesOneGlobals$ {
  /** @deprecated use `CrmNotesOneGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmNotesOneGlobals$inboundSchema;
  /** @deprecated use `CrmNotesOneGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmNotesOneGlobals$outboundSchema;
  /** @deprecated use `CrmNotesOneGlobals$Outbound` instead. */
  export type Outbound = CrmNotesOneGlobals$Outbound;
}

export function crmNotesOneGlobalsToJSON(
  crmNotesOneGlobals: CrmNotesOneGlobals,
): string {
  return JSON.stringify(
    CrmNotesOneGlobals$outboundSchema.parse(crmNotesOneGlobals),
  );
}

export function crmNotesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesOneGlobals' from JSON`,
  );
}

/** @internal */
export const CrmNotesOneRequest$inboundSchema: z.ZodType<
  CrmNotesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/** @internal */
export type CrmNotesOneRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmNotesOneRequest$outboundSchema: z.ZodType<
  CrmNotesOneRequest$Outbound,
  z.ZodTypeDef,
  CrmNotesOneRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  fields: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesOneRequest$ {
  /** @deprecated use `CrmNotesOneRequest$inboundSchema` instead. */
  export const inboundSchema = CrmNotesOneRequest$inboundSchema;
  /** @deprecated use `CrmNotesOneRequest$outboundSchema` instead. */
  export const outboundSchema = CrmNotesOneRequest$outboundSchema;
  /** @deprecated use `CrmNotesOneRequest$Outbound` instead. */
  export type Outbound = CrmNotesOneRequest$Outbound;
}

export function crmNotesOneRequestToJSON(
  crmNotesOneRequest: CrmNotesOneRequest,
): string {
  return JSON.stringify(
    CrmNotesOneRequest$outboundSchema.parse(crmNotesOneRequest),
  );
}

export function crmNotesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesOneRequest' from JSON`,
  );
}

/** @internal */
export const CrmNotesOneResponse$inboundSchema: z.ZodType<
  CrmNotesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetNoteResponse: components.GetNoteResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetNoteResponse": "getNoteResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmNotesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetNoteResponse?: components.GetNoteResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmNotesOneResponse$outboundSchema: z.ZodType<
  CrmNotesOneResponse$Outbound,
  z.ZodTypeDef,
  CrmNotesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getNoteResponse: components.GetNoteResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getNoteResponse: "GetNoteResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesOneResponse$ {
  /** @deprecated use `CrmNotesOneResponse$inboundSchema` instead. */
  export const inboundSchema = CrmNotesOneResponse$inboundSchema;
  /** @deprecated use `CrmNotesOneResponse$outboundSchema` instead. */
  export const outboundSchema = CrmNotesOneResponse$outboundSchema;
  /** @deprecated use `CrmNotesOneResponse$Outbound` instead. */
  export type Outbound = CrmNotesOneResponse$Outbound;
}

export function crmNotesOneResponseToJSON(
  crmNotesOneResponse: CrmNotesOneResponse,
): string {
  return JSON.stringify(
    CrmNotesOneResponse$outboundSchema.parse(crmNotesOneResponse),
  );
}

export function crmNotesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesOneResponse' from JSON`,
  );
}
