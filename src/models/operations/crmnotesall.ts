/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrmNotesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type CrmNotesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type CrmNotesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Notes
   */
  getNotesResponse?: components.GetNotesResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const CrmNotesAllGlobals$inboundSchema: z.ZodType<
  CrmNotesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type CrmNotesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const CrmNotesAllGlobals$outboundSchema: z.ZodType<
  CrmNotesAllGlobals$Outbound,
  z.ZodTypeDef,
  CrmNotesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesAllGlobals$ {
  /** @deprecated use `CrmNotesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = CrmNotesAllGlobals$inboundSchema;
  /** @deprecated use `CrmNotesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = CrmNotesAllGlobals$outboundSchema;
  /** @deprecated use `CrmNotesAllGlobals$Outbound` instead. */
  export type Outbound = CrmNotesAllGlobals$Outbound;
}

export function crmNotesAllGlobalsToJSON(
  crmNotesAllGlobals: CrmNotesAllGlobals,
): string {
  return JSON.stringify(
    CrmNotesAllGlobals$outboundSchema.parse(crmNotesAllGlobals),
  );
}

export function crmNotesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesAllGlobals' from JSON`,
  );
}

/** @internal */
export const CrmNotesAllRequest$inboundSchema: z.ZodType<
  CrmNotesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type CrmNotesAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const CrmNotesAllRequest$outboundSchema: z.ZodType<
  CrmNotesAllRequest$Outbound,
  z.ZodTypeDef,
  CrmNotesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesAllRequest$ {
  /** @deprecated use `CrmNotesAllRequest$inboundSchema` instead. */
  export const inboundSchema = CrmNotesAllRequest$inboundSchema;
  /** @deprecated use `CrmNotesAllRequest$outboundSchema` instead. */
  export const outboundSchema = CrmNotesAllRequest$outboundSchema;
  /** @deprecated use `CrmNotesAllRequest$Outbound` instead. */
  export type Outbound = CrmNotesAllRequest$Outbound;
}

export function crmNotesAllRequestToJSON(
  crmNotesAllRequest: CrmNotesAllRequest,
): string {
  return JSON.stringify(
    CrmNotesAllRequest$outboundSchema.parse(crmNotesAllRequest),
  );
}

export function crmNotesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesAllRequest' from JSON`,
  );
}

/** @internal */
export const CrmNotesAllResponse$inboundSchema: z.ZodType<
  CrmNotesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetNotesResponse: components.GetNotesResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetNotesResponse": "getNotesResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type CrmNotesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetNotesResponse?: components.GetNotesResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const CrmNotesAllResponse$outboundSchema: z.ZodType<
  CrmNotesAllResponse$Outbound,
  z.ZodTypeDef,
  CrmNotesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getNotesResponse: components.GetNotesResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getNotesResponse: "GetNotesResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrmNotesAllResponse$ {
  /** @deprecated use `CrmNotesAllResponse$inboundSchema` instead. */
  export const inboundSchema = CrmNotesAllResponse$inboundSchema;
  /** @deprecated use `CrmNotesAllResponse$outboundSchema` instead. */
  export const outboundSchema = CrmNotesAllResponse$outboundSchema;
  /** @deprecated use `CrmNotesAllResponse$Outbound` instead. */
  export type Outbound = CrmNotesAllResponse$Outbound;
}

export function crmNotesAllResponseToJSON(
  crmNotesAllResponse: CrmNotesAllResponse,
): string {
  return JSON.stringify(
    CrmNotesAllResponse$outboundSchema.parse(crmNotesAllResponse),
  );
}

export function crmNotesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<CrmNotesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrmNotesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrmNotesAllResponse' from JSON`,
  );
}
