/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingQuotesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingQuotesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
};

export type AccountingQuotesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Quotes
   */
  getQuotesResponse?: components.GetQuotesResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingQuotesAllGlobals$inboundSchema: z.ZodType<
  AccountingQuotesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingQuotesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingQuotesAllGlobals$outboundSchema: z.ZodType<
  AccountingQuotesAllGlobals$Outbound,
  z.ZodTypeDef,
  AccountingQuotesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesAllGlobals$ {
  /** @deprecated use `AccountingQuotesAllGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesAllGlobals$inboundSchema;
  /** @deprecated use `AccountingQuotesAllGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesAllGlobals$outboundSchema;
  /** @deprecated use `AccountingQuotesAllGlobals$Outbound` instead. */
  export type Outbound = AccountingQuotesAllGlobals$Outbound;
}

export function accountingQuotesAllGlobalsToJSON(
  accountingQuotesAllGlobals: AccountingQuotesAllGlobals,
): string {
  return JSON.stringify(
    AccountingQuotesAllGlobals$outboundSchema.parse(accountingQuotesAllGlobals),
  );
}

export function accountingQuotesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesAllGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingQuotesAllRequest$inboundSchema: z.ZodType<
  AccountingQuotesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/** @internal */
export type AccountingQuotesAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
};

/** @internal */
export const AccountingQuotesAllRequest$outboundSchema: z.ZodType<
  AccountingQuotesAllRequest$Outbound,
  z.ZodTypeDef,
  AccountingQuotesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesAllRequest$ {
  /** @deprecated use `AccountingQuotesAllRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesAllRequest$inboundSchema;
  /** @deprecated use `AccountingQuotesAllRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesAllRequest$outboundSchema;
  /** @deprecated use `AccountingQuotesAllRequest$Outbound` instead. */
  export type Outbound = AccountingQuotesAllRequest$Outbound;
}

export function accountingQuotesAllRequestToJSON(
  accountingQuotesAllRequest: AccountingQuotesAllRequest,
): string {
  return JSON.stringify(
    AccountingQuotesAllRequest$outboundSchema.parse(accountingQuotesAllRequest),
  );
}

export function accountingQuotesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesAllRequest' from JSON`,
  );
}

/** @internal */
export const AccountingQuotesAllResponse$inboundSchema: z.ZodType<
  AccountingQuotesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetQuotesResponse: components.GetQuotesResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetQuotesResponse": "getQuotesResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingQuotesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetQuotesResponse?: components.GetQuotesResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingQuotesAllResponse$outboundSchema: z.ZodType<
  AccountingQuotesAllResponse$Outbound,
  z.ZodTypeDef,
  AccountingQuotesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getQuotesResponse: components.GetQuotesResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getQuotesResponse: "GetQuotesResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingQuotesAllResponse$ {
  /** @deprecated use `AccountingQuotesAllResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingQuotesAllResponse$inboundSchema;
  /** @deprecated use `AccountingQuotesAllResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingQuotesAllResponse$outboundSchema;
  /** @deprecated use `AccountingQuotesAllResponse$Outbound` instead. */
  export type Outbound = AccountingQuotesAllResponse$Outbound;
}

export function accountingQuotesAllResponseToJSON(
  accountingQuotesAllResponse: AccountingQuotesAllResponse,
): string {
  return JSON.stringify(
    AccountingQuotesAllResponse$outboundSchema.parse(
      accountingQuotesAllResponse,
    ),
  );
}

export function accountingQuotesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingQuotesAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingQuotesAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingQuotesAllResponse' from JSON`,
  );
}
