/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type AccountingTaxRatesUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingTaxRatesUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  taxRate: components.TaxRateInput;
};

export type AccountingTaxRatesUpdateResponse =
  | components.UpdateTaxRateResponse
  | components.UnexpectedErrorResponse;

/** @internal */
export const AccountingTaxRatesUpdateGlobals$inboundSchema: z.ZodType<
  AccountingTaxRatesUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingTaxRatesUpdateGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingTaxRatesUpdateGlobals$outboundSchema: z.ZodType<
  AccountingTaxRatesUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingTaxRatesUpdateGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTaxRatesUpdateGlobals$ {
  /** @deprecated use `AccountingTaxRatesUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingTaxRatesUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingTaxRatesUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingTaxRatesUpdateGlobals$Outbound;
}

/** @internal */
export const AccountingTaxRatesUpdateRequest$inboundSchema: z.ZodType<
  AccountingTaxRatesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  TaxRate: components.TaxRateInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "TaxRate": "taxRate",
  });
});

/** @internal */
export type AccountingTaxRatesUpdateRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
  TaxRate: components.TaxRateInput$Outbound;
};

/** @internal */
export const AccountingTaxRatesUpdateRequest$outboundSchema: z.ZodType<
  AccountingTaxRatesUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingTaxRatesUpdateRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  taxRate: components.TaxRateInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    taxRate: "TaxRate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTaxRatesUpdateRequest$ {
  /** @deprecated use `AccountingTaxRatesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingTaxRatesUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingTaxRatesUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingTaxRatesUpdateRequest$Outbound;
}

/** @internal */
export const AccountingTaxRatesUpdateResponse$inboundSchema: z.ZodType<
  AccountingTaxRatesUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.UpdateTaxRateResponse$inboundSchema,
  components.UnexpectedErrorResponse$inboundSchema,
]);

/** @internal */
export type AccountingTaxRatesUpdateResponse$Outbound =
  | components.UpdateTaxRateResponse$Outbound
  | components.UnexpectedErrorResponse$Outbound;

/** @internal */
export const AccountingTaxRatesUpdateResponse$outboundSchema: z.ZodType<
  AccountingTaxRatesUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingTaxRatesUpdateResponse
> = z.union([
  components.UpdateTaxRateResponse$outboundSchema,
  components.UnexpectedErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTaxRatesUpdateResponse$ {
  /** @deprecated use `AccountingTaxRatesUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingTaxRatesUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingTaxRatesUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingTaxRatesUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingTaxRatesUpdateResponse$Outbound;
}
