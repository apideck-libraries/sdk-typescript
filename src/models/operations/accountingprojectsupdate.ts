/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingProjectsUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingProjectsUpdateRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  project: components.ProjectInput;
};

export type AccountingProjectsUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Projects
   */
  updateProjectResponse?: components.UpdateProjectResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingProjectsUpdateGlobals$inboundSchema: z.ZodType<
  AccountingProjectsUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingProjectsUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingProjectsUpdateGlobals$outboundSchema: z.ZodType<
  AccountingProjectsUpdateGlobals$Outbound,
  z.ZodTypeDef,
  AccountingProjectsUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsUpdateGlobals$ {
  /** @deprecated use `AccountingProjectsUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsUpdateGlobals$inboundSchema;
  /** @deprecated use `AccountingProjectsUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsUpdateGlobals$outboundSchema;
  /** @deprecated use `AccountingProjectsUpdateGlobals$Outbound` instead. */
  export type Outbound = AccountingProjectsUpdateGlobals$Outbound;
}

export function accountingProjectsUpdateGlobalsToJSON(
  accountingProjectsUpdateGlobals: AccountingProjectsUpdateGlobals,
): string {
  return JSON.stringify(
    AccountingProjectsUpdateGlobals$outboundSchema.parse(
      accountingProjectsUpdateGlobals,
    ),
  );
}

export function accountingProjectsUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsUpdateRequest$inboundSchema: z.ZodType<
  AccountingProjectsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  Project: components.ProjectInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Project": "project",
  });
});

/** @internal */
export type AccountingProjectsUpdateRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
  Project: components.ProjectInput$Outbound;
};

/** @internal */
export const AccountingProjectsUpdateRequest$outboundSchema: z.ZodType<
  AccountingProjectsUpdateRequest$Outbound,
  z.ZodTypeDef,
  AccountingProjectsUpdateRequest
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
  project: components.ProjectInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    project: "Project",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsUpdateRequest$ {
  /** @deprecated use `AccountingProjectsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsUpdateRequest$inboundSchema;
  /** @deprecated use `AccountingProjectsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsUpdateRequest$outboundSchema;
  /** @deprecated use `AccountingProjectsUpdateRequest$Outbound` instead. */
  export type Outbound = AccountingProjectsUpdateRequest$Outbound;
}

export function accountingProjectsUpdateRequestToJSON(
  accountingProjectsUpdateRequest: AccountingProjectsUpdateRequest,
): string {
  return JSON.stringify(
    AccountingProjectsUpdateRequest$outboundSchema.parse(
      accountingProjectsUpdateRequest,
    ),
  );
}

export function accountingProjectsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsUpdateRequest' from JSON`,
  );
}

/** @internal */
export const AccountingProjectsUpdateResponse$inboundSchema: z.ZodType<
  AccountingProjectsUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateProjectResponse: components.UpdateProjectResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateProjectResponse": "updateProjectResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingProjectsUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateProjectResponse?: components.UpdateProjectResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingProjectsUpdateResponse$outboundSchema: z.ZodType<
  AccountingProjectsUpdateResponse$Outbound,
  z.ZodTypeDef,
  AccountingProjectsUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateProjectResponse: components.UpdateProjectResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateProjectResponse: "UpdateProjectResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingProjectsUpdateResponse$ {
  /** @deprecated use `AccountingProjectsUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingProjectsUpdateResponse$inboundSchema;
  /** @deprecated use `AccountingProjectsUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingProjectsUpdateResponse$outboundSchema;
  /** @deprecated use `AccountingProjectsUpdateResponse$Outbound` instead. */
  export type Outbound = AccountingProjectsUpdateResponse$Outbound;
}

export function accountingProjectsUpdateResponseToJSON(
  accountingProjectsUpdateResponse: AccountingProjectsUpdateResponse,
): string {
  return JSON.stringify(
    AccountingProjectsUpdateResponse$outboundSchema.parse(
      accountingProjectsUpdateResponse,
    ),
  );
}

export function accountingProjectsUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingProjectsUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingProjectsUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingProjectsUpdateResponse' from JSON`,
  );
}
