/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingDepartmentsAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingDepartmentsAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
  /**
   * Apply filters
   */
  filter?: components.AccountingDepartmentsFilter | undefined;
};

export type AccountingDepartmentsAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Departments
   */
  getAccountingDepartmentsResponse?:
    | components.GetAccountingDepartmentsResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingDepartmentsAllGlobals$inboundSchema: z.ZodType<
  AccountingDepartmentsAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingDepartmentsAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingDepartmentsAllGlobals$outboundSchema: z.ZodType<
  AccountingDepartmentsAllGlobals$Outbound,
  z.ZodTypeDef,
  AccountingDepartmentsAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingDepartmentsAllGlobals$ {
  /** @deprecated use `AccountingDepartmentsAllGlobals$inboundSchema` instead. */
  export const inboundSchema = AccountingDepartmentsAllGlobals$inboundSchema;
  /** @deprecated use `AccountingDepartmentsAllGlobals$outboundSchema` instead. */
  export const outboundSchema = AccountingDepartmentsAllGlobals$outboundSchema;
  /** @deprecated use `AccountingDepartmentsAllGlobals$Outbound` instead. */
  export type Outbound = AccountingDepartmentsAllGlobals$Outbound;
}

export function accountingDepartmentsAllGlobalsToJSON(
  accountingDepartmentsAllGlobals: AccountingDepartmentsAllGlobals,
): string {
  return JSON.stringify(
    AccountingDepartmentsAllGlobals$outboundSchema.parse(
      accountingDepartmentsAllGlobals,
    ),
  );
}

export function accountingDepartmentsAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingDepartmentsAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingDepartmentsAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingDepartmentsAllGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingDepartmentsAllRequest$inboundSchema: z.ZodType<
  AccountingDepartmentsAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  fields: z.nullable(z.string()).optional(),
  filter: components.AccountingDepartmentsFilter$inboundSchema.optional(),
});

/** @internal */
export type AccountingDepartmentsAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  fields?: string | null | undefined;
  filter?: components.AccountingDepartmentsFilter$Outbound | undefined;
};

/** @internal */
export const AccountingDepartmentsAllRequest$outboundSchema: z.ZodType<
  AccountingDepartmentsAllRequest$Outbound,
  z.ZodTypeDef,
  AccountingDepartmentsAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  fields: z.nullable(z.string()).optional(),
  filter: components.AccountingDepartmentsFilter$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingDepartmentsAllRequest$ {
  /** @deprecated use `AccountingDepartmentsAllRequest$inboundSchema` instead. */
  export const inboundSchema = AccountingDepartmentsAllRequest$inboundSchema;
  /** @deprecated use `AccountingDepartmentsAllRequest$outboundSchema` instead. */
  export const outboundSchema = AccountingDepartmentsAllRequest$outboundSchema;
  /** @deprecated use `AccountingDepartmentsAllRequest$Outbound` instead. */
  export type Outbound = AccountingDepartmentsAllRequest$Outbound;
}

export function accountingDepartmentsAllRequestToJSON(
  accountingDepartmentsAllRequest: AccountingDepartmentsAllRequest,
): string {
  return JSON.stringify(
    AccountingDepartmentsAllRequest$outboundSchema.parse(
      accountingDepartmentsAllRequest,
    ),
  );
}

export function accountingDepartmentsAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingDepartmentsAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingDepartmentsAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingDepartmentsAllRequest' from JSON`,
  );
}

/** @internal */
export const AccountingDepartmentsAllResponse$inboundSchema: z.ZodType<
  AccountingDepartmentsAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetAccountingDepartmentsResponse: components
    .GetAccountingDepartmentsResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetAccountingDepartmentsResponse": "getAccountingDepartmentsResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingDepartmentsAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetAccountingDepartmentsResponse?:
    | components.GetAccountingDepartmentsResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingDepartmentsAllResponse$outboundSchema: z.ZodType<
  AccountingDepartmentsAllResponse$Outbound,
  z.ZodTypeDef,
  AccountingDepartmentsAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getAccountingDepartmentsResponse: components
    .GetAccountingDepartmentsResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getAccountingDepartmentsResponse: "GetAccountingDepartmentsResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingDepartmentsAllResponse$ {
  /** @deprecated use `AccountingDepartmentsAllResponse$inboundSchema` instead. */
  export const inboundSchema = AccountingDepartmentsAllResponse$inboundSchema;
  /** @deprecated use `AccountingDepartmentsAllResponse$outboundSchema` instead. */
  export const outboundSchema = AccountingDepartmentsAllResponse$outboundSchema;
  /** @deprecated use `AccountingDepartmentsAllResponse$Outbound` instead. */
  export type Outbound = AccountingDepartmentsAllResponse$Outbound;
}

export function accountingDepartmentsAllResponseToJSON(
  accountingDepartmentsAllResponse: AccountingDepartmentsAllResponse,
): string {
  return JSON.stringify(
    AccountingDepartmentsAllResponse$outboundSchema.parse(
      accountingDepartmentsAllResponse,
    ),
  );
}

export function accountingDepartmentsAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountingDepartmentsAllResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountingDepartmentsAllResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingDepartmentsAllResponse' from JSON`,
  );
}
