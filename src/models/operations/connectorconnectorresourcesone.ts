/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConnectorConnectorResourcesOneGlobals = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type ConnectorConnectorResourcesOneRequest = {
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the resource you are acting upon.
   */
  resourceId: string;
  /**
   * Specify unified API for the connector resource. This is useful when a resource appears in multiple APIs
   */
  unifiedApi?: components.UnifiedApiId | undefined;
};

export type ConnectorConnectorResourcesOneResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * ConnectorResources
   */
  getConnectorResourceResponse?:
    | components.GetConnectorResourceResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const ConnectorConnectorResourcesOneGlobals$inboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
});

/** @internal */
export type ConnectorConnectorResourcesOneGlobals$Outbound = {
  appId?: string | undefined;
};

/** @internal */
export const ConnectorConnectorResourcesOneGlobals$outboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneGlobals$Outbound,
  z.ZodTypeDef,
  ConnectorConnectorResourcesOneGlobals
> = z.object({
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorConnectorResourcesOneGlobals$ {
  /** @deprecated use `ConnectorConnectorResourcesOneGlobals$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorConnectorResourcesOneGlobals$inboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneGlobals$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorConnectorResourcesOneGlobals$outboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneGlobals$Outbound` instead. */
  export type Outbound = ConnectorConnectorResourcesOneGlobals$Outbound;
}

export function connectorConnectorResourcesOneGlobalsToJSON(
  connectorConnectorResourcesOneGlobals: ConnectorConnectorResourcesOneGlobals,
): string {
  return JSON.stringify(
    ConnectorConnectorResourcesOneGlobals$outboundSchema.parse(
      connectorConnectorResourcesOneGlobals,
    ),
  );
}

export function connectorConnectorResourcesOneGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorConnectorResourcesOneGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorConnectorResourcesOneGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorConnectorResourcesOneGlobals' from JSON`,
  );
}

/** @internal */
export const ConnectorConnectorResourcesOneRequest$inboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  appId: z.string().optional(),
  id: z.string(),
  resource_id: z.string(),
  unified_api: components.UnifiedApiId$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "resource_id": "resourceId",
    "unified_api": "unifiedApi",
  });
});

/** @internal */
export type ConnectorConnectorResourcesOneRequest$Outbound = {
  appId?: string | undefined;
  id: string;
  resource_id: string;
  unified_api?: string | undefined;
};

/** @internal */
export const ConnectorConnectorResourcesOneRequest$outboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneRequest$Outbound,
  z.ZodTypeDef,
  ConnectorConnectorResourcesOneRequest
> = z.object({
  appId: z.string().optional(),
  id: z.string(),
  resourceId: z.string(),
  unifiedApi: components.UnifiedApiId$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    resourceId: "resource_id",
    unifiedApi: "unified_api",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorConnectorResourcesOneRequest$ {
  /** @deprecated use `ConnectorConnectorResourcesOneRequest$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorConnectorResourcesOneRequest$inboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneRequest$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorConnectorResourcesOneRequest$outboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneRequest$Outbound` instead. */
  export type Outbound = ConnectorConnectorResourcesOneRequest$Outbound;
}

export function connectorConnectorResourcesOneRequestToJSON(
  connectorConnectorResourcesOneRequest: ConnectorConnectorResourcesOneRequest,
): string {
  return JSON.stringify(
    ConnectorConnectorResourcesOneRequest$outboundSchema.parse(
      connectorConnectorResourcesOneRequest,
    ),
  );
}

export function connectorConnectorResourcesOneRequestFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorConnectorResourcesOneRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorConnectorResourcesOneRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorConnectorResourcesOneRequest' from JSON`,
  );
}

/** @internal */
export const ConnectorConnectorResourcesOneResponse$inboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetConnectorResourceResponse: components
    .GetConnectorResourceResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetConnectorResourceResponse": "getConnectorResourceResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type ConnectorConnectorResourcesOneResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetConnectorResourceResponse?:
    | components.GetConnectorResourceResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const ConnectorConnectorResourcesOneResponse$outboundSchema: z.ZodType<
  ConnectorConnectorResourcesOneResponse$Outbound,
  z.ZodTypeDef,
  ConnectorConnectorResourcesOneResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getConnectorResourceResponse: components
    .GetConnectorResourceResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getConnectorResourceResponse: "GetConnectorResourceResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectorConnectorResourcesOneResponse$ {
  /** @deprecated use `ConnectorConnectorResourcesOneResponse$inboundSchema` instead. */
  export const inboundSchema =
    ConnectorConnectorResourcesOneResponse$inboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneResponse$outboundSchema` instead. */
  export const outboundSchema =
    ConnectorConnectorResourcesOneResponse$outboundSchema;
  /** @deprecated use `ConnectorConnectorResourcesOneResponse$Outbound` instead. */
  export type Outbound = ConnectorConnectorResourcesOneResponse$Outbound;
}

export function connectorConnectorResourcesOneResponseToJSON(
  connectorConnectorResourcesOneResponse:
    ConnectorConnectorResourcesOneResponse,
): string {
  return JSON.stringify(
    ConnectorConnectorResourcesOneResponse$outboundSchema.parse(
      connectorConnectorResourcesOneResponse,
    ),
  );
}

export function connectorConnectorResourcesOneResponseFromJSON(
  jsonString: string,
): SafeParseResult<ConnectorConnectorResourcesOneResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConnectorConnectorResourcesOneResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConnectorConnectorResourcesOneResponse' from JSON`,
  );
}
