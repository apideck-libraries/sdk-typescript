/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingTrackingCategoriesAllGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingTrackingCategoriesAllRequest = {
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
   */
  cursor?: string | null | undefined;
  /**
   * Number of results to return. Minimum 1, Maximum 200, Default 20
   */
  limit?: number | undefined;
  /**
   * Optional unmapped key/values that will be passed through to downstream as query parameters. Ie: ?pass_through[search]=leads becomes ?search=leads
   */
  passThrough?: { [k: string]: any } | undefined;
  /**
   * The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields "name", "email" and "addresses.city". If any other fields are available, they will be excluded.
   */
  fields?: string | null | undefined;
};

export type AccountingTrackingCategoriesAllResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Tracking categories
   */
  getTrackingCategoriesResponse?:
    | components.GetTrackingCategoriesResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingTrackingCategoriesAllGlobals$inboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingTrackingCategoriesAllGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingTrackingCategoriesAllGlobals$outboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllGlobals$Outbound,
  z.ZodTypeDef,
  AccountingTrackingCategoriesAllGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTrackingCategoriesAllGlobals$ {
  /** @deprecated use `AccountingTrackingCategoriesAllGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingTrackingCategoriesAllGlobals$inboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingTrackingCategoriesAllGlobals$outboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllGlobals$Outbound` instead. */
  export type Outbound = AccountingTrackingCategoriesAllGlobals$Outbound;
}

export function accountingTrackingCategoriesAllGlobalsToJSON(
  accountingTrackingCategoriesAllGlobals:
    AccountingTrackingCategoriesAllGlobals,
): string {
  return JSON.stringify(
    AccountingTrackingCategoriesAllGlobals$outboundSchema.parse(
      accountingTrackingCategoriesAllGlobals,
    ),
  );
}

export function accountingTrackingCategoriesAllGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTrackingCategoriesAllGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingTrackingCategoriesAllGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTrackingCategoriesAllGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingTrackingCategoriesAllRequest$inboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  pass_through: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "pass_through": "passThrough",
  });
});

/** @internal */
export type AccountingTrackingCategoriesAllRequest$Outbound = {
  raw: boolean;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  cursor?: string | null | undefined;
  limit: number;
  pass_through?: { [k: string]: any } | undefined;
  fields?: string | null | undefined;
};

/** @internal */
export const AccountingTrackingCategoriesAllRequest$outboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllRequest$Outbound,
  z.ZodTypeDef,
  AccountingTrackingCategoriesAllRequest
> = z.object({
  raw: z.boolean().default(false),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  cursor: z.nullable(z.string()).optional(),
  limit: z.number().int().default(20),
  passThrough: z.record(z.any()).optional(),
  fields: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    passThrough: "pass_through",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTrackingCategoriesAllRequest$ {
  /** @deprecated use `AccountingTrackingCategoriesAllRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingTrackingCategoriesAllRequest$inboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingTrackingCategoriesAllRequest$outboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllRequest$Outbound` instead. */
  export type Outbound = AccountingTrackingCategoriesAllRequest$Outbound;
}

export function accountingTrackingCategoriesAllRequestToJSON(
  accountingTrackingCategoriesAllRequest:
    AccountingTrackingCategoriesAllRequest,
): string {
  return JSON.stringify(
    AccountingTrackingCategoriesAllRequest$outboundSchema.parse(
      accountingTrackingCategoriesAllRequest,
    ),
  );
}

export function accountingTrackingCategoriesAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccountingTrackingCategoriesAllRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingTrackingCategoriesAllRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountingTrackingCategoriesAllRequest' from JSON`,
  );
}

/** @internal */
export const AccountingTrackingCategoriesAllResponse$inboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  GetTrackingCategoriesResponse: components
    .GetTrackingCategoriesResponse$inboundSchema.optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "GetTrackingCategoriesResponse": "getTrackingCategoriesResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type AccountingTrackingCategoriesAllResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  GetTrackingCategoriesResponse?:
    | components.GetTrackingCategoriesResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingTrackingCategoriesAllResponse$outboundSchema: z.ZodType<
  AccountingTrackingCategoriesAllResponse$Outbound,
  z.ZodTypeDef,
  AccountingTrackingCategoriesAllResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  getTrackingCategoriesResponse: components
    .GetTrackingCategoriesResponse$outboundSchema.optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    getTrackingCategoriesResponse: "GetTrackingCategoriesResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingTrackingCategoriesAllResponse$ {
  /** @deprecated use `AccountingTrackingCategoriesAllResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingTrackingCategoriesAllResponse$inboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingTrackingCategoriesAllResponse$outboundSchema;
  /** @deprecated use `AccountingTrackingCategoriesAllResponse$Outbound` instead. */
  export type Outbound = AccountingTrackingCategoriesAllResponse$Outbound;
}

export function accountingTrackingCategoriesAllResponseToJSON(
  accountingTrackingCategoriesAllResponse:
    AccountingTrackingCategoriesAllResponse,
): string {
  return JSON.stringify(
    AccountingTrackingCategoriesAllResponse$outboundSchema.parse(
      accountingTrackingCategoriesAllResponse,
    ),
  );
}

export function accountingTrackingCategoriesAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingTrackingCategoriesAllResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingTrackingCategoriesAllResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingTrackingCategoriesAllResponse' from JSON`,
  );
}
