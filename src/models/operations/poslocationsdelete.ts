/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type PosLocationsDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  customerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type PosLocationsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type PosLocationsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Locations
   */
  deleteLocationResponse?: components.DeleteLocationResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const PosLocationsDeleteGlobals$inboundSchema: z.ZodType<
  PosLocationsDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type PosLocationsDeleteGlobals$Outbound = {
  customerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const PosLocationsDeleteGlobals$outboundSchema: z.ZodType<
  PosLocationsDeleteGlobals$Outbound,
  z.ZodTypeDef,
  PosLocationsDeleteGlobals
> = z.object({
  customerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsDeleteGlobals$ {
  /** @deprecated use `PosLocationsDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = PosLocationsDeleteGlobals$inboundSchema;
  /** @deprecated use `PosLocationsDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = PosLocationsDeleteGlobals$outboundSchema;
  /** @deprecated use `PosLocationsDeleteGlobals$Outbound` instead. */
  export type Outbound = PosLocationsDeleteGlobals$Outbound;
}

/** @internal */
export const PosLocationsDeleteRequest$inboundSchema: z.ZodType<
  PosLocationsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type PosLocationsDeleteRequest$Outbound = {
  id: string;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const PosLocationsDeleteRequest$outboundSchema: z.ZodType<
  PosLocationsDeleteRequest$Outbound,
  z.ZodTypeDef,
  PosLocationsDeleteRequest
> = z.object({
  id: z.string(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsDeleteRequest$ {
  /** @deprecated use `PosLocationsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = PosLocationsDeleteRequest$inboundSchema;
  /** @deprecated use `PosLocationsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = PosLocationsDeleteRequest$outboundSchema;
  /** @deprecated use `PosLocationsDeleteRequest$Outbound` instead. */
  export type Outbound = PosLocationsDeleteRequest$Outbound;
}

/** @internal */
export const PosLocationsDeleteResponse$inboundSchema: z.ZodType<
  PosLocationsDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  DeleteLocationResponse: components.DeleteLocationResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "DeleteLocationResponse": "deleteLocationResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type PosLocationsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteLocationResponse?:
    | components.DeleteLocationResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const PosLocationsDeleteResponse$outboundSchema: z.ZodType<
  PosLocationsDeleteResponse$Outbound,
  z.ZodTypeDef,
  PosLocationsDeleteResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  deleteLocationResponse: components.DeleteLocationResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    deleteLocationResponse: "DeleteLocationResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PosLocationsDeleteResponse$ {
  /** @deprecated use `PosLocationsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = PosLocationsDeleteResponse$inboundSchema;
  /** @deprecated use `PosLocationsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = PosLocationsDeleteResponse$outboundSchema;
  /** @deprecated use `PosLocationsDeleteResponse$Outbound` instead. */
  export type Outbound = PosLocationsDeleteResponse$Outbound;
}
