/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccountingBankFeedStatementsDeleteGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type AccountingBankFeedStatementsDeleteRequest = {
  /**
   * ID of the record you are acting upon.
   */
  id: string;
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
   */
  serviceId?: string | undefined;
  /**
   * Include raw response. Mostly used for debugging purposes
   */
  raw?: boolean | undefined;
};

export type AccountingBankFeedStatementsDeleteResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Bank Feed Statements
   */
  deleteBankFeedStatementResponse?:
    | components.DeleteBankFeedStatementResponse
    | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsDeleteGlobals$inboundSchema: z.ZodType<
  AccountingBankFeedStatementsDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type AccountingBankFeedStatementsDeleteGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsDeleteGlobals$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsDeleteGlobals$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsDeleteGlobals
  > = z.object({
    consumerId: z.string().optional(),
    appId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsDeleteGlobals$ {
  /** @deprecated use `AccountingBankFeedStatementsDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsDeleteGlobals$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsDeleteGlobals$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteGlobals$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsDeleteGlobals$Outbound;
}

export function accountingBankFeedStatementsDeleteGlobalsToJSON(
  accountingBankFeedStatementsDeleteGlobals:
    AccountingBankFeedStatementsDeleteGlobals,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsDeleteGlobals$outboundSchema.parse(
      accountingBankFeedStatementsDeleteGlobals,
    ),
  );
}

export function accountingBankFeedStatementsDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsDeleteGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsDeleteGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedStatementsDeleteRequest$inboundSchema: z.ZodType<
  AccountingBankFeedStatementsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string().optional(),
  raw: z.boolean().default(false),
});

/** @internal */
export type AccountingBankFeedStatementsDeleteRequest$Outbound = {
  id: string;
  consumerId?: string | undefined;
  appId?: string | undefined;
  serviceId?: string | undefined;
  raw: boolean;
};

/** @internal */
export const AccountingBankFeedStatementsDeleteRequest$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsDeleteRequest$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsDeleteRequest
  > = z.object({
    id: z.string(),
    consumerId: z.string().optional(),
    appId: z.string().optional(),
    serviceId: z.string().optional(),
    raw: z.boolean().default(false),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsDeleteRequest$ {
  /** @deprecated use `AccountingBankFeedStatementsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsDeleteRequest$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsDeleteRequest$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteRequest$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsDeleteRequest$Outbound;
}

export function accountingBankFeedStatementsDeleteRequestToJSON(
  accountingBankFeedStatementsDeleteRequest:
    AccountingBankFeedStatementsDeleteRequest,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsDeleteRequest$outboundSchema.parse(
      accountingBankFeedStatementsDeleteRequest,
    ),
  );
}

export function accountingBankFeedStatementsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsDeleteRequest' from JSON`,
  );
}

/** @internal */
export const AccountingBankFeedStatementsDeleteResponse$inboundSchema:
  z.ZodType<AccountingBankFeedStatementsDeleteResponse, z.ZodTypeDef, unknown> =
    z.object({
      HttpMeta: components.HTTPMetadata$inboundSchema,
      DeleteBankFeedStatementResponse: components
        .DeleteBankFeedStatementResponse$inboundSchema.optional(),
      UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "HttpMeta": "httpMeta",
        "DeleteBankFeedStatementResponse": "deleteBankFeedStatementResponse",
        "UnexpectedErrorResponse": "unexpectedErrorResponse",
      });
    });

/** @internal */
export type AccountingBankFeedStatementsDeleteResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  DeleteBankFeedStatementResponse?:
    | components.DeleteBankFeedStatementResponse$Outbound
    | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const AccountingBankFeedStatementsDeleteResponse$outboundSchema:
  z.ZodType<
    AccountingBankFeedStatementsDeleteResponse$Outbound,
    z.ZodTypeDef,
    AccountingBankFeedStatementsDeleteResponse
  > = z.object({
    httpMeta: components.HTTPMetadata$outboundSchema,
    deleteBankFeedStatementResponse: components
      .DeleteBankFeedStatementResponse$outboundSchema.optional(),
    unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      deleteBankFeedStatementResponse: "DeleteBankFeedStatementResponse",
      unexpectedErrorResponse: "UnexpectedErrorResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountingBankFeedStatementsDeleteResponse$ {
  /** @deprecated use `AccountingBankFeedStatementsDeleteResponse$inboundSchema` instead. */
  export const inboundSchema =
    AccountingBankFeedStatementsDeleteResponse$inboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteResponse$outboundSchema` instead. */
  export const outboundSchema =
    AccountingBankFeedStatementsDeleteResponse$outboundSchema;
  /** @deprecated use `AccountingBankFeedStatementsDeleteResponse$Outbound` instead. */
  export type Outbound = AccountingBankFeedStatementsDeleteResponse$Outbound;
}

export function accountingBankFeedStatementsDeleteResponseToJSON(
  accountingBankFeedStatementsDeleteResponse:
    AccountingBankFeedStatementsDeleteResponse,
): string {
  return JSON.stringify(
    AccountingBankFeedStatementsDeleteResponse$outboundSchema.parse(
      accountingBankFeedStatementsDeleteResponse,
    ),
  );
}

export function accountingBankFeedStatementsDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountingBankFeedStatementsDeleteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountingBankFeedStatementsDeleteResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountingBankFeedStatementsDeleteResponse' from JSON`,
  );
}
