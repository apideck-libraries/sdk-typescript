/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VaultConnectionConsentUpdateGlobals = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
};

export type VaultConnectionConsentUpdateRequest = {
  /**
   * ID of the consumer which you want to get or push data from
   */
  consumerId?: string | undefined;
  /**
   * The ID of your Unify application
   */
  appId?: string | undefined;
  /**
   * Service ID of the resource to return
   */
  serviceId: string;
  /**
   * Unified API
   */
  unifiedApi: string;
  /**
   * New consent state
   */
  updateConsentRequest: components.UpdateConsentRequest;
};

export type VaultConnectionConsentUpdateResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Consent updated
   */
  updateConsentResponse?: components.UpdateConsentResponse | undefined;
  /**
   * Unexpected error
   */
  unexpectedErrorResponse?: components.UnexpectedErrorResponse | undefined;
};

/** @internal */
export const VaultConnectionConsentUpdateGlobals$inboundSchema: z.ZodType<
  VaultConnectionConsentUpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/** @internal */
export type VaultConnectionConsentUpdateGlobals$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
};

/** @internal */
export const VaultConnectionConsentUpdateGlobals$outboundSchema: z.ZodType<
  VaultConnectionConsentUpdateGlobals$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentUpdateGlobals
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentUpdateGlobals$ {
  /** @deprecated use `VaultConnectionConsentUpdateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    VaultConnectionConsentUpdateGlobals$inboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentUpdateGlobals$outboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateGlobals$Outbound` instead. */
  export type Outbound = VaultConnectionConsentUpdateGlobals$Outbound;
}

export function vaultConnectionConsentUpdateGlobalsToJSON(
  vaultConnectionConsentUpdateGlobals: VaultConnectionConsentUpdateGlobals,
): string {
  return JSON.stringify(
    VaultConnectionConsentUpdateGlobals$outboundSchema.parse(
      vaultConnectionConsentUpdateGlobals,
    ),
  );
}

export function vaultConnectionConsentUpdateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentUpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VaultConnectionConsentUpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentUpdateGlobals' from JSON`,
  );
}

/** @internal */
export const VaultConnectionConsentUpdateRequest$inboundSchema: z.ZodType<
  VaultConnectionConsentUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  service_id: z.string(),
  unified_api: z.string(),
  UpdateConsentRequest: components.UpdateConsentRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "service_id": "serviceId",
    "unified_api": "unifiedApi",
    "UpdateConsentRequest": "updateConsentRequest",
  });
});

/** @internal */
export type VaultConnectionConsentUpdateRequest$Outbound = {
  consumerId?: string | undefined;
  appId?: string | undefined;
  service_id: string;
  unified_api: string;
  UpdateConsentRequest: components.UpdateConsentRequest$Outbound;
};

/** @internal */
export const VaultConnectionConsentUpdateRequest$outboundSchema: z.ZodType<
  VaultConnectionConsentUpdateRequest$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentUpdateRequest
> = z.object({
  consumerId: z.string().optional(),
  appId: z.string().optional(),
  serviceId: z.string(),
  unifiedApi: z.string(),
  updateConsentRequest: components.UpdateConsentRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    serviceId: "service_id",
    unifiedApi: "unified_api",
    updateConsentRequest: "UpdateConsentRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentUpdateRequest$ {
  /** @deprecated use `VaultConnectionConsentUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    VaultConnectionConsentUpdateRequest$inboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentUpdateRequest$outboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateRequest$Outbound` instead. */
  export type Outbound = VaultConnectionConsentUpdateRequest$Outbound;
}

export function vaultConnectionConsentUpdateRequestToJSON(
  vaultConnectionConsentUpdateRequest: VaultConnectionConsentUpdateRequest,
): string {
  return JSON.stringify(
    VaultConnectionConsentUpdateRequest$outboundSchema.parse(
      vaultConnectionConsentUpdateRequest,
    ),
  );
}

export function vaultConnectionConsentUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VaultConnectionConsentUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentUpdateRequest' from JSON`,
  );
}

/** @internal */
export const VaultConnectionConsentUpdateResponse$inboundSchema: z.ZodType<
  VaultConnectionConsentUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  UpdateConsentResponse: components.UpdateConsentResponse$inboundSchema
    .optional(),
  UnexpectedErrorResponse: components.UnexpectedErrorResponse$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "UpdateConsentResponse": "updateConsentResponse",
    "UnexpectedErrorResponse": "unexpectedErrorResponse",
  });
});

/** @internal */
export type VaultConnectionConsentUpdateResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  UpdateConsentResponse?: components.UpdateConsentResponse$Outbound | undefined;
  UnexpectedErrorResponse?:
    | components.UnexpectedErrorResponse$Outbound
    | undefined;
};

/** @internal */
export const VaultConnectionConsentUpdateResponse$outboundSchema: z.ZodType<
  VaultConnectionConsentUpdateResponse$Outbound,
  z.ZodTypeDef,
  VaultConnectionConsentUpdateResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  updateConsentResponse: components.UpdateConsentResponse$outboundSchema
    .optional(),
  unexpectedErrorResponse: components.UnexpectedErrorResponse$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    updateConsentResponse: "UpdateConsentResponse",
    unexpectedErrorResponse: "UnexpectedErrorResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultConnectionConsentUpdateResponse$ {
  /** @deprecated use `VaultConnectionConsentUpdateResponse$inboundSchema` instead. */
  export const inboundSchema =
    VaultConnectionConsentUpdateResponse$inboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateResponse$outboundSchema` instead. */
  export const outboundSchema =
    VaultConnectionConsentUpdateResponse$outboundSchema;
  /** @deprecated use `VaultConnectionConsentUpdateResponse$Outbound` instead. */
  export type Outbound = VaultConnectionConsentUpdateResponse$Outbound;
}

export function vaultConnectionConsentUpdateResponseToJSON(
  vaultConnectionConsentUpdateResponse: VaultConnectionConsentUpdateResponse,
): string {
  return JSON.stringify(
    VaultConnectionConsentUpdateResponse$outboundSchema.parse(
      vaultConnectionConsentUpdateResponse,
    ),
  );
}

export function vaultConnectionConsentUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<VaultConnectionConsentUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VaultConnectionConsentUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultConnectionConsentUpdateResponse' from JSON`,
  );
}
