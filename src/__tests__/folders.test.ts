/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Folders File Storage Folders Add", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step fileStorage.foldersAdd.test referencing operation fileStorage.foldersAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersAdd.test referencing operation fileStorage.foldersAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersAdd.test referencing operation fileStorage.foldersAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersAdd.test referencing operation fileStorage.foldersAdd with expression in requestBody with type  not currently supported`]",
  );
});

test("Folders File Storage Folders One", async () => {
  const testHttpClient = createTestHTTPClient("fileStorage.foldersOne");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.fileStorage.folders.get({
    id: "<id>",
    serviceId: "salesforce",
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getFolderResponse).toBeDefined();
  expect(result.getFolderResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "undefined",
    resource: "Folders",
    operation: "one",
    data: {
      id: "12345",
      name: "Documents",
      description: "My Personal Documents",
      path: "/Personal/Documents",
      size: 1810673,
      owner: {
        id: "12345",
        email: "hello@apideck.com",
        name: "Elon Musk",
      },
      parentFolders: [
        {
          id: "12345",
          name: "Personal",
        },
        {
          id: "12345",
          name: "Personal",
        },
      ],
      updatedBy: "12345",
      createdBy: "12345",
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});

it.skip("Folders File Storage Folders Update", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersUpdate.test referencing operation fileStorage.foldersUpdate with expression in requestBody with type  not currently supported`]",
  );
});

test("Folders File Storage Folders Delete", async () => {
  const testHttpClient = createTestHTTPClient("fileStorage.foldersDelete");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.fileStorage.folders.delete({
    id: "<id>",
    serviceId: "salesforce",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteFolderResponse).toBeDefined();
  expect(result.deleteFolderResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "undefined",
    resource: "Folders",
    operation: "delete",
    data: {
      id: "12345",
    },
  });
});

it.skip("Folders File Storage Folders Copy", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`, `workflow step fileStorage.foldersCopy.test referencing operation fileStorage.foldersCopy with expression in requestBody with type  not currently supported`]",
  );
});
