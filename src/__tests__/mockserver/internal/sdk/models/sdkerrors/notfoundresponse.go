// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type NotFoundResponseDetailType string

const (
	NotFoundResponseDetailTypeStr      NotFoundResponseDetailType = "str"
	NotFoundResponseDetailTypeMapOfAny NotFoundResponseDetailType = "mapOfAny"
)

// NotFoundResponseDetail - Contains parameter or domain specific information related to the error and why it occurred.
type NotFoundResponseDetail struct {
	Str      *string
	MapOfAny map[string]any

	Type NotFoundResponseDetailType
}

var _ error = &NotFoundResponseDetail{}

func CreateNotFoundResponseDetailStr(str string) NotFoundResponseDetail {
	typ := NotFoundResponseDetailTypeStr

	return NotFoundResponseDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateNotFoundResponseDetailMapOfAny(mapOfAny map[string]any) NotFoundResponseDetail {
	typ := NotFoundResponseDetailTypeMapOfAny

	return NotFoundResponseDetail{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *NotFoundResponseDetail) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NotFoundResponseDetailTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = NotFoundResponseDetailTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NotFoundResponseDetail", string(data))
}

func (u NotFoundResponseDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type NotFoundResponseDetail: all fields are null")
}

func (u NotFoundResponseDetail) Error() string {
	switch u.Type {
	case NotFoundResponseDetailTypeStr:
		data, _ := json.Marshal(u.Str)
		return string(data)
	case NotFoundResponseDetailTypeMapOfAny:
		data, _ := json.Marshal(u.MapOfAny)
		return string(data)
	default:
		return "unknown error"
	}
}

// NotFoundResponse - The specified resource was not found
type NotFoundResponse struct {
	// HTTP status code
	StatusCode *float64 `json:"status_code,omitempty"`
	// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
	Error_ *string `json:"error,omitempty"`
	// The type of error returned
	TypeName *string `json:"type_name,omitempty"`
	// A human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
	// Contains parameter or domain specific information related to the error and why it occurred.
	Detail *NotFoundResponseDetail `json:"detail,omitempty"`
	// Link to documentation of error type
	Ref *string `json:"ref,omitempty"`
}

var _ error = &NotFoundResponse{}

func (e *NotFoundResponse) Error() string {
	if e.Message == nil {
		return "unknown error"
	}

	return *e.Message
}
