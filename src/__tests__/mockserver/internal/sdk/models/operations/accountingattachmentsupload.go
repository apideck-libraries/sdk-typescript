// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"io"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type AccountingAttachmentsUploadGlobals struct {
	// ID of the consumer which you want to get or push data from
	ConsumerID *string `header:"style=simple,explode=false,name=x-apideck-consumer-id"`
	// The ID of your Unify application
	AppID *string `header:"style=simple,explode=false,name=x-apideck-app-id"`
}

func (o *AccountingAttachmentsUploadGlobals) GetConsumerID() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerID
}

func (o *AccountingAttachmentsUploadGlobals) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

type AccountingAttachmentsUploadRequest struct {
	// The reference type of the document.
	ReferenceType components.AttachmentReferenceType `pathParam:"style=simple,explode=false,name=reference_type"`
	// The reference id of the object to retrieve.
	ReferenceID string `pathParam:"style=simple,explode=false,name=reference_id"`
	// Include raw response. Mostly used for debugging purposes
	Raw *bool `default:"false" queryParam:"style=form,explode=true,name=raw"`
	// Metadata to attach to the attachment file (JSON string)
	XApideckMetadata *string `header:"style=simple,explode=false,name=x-apideck-metadata"`
	// ID of the consumer which you want to get or push data from
	ConsumerID *string `header:"style=simple,explode=false,name=x-apideck-consumer-id"`
	// The ID of your Unify application
	AppID *string `header:"style=simple,explode=false,name=x-apideck-app-id"`
	// Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
	ServiceID   *string   `header:"style=simple,explode=false,name=x-apideck-service-id"`
	RequestBody io.Reader `request:"mediaType=*/*"`
}

func (a AccountingAttachmentsUploadRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingAttachmentsUploadRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccountingAttachmentsUploadRequest) GetReferenceType() components.AttachmentReferenceType {
	if o == nil {
		return components.AttachmentReferenceType("")
	}
	return o.ReferenceType
}

func (o *AccountingAttachmentsUploadRequest) GetReferenceID() string {
	if o == nil {
		return ""
	}
	return o.ReferenceID
}

func (o *AccountingAttachmentsUploadRequest) GetRaw() *bool {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *AccountingAttachmentsUploadRequest) GetXApideckMetadata() *string {
	if o == nil {
		return nil
	}
	return o.XApideckMetadata
}

func (o *AccountingAttachmentsUploadRequest) GetConsumerID() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerID
}

func (o *AccountingAttachmentsUploadRequest) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *AccountingAttachmentsUploadRequest) GetServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ServiceID
}

func (o *AccountingAttachmentsUploadRequest) GetRequestBody() io.Reader {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type AccountingAttachmentsUploadResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Attachments
	CreateAttachmentResponse *components.CreateAttachmentResponse
	// Unexpected error
	UnexpectedErrorResponse *components.UnexpectedErrorResponse
}

func (o *AccountingAttachmentsUploadResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountingAttachmentsUploadResponse) GetCreateAttachmentResponse() *components.CreateAttachmentResponse {
	if o == nil {
		return nil
	}
	return o.CreateAttachmentResponse
}

func (o *AccountingAttachmentsUploadResponse) GetUnexpectedErrorResponse() *components.UnexpectedErrorResponse {
	if o == nil {
		return nil
	}
	return o.UnexpectedErrorResponse
}
