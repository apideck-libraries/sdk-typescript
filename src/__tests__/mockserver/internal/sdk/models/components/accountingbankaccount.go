// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// AccountingBankAccountAccountType - The type of bank account
type AccountingBankAccountAccountType string

const (
	AccountingBankAccountAccountTypeChecking     AccountingBankAccountAccountType = "checking"
	AccountingBankAccountAccountTypeSavings      AccountingBankAccountAccountType = "savings"
	AccountingBankAccountAccountTypeCreditCard   AccountingBankAccountAccountType = "credit_card"
	AccountingBankAccountAccountTypeMoneyMarket  AccountingBankAccountAccountType = "money_market"
	AccountingBankAccountAccountTypeLineOfCredit AccountingBankAccountAccountType = "line_of_credit"
	AccountingBankAccountAccountTypeOther        AccountingBankAccountAccountType = "other"
)

func (e AccountingBankAccountAccountType) ToPointer() *AccountingBankAccountAccountType {
	return &e
}
func (e *AccountingBankAccountAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checking":
		fallthrough
	case "savings":
		fallthrough
	case "credit_card":
		fallthrough
	case "money_market":
		fallthrough
	case "line_of_credit":
		fallthrough
	case "other":
		*e = AccountingBankAccountAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingBankAccountAccountType: %v", v)
	}
}

// AccountingBankAccountStatus - The status of the bank account
type AccountingBankAccountStatus string

const (
	AccountingBankAccountStatusActive   AccountingBankAccountStatus = "active"
	AccountingBankAccountStatusInactive AccountingBankAccountStatus = "inactive"
	AccountingBankAccountStatusClosed   AccountingBankAccountStatus = "closed"
)

func (e AccountingBankAccountStatus) ToPointer() *AccountingBankAccountStatus {
	return &e
}
func (e *AccountingBankAccountStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "closed":
		*e = AccountingBankAccountStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingBankAccountStatus: %v", v)
	}
}

type AccountingBankAccount struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// Display ID for the bank account
	DisplayID *string `json:"display_id,omitempty"`
	// The name of the bank account as it appears in the accounting system
	Name *string `json:"name,omitempty"`
	// The bank account number
	AccountNumber *string `json:"account_number,omitempty"`
	// The type of bank account
	AccountType *AccountingBankAccountAccountType `json:"account_type,omitempty"`
	// The name of the bank or financial institution
	BankName *string `json:"bank_name,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The current balance of the bank account
	Balance *float64 `json:"balance,omitempty"`
	// The available balance (considering pending transactions and overdraft)
	AvailableBalance *float64 `json:"available_balance,omitempty"`
	// The overdraft limit for the account
	OverdraftLimit *float64 `json:"overdraft_limit,omitempty"`
	// Bank routing number (US)
	RoutingNumber *string `json:"routing_number,omitempty"`
	// International Bank Account Number
	Iban *string `json:"iban,omitempty"`
	// Bank Identifier Code / SWIFT Code
	Bic *string `json:"bic,omitempty"`
	// Bank State Branch number (Australia/New Zealand)
	BsbNumber *string `json:"bsb_number,omitempty"`
	// Bank branch identifier
	BranchIdentifier *string `json:"branch_identifier,omitempty"`
	// Bank code assigned by central bank
	BankCode *string `json:"bank_code,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	Country *string `json:"country,omitempty"`
	// The status of the bank account
	Status *AccountingBankAccountStatus `json:"status,omitempty"`
	// Description or notes about the bank account
	Description  *string       `json:"description,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}

func (a AccountingBankAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccountingBankAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (o *AccountingBankAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccountingBankAccount) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *AccountingBankAccount) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountingBankAccount) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *AccountingBankAccount) GetAccountType() *AccountingBankAccountAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *AccountingBankAccount) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *AccountingBankAccount) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingBankAccount) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *AccountingBankAccount) GetAvailableBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.AvailableBalance
}

func (o *AccountingBankAccount) GetOverdraftLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.OverdraftLimit
}

func (o *AccountingBankAccount) GetRoutingNumber() *string {
	if o == nil {
		return nil
	}
	return o.RoutingNumber
}

func (o *AccountingBankAccount) GetIban() *string {
	if o == nil {
		return nil
	}
	return o.Iban
}

func (o *AccountingBankAccount) GetBic() *string {
	if o == nil {
		return nil
	}
	return o.Bic
}

func (o *AccountingBankAccount) GetBsbNumber() *string {
	if o == nil {
		return nil
	}
	return o.BsbNumber
}

func (o *AccountingBankAccount) GetBranchIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.BranchIdentifier
}

func (o *AccountingBankAccount) GetBankCode() *string {
	if o == nil {
		return nil
	}
	return o.BankCode
}

func (o *AccountingBankAccount) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *AccountingBankAccount) GetStatus() *AccountingBankAccountStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingBankAccount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccountingBankAccount) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *AccountingBankAccount) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *AccountingBankAccount) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccountingBankAccount) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AccountingBankAccount) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *AccountingBankAccount) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

type AccountingBankAccountInput struct {
	// Display ID for the bank account
	DisplayID *string `json:"display_id,omitempty"`
	// The name of the bank account as it appears in the accounting system
	Name *string `json:"name,omitempty"`
	// The bank account number
	AccountNumber *string `json:"account_number,omitempty"`
	// The type of bank account
	AccountType *AccountingBankAccountAccountType `json:"account_type,omitempty"`
	// The name of the bank or financial institution
	BankName *string `json:"bank_name,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The current balance of the bank account
	Balance *float64 `json:"balance,omitempty"`
	// The available balance (considering pending transactions and overdraft)
	AvailableBalance *float64 `json:"available_balance,omitempty"`
	// The overdraft limit for the account
	OverdraftLimit *float64 `json:"overdraft_limit,omitempty"`
	// Bank routing number (US)
	RoutingNumber *string `json:"routing_number,omitempty"`
	// International Bank Account Number
	Iban *string `json:"iban,omitempty"`
	// Bank Identifier Code / SWIFT Code
	Bic *string `json:"bic,omitempty"`
	// Bank State Branch number (Australia/New Zealand)
	BsbNumber *string `json:"bsb_number,omitempty"`
	// Bank branch identifier
	BranchIdentifier *string `json:"branch_identifier,omitempty"`
	// Bank code assigned by central bank
	BankCode *string `json:"bank_code,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	Country *string `json:"country,omitempty"`
	// The status of the bank account
	Status *AccountingBankAccountStatus `json:"status,omitempty"`
	// Description or notes about the bank account
	Description  *string       `json:"description,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
}

func (o *AccountingBankAccountInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *AccountingBankAccountInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AccountingBankAccountInput) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *AccountingBankAccountInput) GetAccountType() *AccountingBankAccountAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *AccountingBankAccountInput) GetBankName() *string {
	if o == nil {
		return nil
	}
	return o.BankName
}

func (o *AccountingBankAccountInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *AccountingBankAccountInput) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *AccountingBankAccountInput) GetAvailableBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.AvailableBalance
}

func (o *AccountingBankAccountInput) GetOverdraftLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.OverdraftLimit
}

func (o *AccountingBankAccountInput) GetRoutingNumber() *string {
	if o == nil {
		return nil
	}
	return o.RoutingNumber
}

func (o *AccountingBankAccountInput) GetIban() *string {
	if o == nil {
		return nil
	}
	return o.Iban
}

func (o *AccountingBankAccountInput) GetBic() *string {
	if o == nil {
		return nil
	}
	return o.Bic
}

func (o *AccountingBankAccountInput) GetBsbNumber() *string {
	if o == nil {
		return nil
	}
	return o.BsbNumber
}

func (o *AccountingBankAccountInput) GetBranchIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.BranchIdentifier
}

func (o *AccountingBankAccountInput) GetBankCode() *string {
	if o == nil {
		return nil
	}
	return o.BankCode
}

func (o *AccountingBankAccountInput) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *AccountingBankAccountInput) GetStatus() *AccountingBankAccountStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AccountingBankAccountInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccountingBankAccountInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}
