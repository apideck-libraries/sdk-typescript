// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Audience for the doc.
type Audience string

const (
	AudienceApplicationOwner Audience = "application_owner"
	AudienceConsumer         Audience = "consumer"
)

func (e Audience) ToPointer() *Audience {
	return &e
}
func (e *Audience) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application_owner":
		fallthrough
	case "consumer":
		*e = Audience(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Audience: %v", v)
	}
}

// Format of the doc.
type Format string

const (
	FormatMarkdown Format = "markdown"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type ConnectorDoc struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Name of the doc.
	Name *string `json:"name,omitempty"`
	// Audience for the doc.
	Audience *Audience `json:"audience,omitempty"`
	// Format of the doc.
	Format *Format `json:"format,omitempty"`
	// Link to fetch the content of the doc.
	URL *string `json:"url,omitempty"`
}

func (o *ConnectorDoc) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ConnectorDoc) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ConnectorDoc) GetAudience() *Audience {
	if o == nil {
		return nil
	}
	return o.Audience
}

func (o *ConnectorDoc) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *ConnectorDoc) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
