// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ConnectorSettingType string

const (
	ConnectorSettingTypeText           ConnectorSettingType = "text"
	ConnectorSettingTypeCheckbox       ConnectorSettingType = "checkbox"
	ConnectorSettingTypeTel            ConnectorSettingType = "tel"
	ConnectorSettingTypeEmail          ConnectorSettingType = "email"
	ConnectorSettingTypeURL            ConnectorSettingType = "url"
	ConnectorSettingTypeTextarea       ConnectorSettingType = "textarea"
	ConnectorSettingTypeSelect         ConnectorSettingType = "select"
	ConnectorSettingTypeFilteredSelect ConnectorSettingType = "filtered-select"
	ConnectorSettingTypeMultiSelect    ConnectorSettingType = "multi-select"
	ConnectorSettingTypeDatetime       ConnectorSettingType = "datetime"
	ConnectorSettingTypeDate           ConnectorSettingType = "date"
	ConnectorSettingTypeTime           ConnectorSettingType = "time"
	ConnectorSettingTypeNumber         ConnectorSettingType = "number"
	ConnectorSettingTypePassword       ConnectorSettingType = "password"
)

func (e ConnectorSettingType) ToPointer() *ConnectorSettingType {
	return &e
}
func (e *ConnectorSettingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "checkbox":
		fallthrough
	case "tel":
		fallthrough
	case "email":
		fallthrough
	case "url":
		fallthrough
	case "textarea":
		fallthrough
	case "select":
		fallthrough
	case "filtered-select":
		fallthrough
	case "multi-select":
		fallthrough
	case "datetime":
		fallthrough
	case "date":
		fallthrough
	case "time":
		fallthrough
	case "number":
		fallthrough
	case "password":
		*e = ConnectorSettingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectorSettingType: %v", v)
	}
}

type ConnectorSetting struct {
	ID    *string               `json:"id,omitempty"`
	Label *string               `json:"label,omitempty"`
	Type  *ConnectorSettingType `json:"type,omitempty"`
}

func (o *ConnectorSetting) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ConnectorSetting) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *ConnectorSetting) GetType() *ConnectorSettingType {
	if o == nil {
		return nil
	}
	return o.Type
}
