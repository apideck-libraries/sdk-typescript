// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// BankAccountType - Type of the bank account.
type BankAccountType string

const (
	BankAccountTypeBank       BankAccountType = "bank"
	BankAccountTypeCreditCard BankAccountType = "credit_card"
)

func (e BankAccountType) ToPointer() *BankAccountType {
	return &e
}
func (e *BankAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank":
		fallthrough
	case "credit_card":
		*e = BankAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankAccountType: %v", v)
	}
}

// FeedStatus - Current status of the bank feed.
type FeedStatus string

const (
	FeedStatusPending  FeedStatus = "pending"
	FeedStatusRejected FeedStatus = "rejected"
)

func (e FeedStatus) ToPointer() *FeedStatus {
	return &e
}
func (e *FeedStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "rejected":
		*e = FeedStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeedStatus: %v", v)
	}
}

type BankFeedAccount struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// Type of the bank account.
	BankAccountType *BankAccountType `json:"bank_account_type,omitempty"`
	// The source account's unique identifier.
	SourceAccountID *string `json:"source_account_id,omitempty"`
	// The target account's unique identifier in the accounting connector.
	TargetAccountID *string `json:"target_account_id,omitempty"`
	// Name associated with the target account.
	TargetAccountName *string `json:"target_account_name,omitempty"`
	// Account number of the destination bank account.
	TargetAccountNumber *string `json:"target_account_number,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Current status of the bank feed.
	FeedStatus *FeedStatus `json:"feed_status,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	Country      *string       `json:"country,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
}

func (b BankFeedAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankFeedAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankFeedAccount) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BankFeedAccount) GetBankAccountType() *BankAccountType {
	if o == nil {
		return nil
	}
	return o.BankAccountType
}

func (o *BankFeedAccount) GetSourceAccountID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountID
}

func (o *BankFeedAccount) GetTargetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountID
}

func (o *BankFeedAccount) GetTargetAccountName() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountName
}

func (o *BankFeedAccount) GetTargetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountNumber
}

func (o *BankFeedAccount) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *BankFeedAccount) GetFeedStatus() *FeedStatus {
	if o == nil {
		return nil
	}
	return o.FeedStatus
}

func (o *BankFeedAccount) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *BankFeedAccount) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *BankFeedAccount) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *BankFeedAccount) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *BankFeedAccount) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *BankFeedAccount) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *BankFeedAccount) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

type BankFeedAccountInput struct {
	// Type of the bank account.
	BankAccountType *BankAccountType `json:"bank_account_type,omitempty"`
	// The source account's unique identifier.
	SourceAccountID *string `json:"source_account_id,omitempty"`
	// The target account's unique identifier in the accounting connector.
	TargetAccountID *string `json:"target_account_id,omitempty"`
	// Name associated with the target account.
	TargetAccountName *string `json:"target_account_name,omitempty"`
	// Account number of the destination bank account.
	TargetAccountNumber *string `json:"target_account_number,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Current status of the bank feed.
	FeedStatus *FeedStatus `json:"feed_status,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	Country      *string       `json:"country,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
}

func (o *BankFeedAccountInput) GetBankAccountType() *BankAccountType {
	if o == nil {
		return nil
	}
	return o.BankAccountType
}

func (o *BankFeedAccountInput) GetSourceAccountID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAccountID
}

func (o *BankFeedAccountInput) GetTargetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountID
}

func (o *BankFeedAccountInput) GetTargetAccountName() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountName
}

func (o *BankFeedAccountInput) GetTargetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.TargetAccountNumber
}

func (o *BankFeedAccountInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *BankFeedAccountInput) GetFeedStatus() *FeedStatus {
	if o == nil {
		return nil
	}
	return o.FeedStatus
}

func (o *BankFeedAccountInput) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *BankFeedAccountInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}
