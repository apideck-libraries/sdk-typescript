// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// BillPaymentType - Type of payment
type BillPaymentType string

const (
	BillPaymentTypeAccountsPayableCredit      BillPaymentType = "accounts_payable_credit"
	BillPaymentTypeAccountsPayableOverpayment BillPaymentType = "accounts_payable_overpayment"
	BillPaymentTypeAccountsPayablePrepayment  BillPaymentType = "accounts_payable_prepayment"
	BillPaymentTypeAccountsPayable            BillPaymentType = "accounts_payable"
)

func (e BillPaymentType) ToPointer() *BillPaymentType {
	return &e
}
func (e *BillPaymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounts_payable_credit":
		fallthrough
	case "accounts_payable_overpayment":
		fallthrough
	case "accounts_payable_prepayment":
		fallthrough
	case "accounts_payable":
		*e = BillPaymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillPaymentType: %v", v)
	}
}

// BillPaymentAllocationType - Type of entity this payment should be attributed to.
type BillPaymentAllocationType string

const (
	BillPaymentAllocationTypeBill         BillPaymentAllocationType = "bill"
	BillPaymentAllocationTypeExpense      BillPaymentAllocationType = "expense"
	BillPaymentAllocationTypeCreditMemo   BillPaymentAllocationType = "credit_memo"
	BillPaymentAllocationTypeOverPayment  BillPaymentAllocationType = "over_payment"
	BillPaymentAllocationTypePrePayment   BillPaymentAllocationType = "pre_payment"
	BillPaymentAllocationTypeJournalEntry BillPaymentAllocationType = "journal_entry"
	BillPaymentAllocationTypeOther        BillPaymentAllocationType = "other"
)

func (e BillPaymentAllocationType) ToPointer() *BillPaymentAllocationType {
	return &e
}
func (e *BillPaymentAllocationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bill":
		fallthrough
	case "expense":
		fallthrough
	case "credit_memo":
		fallthrough
	case "over_payment":
		fallthrough
	case "pre_payment":
		fallthrough
	case "journal_entry":
		fallthrough
	case "other":
		*e = BillPaymentAllocationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillPaymentAllocationType: %v", v)
	}
}

type BillPaymentAllocation struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *BillPaymentAllocationType `json:"type,omitempty"`
	Code *string                    `json:"code,omitempty"`
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	// Unique identifier of the allocation
	AllocationID *string `json:"allocation_id,omitempty"`
}

func (o *BillPaymentAllocation) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BillPaymentAllocation) GetType() *BillPaymentAllocationType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BillPaymentAllocation) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *BillPaymentAllocation) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *BillPaymentAllocation) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

type BillPayment struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The total amount of the transaction or record
	TotalAmount *float64 `json:"total_amount"`
	// Optional transaction reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Optional reference message returned by payment method on processing
	PaymentMethodReference *string `json:"payment_method_reference,omitempty"`
	// A unique identifier for an object.
	PaymentMethodID *string              `json:"payment_method_id,omitempty"`
	Account         *LinkedLedgerAccount `json:"account,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplier `json:"supplier,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Indicates if the transaction has been reconciled.
	Reconciled *bool `json:"reconciled,omitempty"`
	// Status of payment
	Status *PaymentStatus `json:"status,omitempty"`
	// Type of payment
	Type        *BillPaymentType        `json:"type,omitempty"`
	Allocations []BillPaymentAllocation `json:"allocations,omitempty"`
	// Note associated with the transaction
	Note *string `json:"note,omitempty"`
	// Number associated with the transaction
	Number *string `json:"number,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	CustomFields       []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Id to be displayed.
	DisplayID *string `json:"display_id,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (b BillPayment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BillPayment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BillPayment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BillPayment) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *BillPayment) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *BillPayment) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *BillPayment) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *BillPayment) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *BillPayment) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *BillPayment) GetPaymentMethodReference() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodReference
}

func (o *BillPayment) GetPaymentMethodID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodID
}

func (o *BillPayment) GetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *BillPayment) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *BillPayment) GetSupplier() *LinkedSupplier {
	if o == nil {
		return nil
	}
	return o.Supplier
}

func (o *BillPayment) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *BillPayment) GetReconciled() *bool {
	if o == nil {
		return nil
	}
	return o.Reconciled
}

func (o *BillPayment) GetStatus() *PaymentStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BillPayment) GetType() *BillPaymentType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BillPayment) GetAllocations() []BillPaymentAllocation {
	if o == nil {
		return nil
	}
	return o.Allocations
}

func (o *BillPayment) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *BillPayment) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *BillPayment) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *BillPayment) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *BillPayment) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *BillPayment) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *BillPayment) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *BillPayment) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *BillPayment) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *BillPayment) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *BillPayment) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *BillPayment) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type BillPaymentAllocationInput struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Type of entity this payment should be attributed to.
	Type *BillPaymentAllocationType `json:"type,omitempty"`
	// Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
	Amount *float64 `json:"amount,omitempty"`
	// Unique identifier of the allocation
	AllocationID *string `json:"allocation_id,omitempty"`
}

func (o *BillPaymentAllocationInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BillPaymentAllocationInput) GetType() *BillPaymentAllocationType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BillPaymentAllocationInput) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *BillPaymentAllocationInput) GetAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.AllocationID
}

type BillPaymentInput struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The total amount of the transaction or record
	TotalAmount *float64 `json:"total_amount"`
	// Optional transaction reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Optional reference message returned by payment method on processing
	PaymentMethodReference *string `json:"payment_method_reference,omitempty"`
	// A unique identifier for an object.
	PaymentMethodID *string                   `json:"payment_method_id,omitempty"`
	Account         *LinkedLedgerAccountInput `json:"account,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplierInput `json:"supplier,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Indicates if the transaction has been reconciled.
	Reconciled *bool `json:"reconciled,omitempty"`
	// Status of payment
	Status *PaymentStatus `json:"status,omitempty"`
	// Type of payment
	Type        *BillPaymentType             `json:"type,omitempty"`
	Allocations []BillPaymentAllocationInput `json:"allocations,omitempty"`
	// Note associated with the transaction
	Note *string `json:"note,omitempty"`
	// Number associated with the transaction
	Number *string `json:"number,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	CustomFields       []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Id to be displayed.
	DisplayID *string `json:"display_id,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (b BillPaymentInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BillPaymentInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BillPaymentInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *BillPaymentInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *BillPaymentInput) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *BillPaymentInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *BillPaymentInput) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *BillPaymentInput) GetPaymentMethodReference() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodReference
}

func (o *BillPaymentInput) GetPaymentMethodID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodID
}

func (o *BillPaymentInput) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *BillPaymentInput) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *BillPaymentInput) GetSupplier() *LinkedSupplierInput {
	if o == nil {
		return nil
	}
	return o.Supplier
}

func (o *BillPaymentInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *BillPaymentInput) GetReconciled() *bool {
	if o == nil {
		return nil
	}
	return o.Reconciled
}

func (o *BillPaymentInput) GetStatus() *PaymentStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BillPaymentInput) GetType() *BillPaymentType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *BillPaymentInput) GetAllocations() []BillPaymentAllocationInput {
	if o == nil {
		return nil
	}
	return o.Allocations
}

func (o *BillPaymentInput) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *BillPaymentInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *BillPaymentInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *BillPaymentInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *BillPaymentInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *BillPaymentInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *BillPaymentInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
