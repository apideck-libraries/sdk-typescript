// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// LeavingReason - The reason because the employment ended.
type LeavingReason string

const (
	LeavingReasonDismissed  LeavingReason = "dismissed"
	LeavingReasonResigned   LeavingReason = "resigned"
	LeavingReasonRedundancy LeavingReason = "redundancy"
	LeavingReasonOther      LeavingReason = "other"
)

func (e LeavingReason) ToPointer() *LeavingReason {
	return &e
}
func (e *LeavingReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dismissed":
		fallthrough
	case "resigned":
		fallthrough
	case "redundancy":
		fallthrough
	case "other":
		*e = LeavingReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LeavingReason: %v", v)
	}
}

// EmploymentType - The type of employment relationship the employee has with the organization.
type EmploymentType string

const (
	EmploymentTypeContractor EmploymentType = "contractor"
	EmploymentTypeEmployee   EmploymentType = "employee"
	EmploymentTypeFreelance  EmploymentType = "freelance"
	EmploymentTypeTemp       EmploymentType = "temp"
	EmploymentTypeInternship EmploymentType = "internship"
	EmploymentTypeOther      EmploymentType = "other"
)

func (e EmploymentType) ToPointer() *EmploymentType {
	return &e
}
func (e *EmploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contractor":
		fallthrough
	case "employee":
		fallthrough
	case "freelance":
		fallthrough
	case "temp":
		fallthrough
	case "internship":
		fallthrough
	case "other":
		*e = EmploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmploymentType: %v", v)
	}
}

// EmploymentSubType - The work schedule of the employee.
type EmploymentSubType string

const (
	EmploymentSubTypeFullTime     EmploymentSubType = "full_time"
	EmploymentSubTypePartTime     EmploymentSubType = "part_time"
	EmploymentSubTypeHourly       EmploymentSubType = "hourly"
	EmploymentSubTypeOther        EmploymentSubType = "other"
	EmploymentSubTypeNotSpecified EmploymentSubType = "not_specified"
)

func (e EmploymentSubType) ToPointer() *EmploymentSubType {
	return &e
}
func (e *EmploymentSubType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full_time":
		fallthrough
	case "part_time":
		fallthrough
	case "hourly":
		fallthrough
	case "other":
		fallthrough
	case "not_specified":
		*e = EmploymentSubType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmploymentSubType: %v", v)
	}
}

type EmploymentRole struct {
	// The type of employment relationship the employee has with the organization.
	Type *EmploymentType `json:"type,omitempty"`
	// The work schedule of the employee.
	SubType *EmploymentSubType `json:"sub_type,omitempty"`
}

func (o *EmploymentRole) GetType() *EmploymentType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EmploymentRole) GetSubType() *EmploymentSubType {
	if o == nil {
		return nil
	}
	return o.SubType
}

type Manager struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The name of the manager, often a combination of their first and last names.
	Name *string `json:"name,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// The email address of the manager.
	Email *string `json:"email,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatus `json:"employment_status,omitempty"`
}

func (o *Manager) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Manager) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Manager) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *Manager) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *Manager) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Manager) GetEmploymentStatus() *EmploymentStatus {
	if o == nil {
		return nil
	}
	return o.EmploymentStatus
}

type ProbationPeriod struct {
	// The date that the employee started their probation period at the company.
	StartDate *types.Date `json:"start_date,omitempty"`
	// The date that the employee ended their probation period at the company.
	EndDate *types.Date `json:"end_date,omitempty"`
}

func (p ProbationPeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProbationPeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProbationPeriod) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ProbationPeriod) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type Employee struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
	// The name used to display the employee, often a combination of their first and last names.
	DisplayName *string `json:"display_name,omitempty"`
	// The name the employee prefers to be addressed by, which may be different from their legal name.
	PreferredName *string `json:"preferred_name,omitempty"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials *string `json:"initials,omitempty"`
	// A formal salutation for the person. For example, 'Mr', 'Mrs'
	Salutation *string `json:"salutation,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The marital status of the employee.
	MaritalStatus *string `json:"marital_status,omitempty"`
	Partner       *Person `json:"partner,omitempty"`
	// The division the person is currently in. Usually a collection of departments or teams or regions.
	Division *string `json:"division,omitempty"`
	// Unique identifier of the division this employee belongs to.
	DivisionID *string `json:"division_id,omitempty"`
	// The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Department *string `json:"department,omitempty"`
	// Unique identifier of the department ID this employee belongs to.
	DepartmentID *string `json:"department_id,omitempty"`
	// Name of the department this employee belongs to.
	DepartmentName *string `json:"department_name,omitempty"`
	// The team the person is currently in.
	Team *Team `json:"team,omitempty"`
	// The unique identifier of the company.
	CompanyID *string `json:"company_id,omitempty"`
	// The name of the company.
	CompanyName *string `json:"company_name,omitempty"`
	// A Start Date is the date that the employee started working at the company
	EmploymentStartDate *string `json:"employment_start_date,omitempty"`
	// An End Date is the date that the employee ended working at the company
	EmploymentEndDate *string `json:"employment_end_date,omitempty"`
	// The reason because the employment ended.
	LeavingReason *LeavingReason `json:"leaving_reason,omitempty"`
	// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
	EmployeeNumber *string `json:"employee_number,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatus `json:"employment_status,omitempty"`
	EmploymentRole   *EmploymentRole   `json:"employment_role,omitempty"`
	// The ethnicity of the employee
	Ethnicity *string  `json:"ethnicity,omitempty"`
	Manager   *Manager `json:"manager,omitempty"`
	// Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
	DirectReports []string `json:"direct_reports,omitempty"`
	// A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
	SocialSecurityNumber *string `json:"social_security_number,omitempty"`
	// The date of birth of the person.
	Birthday *types.Date `json:"birthday,omitempty"`
	// The date the person deceased.
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	CountryOfBirth *string `json:"country_of_birth,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// The gender represents the gender identity of a person.
	Gender *Gender `json:"gender,omitempty"`
	// The preferred pronouns of the person.
	Pronouns *string `json:"pronouns,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	PreferredLanguage *string   `json:"preferred_language,omitempty"`
	Languages         []*string `json:"languages,omitempty"`
	Nationalities     []*string `json:"nationalities,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
	Timezone *string `json:"timezone,omitempty"`
	// When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
	Source *string `json:"source,omitempty"`
	// Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
	SourceID      *string                `json:"source_id,omitempty"`
	RecordURL     *string                `json:"record_url,omitempty"`
	Jobs          []EmployeeJob          `json:"jobs,omitempty"`
	Compensations []EmployeeCompensation `json:"compensations,omitempty"`
	// Indicates if the employee works from a remote location.
	WorksRemote  *bool         `json:"works_remote,omitempty"`
	Addresses    []Address     `json:"addresses,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	Emails       []Email       `json:"emails,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	SocialLinks  []SocialLink  `json:"social_links,omitempty"`
	BankAccounts []BankAccount `json:"bank_accounts,omitempty"`
	TaxCode      *string       `json:"tax_code,omitempty"`
	TaxID        *string       `json:"tax_id,omitempty"`
	// Indicate the employee's dietary preference.
	DietaryPreference *string `json:"dietary_preference,omitempty"`
	// Indicate the employee's food allergies.
	FoodAllergies   []string         `json:"food_allergies,omitempty"`
	ProbationPeriod *ProbationPeriod `json:"probation_period,omitempty"`
	Tags            []string         `json:"tags,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Flag to indicate if the object is deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e Employee) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Employee) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Employee) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Employee) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *Employee) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *Employee) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *Employee) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *Employee) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Employee) GetPreferredName() *string {
	if o == nil {
		return nil
	}
	return o.PreferredName
}

func (o *Employee) GetInitials() *string {
	if o == nil {
		return nil
	}
	return o.Initials
}

func (o *Employee) GetSalutation() *string {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *Employee) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Employee) GetMaritalStatus() *string {
	if o == nil {
		return nil
	}
	return o.MaritalStatus
}

func (o *Employee) GetPartner() *Person {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *Employee) GetDivision() *string {
	if o == nil {
		return nil
	}
	return o.Division
}

func (o *Employee) GetDivisionID() *string {
	if o == nil {
		return nil
	}
	return o.DivisionID
}

func (o *Employee) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *Employee) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Employee) GetDepartmentName() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentName
}

func (o *Employee) GetTeam() *Team {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *Employee) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Employee) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *Employee) GetEmploymentStartDate() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentStartDate
}

func (o *Employee) GetEmploymentEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentEndDate
}

func (o *Employee) GetLeavingReason() *LeavingReason {
	if o == nil {
		return nil
	}
	return o.LeavingReason
}

func (o *Employee) GetEmployeeNumber() *string {
	if o == nil {
		return nil
	}
	return o.EmployeeNumber
}

func (o *Employee) GetEmploymentStatus() *EmploymentStatus {
	if o == nil {
		return nil
	}
	return o.EmploymentStatus
}

func (o *Employee) GetEmploymentRole() *EmploymentRole {
	if o == nil {
		return nil
	}
	return o.EmploymentRole
}

func (o *Employee) GetEthnicity() *string {
	if o == nil {
		return nil
	}
	return o.Ethnicity
}

func (o *Employee) GetManager() *Manager {
	if o == nil {
		return nil
	}
	return o.Manager
}

func (o *Employee) GetDirectReports() []string {
	if o == nil {
		return nil
	}
	return o.DirectReports
}

func (o *Employee) GetSocialSecurityNumber() *string {
	if o == nil {
		return nil
	}
	return o.SocialSecurityNumber
}

func (o *Employee) GetBirthday() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *Employee) GetDeceasedOn() *types.Date {
	if o == nil {
		return nil
	}
	return o.DeceasedOn
}

func (o *Employee) GetCountryOfBirth() *string {
	if o == nil {
		return nil
	}
	return o.CountryOfBirth
}

func (o *Employee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Employee) GetGender() *Gender {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *Employee) GetPronouns() *string {
	if o == nil {
		return nil
	}
	return o.Pronouns
}

func (o *Employee) GetPreferredLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PreferredLanguage
}

func (o *Employee) GetLanguages() []*string {
	if o == nil {
		return nil
	}
	return o.Languages
}

func (o *Employee) GetNationalities() []*string {
	if o == nil {
		return nil
	}
	return o.Nationalities
}

func (o *Employee) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *Employee) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *Employee) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *Employee) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *Employee) GetRecordURL() *string {
	if o == nil {
		return nil
	}
	return o.RecordURL
}

func (o *Employee) GetJobs() []EmployeeJob {
	if o == nil {
		return nil
	}
	return o.Jobs
}

func (o *Employee) GetCompensations() []EmployeeCompensation {
	if o == nil {
		return nil
	}
	return o.Compensations
}

func (o *Employee) GetWorksRemote() *bool {
	if o == nil {
		return nil
	}
	return o.WorksRemote
}

func (o *Employee) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *Employee) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *Employee) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *Employee) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Employee) GetSocialLinks() []SocialLink {
	if o == nil {
		return nil
	}
	return o.SocialLinks
}

func (o *Employee) GetBankAccounts() []BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccounts
}

func (o *Employee) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *Employee) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *Employee) GetDietaryPreference() *string {
	if o == nil {
		return nil
	}
	return o.DietaryPreference
}

func (o *Employee) GetFoodAllergies() []string {
	if o == nil {
		return nil
	}
	return o.FoodAllergies
}

func (o *Employee) GetProbationPeriod() *ProbationPeriod {
	if o == nil {
		return nil
	}
	return o.ProbationPeriod
}

func (o *Employee) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Employee) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Employee) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Employee) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *Employee) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Employee) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Employee) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Employee) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Employee) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type EmployeeInput struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
	// The name used to display the employee, often a combination of their first and last names.
	DisplayName *string `json:"display_name,omitempty"`
	// The name the employee prefers to be addressed by, which may be different from their legal name.
	PreferredName *string `json:"preferred_name,omitempty"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials *string `json:"initials,omitempty"`
	// A formal salutation for the person. For example, 'Mr', 'Mrs'
	Salutation *string `json:"salutation,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The marital status of the employee.
	MaritalStatus *string      `json:"marital_status,omitempty"`
	Partner       *PersonInput `json:"partner,omitempty"`
	// The division the person is currently in. Usually a collection of departments or teams or regions.
	Division *string `json:"division,omitempty"`
	// Unique identifier of the division this employee belongs to.
	DivisionID *string `json:"division_id,omitempty"`
	// The department the person is currently in. [Deprecated](https://developers.apideck.com/changelog) in favor of the dedicated department_id and department_name field.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Department *string `json:"department,omitempty"`
	// Unique identifier of the department ID this employee belongs to.
	DepartmentID *string `json:"department_id,omitempty"`
	// Name of the department this employee belongs to.
	DepartmentName *string `json:"department_name,omitempty"`
	// The team the person is currently in.
	Team *Team `json:"team,omitempty"`
	// The unique identifier of the company.
	CompanyID *string `json:"company_id,omitempty"`
	// The name of the company.
	CompanyName *string `json:"company_name,omitempty"`
	// A Start Date is the date that the employee started working at the company
	EmploymentStartDate *string `json:"employment_start_date,omitempty"`
	// An End Date is the date that the employee ended working at the company
	EmploymentEndDate *string `json:"employment_end_date,omitempty"`
	// The reason because the employment ended.
	LeavingReason *LeavingReason `json:"leaving_reason,omitempty"`
	// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
	EmployeeNumber *string `json:"employee_number,omitempty"`
	// The employment status of the employee, indicating whether they are currently employed, inactive, terminated, or in another status.
	EmploymentStatus *EmploymentStatus `json:"employment_status,omitempty"`
	EmploymentRole   *EmploymentRole   `json:"employment_role,omitempty"`
	// The ethnicity of the employee
	Ethnicity *string  `json:"ethnicity,omitempty"`
	Manager   *Manager `json:"manager,omitempty"`
	// Direct reports is an array of ids that reflect the individuals in an organizational hierarchy who are directly supervised by this specific employee.
	DirectReports []string `json:"direct_reports,omitempty"`
	// A unique identifier assigned by the government. This field is considered sensitive information and may be subject to special security and privacy restrictions.
	SocialSecurityNumber *string `json:"social_security_number,omitempty"`
	// The date of birth of the person.
	Birthday *types.Date `json:"birthday,omitempty"`
	// The date the person deceased.
	DeceasedOn *types.Date `json:"deceased_on,omitempty"`
	// Country code according to ISO 3166-1 alpha-2.
	CountryOfBirth *string `json:"country_of_birth,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// The gender represents the gender identity of a person.
	Gender *Gender `json:"gender,omitempty"`
	// The preferred pronouns of the person.
	Pronouns *string `json:"pronouns,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	PreferredLanguage *string   `json:"preferred_language,omitempty"`
	Languages         []*string `json:"languages,omitempty"`
	Nationalities     []*string `json:"nationalities,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// The time zone related to the resource. The value is a string containing a standard time zone identifier, e.g. Europe/London.
	Timezone *string `json:"timezone,omitempty"`
	// When the employee is imported as a new hire, this field indicates what system (e.g. the name of the ATS) this employee was imported from.
	Source *string `json:"source,omitempty"`
	// Unique identifier of the employee in the system this employee was imported from (e.g. the ID in the ATS).
	SourceID      *string                     `json:"source_id,omitempty"`
	RecordURL     *string                     `json:"record_url,omitempty"`
	Jobs          []EmployeeJobInput          `json:"jobs,omitempty"`
	Compensations []EmployeeCompensationInput `json:"compensations,omitempty"`
	// Indicates if the employee works from a remote location.
	WorksRemote  *bool         `json:"works_remote,omitempty"`
	Addresses    []Address     `json:"addresses,omitempty"`
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	Emails       []Email       `json:"emails,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	SocialLinks  []SocialLink  `json:"social_links,omitempty"`
	BankAccounts []BankAccount `json:"bank_accounts,omitempty"`
	TaxCode      *string       `json:"tax_code,omitempty"`
	TaxID        *string       `json:"tax_id,omitempty"`
	// Indicate the employee's dietary preference.
	DietaryPreference *string `json:"dietary_preference,omitempty"`
	// Indicate the employee's food allergies.
	FoodAllergies   []string         `json:"food_allergies,omitempty"`
	ProbationPeriod *ProbationPeriod `json:"probation_period,omitempty"`
	Tags            []string         `json:"tags,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Flag to indicate if the object is deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e EmployeeInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmployeeInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmployeeInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EmployeeInput) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *EmployeeInput) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *EmployeeInput) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *EmployeeInput) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *EmployeeInput) GetPreferredName() *string {
	if o == nil {
		return nil
	}
	return o.PreferredName
}

func (o *EmployeeInput) GetInitials() *string {
	if o == nil {
		return nil
	}
	return o.Initials
}

func (o *EmployeeInput) GetSalutation() *string {
	if o == nil {
		return nil
	}
	return o.Salutation
}

func (o *EmployeeInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EmployeeInput) GetMaritalStatus() *string {
	if o == nil {
		return nil
	}
	return o.MaritalStatus
}

func (o *EmployeeInput) GetPartner() *PersonInput {
	if o == nil {
		return nil
	}
	return o.Partner
}

func (o *EmployeeInput) GetDivision() *string {
	if o == nil {
		return nil
	}
	return o.Division
}

func (o *EmployeeInput) GetDivisionID() *string {
	if o == nil {
		return nil
	}
	return o.DivisionID
}

func (o *EmployeeInput) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *EmployeeInput) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *EmployeeInput) GetDepartmentName() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentName
}

func (o *EmployeeInput) GetTeam() *Team {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *EmployeeInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *EmployeeInput) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *EmployeeInput) GetEmploymentStartDate() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentStartDate
}

func (o *EmployeeInput) GetEmploymentEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentEndDate
}

func (o *EmployeeInput) GetLeavingReason() *LeavingReason {
	if o == nil {
		return nil
	}
	return o.LeavingReason
}

func (o *EmployeeInput) GetEmployeeNumber() *string {
	if o == nil {
		return nil
	}
	return o.EmployeeNumber
}

func (o *EmployeeInput) GetEmploymentStatus() *EmploymentStatus {
	if o == nil {
		return nil
	}
	return o.EmploymentStatus
}

func (o *EmployeeInput) GetEmploymentRole() *EmploymentRole {
	if o == nil {
		return nil
	}
	return o.EmploymentRole
}

func (o *EmployeeInput) GetEthnicity() *string {
	if o == nil {
		return nil
	}
	return o.Ethnicity
}

func (o *EmployeeInput) GetManager() *Manager {
	if o == nil {
		return nil
	}
	return o.Manager
}

func (o *EmployeeInput) GetDirectReports() []string {
	if o == nil {
		return nil
	}
	return o.DirectReports
}

func (o *EmployeeInput) GetSocialSecurityNumber() *string {
	if o == nil {
		return nil
	}
	return o.SocialSecurityNumber
}

func (o *EmployeeInput) GetBirthday() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *EmployeeInput) GetDeceasedOn() *types.Date {
	if o == nil {
		return nil
	}
	return o.DeceasedOn
}

func (o *EmployeeInput) GetCountryOfBirth() *string {
	if o == nil {
		return nil
	}
	return o.CountryOfBirth
}

func (o *EmployeeInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EmployeeInput) GetGender() *Gender {
	if o == nil {
		return nil
	}
	return o.Gender
}

func (o *EmployeeInput) GetPronouns() *string {
	if o == nil {
		return nil
	}
	return o.Pronouns
}

func (o *EmployeeInput) GetPreferredLanguage() *string {
	if o == nil {
		return nil
	}
	return o.PreferredLanguage
}

func (o *EmployeeInput) GetLanguages() []*string {
	if o == nil {
		return nil
	}
	return o.Languages
}

func (o *EmployeeInput) GetNationalities() []*string {
	if o == nil {
		return nil
	}
	return o.Nationalities
}

func (o *EmployeeInput) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *EmployeeInput) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *EmployeeInput) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *EmployeeInput) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *EmployeeInput) GetRecordURL() *string {
	if o == nil {
		return nil
	}
	return o.RecordURL
}

func (o *EmployeeInput) GetJobs() []EmployeeJobInput {
	if o == nil {
		return nil
	}
	return o.Jobs
}

func (o *EmployeeInput) GetCompensations() []EmployeeCompensationInput {
	if o == nil {
		return nil
	}
	return o.Compensations
}

func (o *EmployeeInput) GetWorksRemote() *bool {
	if o == nil {
		return nil
	}
	return o.WorksRemote
}

func (o *EmployeeInput) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *EmployeeInput) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *EmployeeInput) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *EmployeeInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *EmployeeInput) GetSocialLinks() []SocialLink {
	if o == nil {
		return nil
	}
	return o.SocialLinks
}

func (o *EmployeeInput) GetBankAccounts() []BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccounts
}

func (o *EmployeeInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *EmployeeInput) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *EmployeeInput) GetDietaryPreference() *string {
	if o == nil {
		return nil
	}
	return o.DietaryPreference
}

func (o *EmployeeInput) GetFoodAllergies() []string {
	if o == nil {
		return nil
	}
	return o.FoodAllergies
}

func (o *EmployeeInput) GetProbationPeriod() *ProbationPeriod {
	if o == nil {
		return nil
	}
	return o.ProbationPeriod
}

func (o *EmployeeInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *EmployeeInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *EmployeeInput) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *EmployeeInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
