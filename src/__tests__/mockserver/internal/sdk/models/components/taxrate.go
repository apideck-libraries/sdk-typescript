// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type Component struct {
	ID       *string  `json:"id,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Rate     *float64 `json:"rate,omitempty"`
	Compound *bool    `json:"compound,omitempty"`
}

func (o *Component) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Component) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Component) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *Component) GetCompound() *bool {
	if o == nil {
		return nil
	}
	return o.Compound
}

// TaxRateStatus - Tax rate status
type TaxRateStatus string

const (
	TaxRateStatusActive   TaxRateStatus = "active"
	TaxRateStatusInactive TaxRateStatus = "inactive"
	TaxRateStatusArchived TaxRateStatus = "archived"
)

func (e TaxRateStatus) ToPointer() *TaxRateStatus {
	return &e
}
func (e *TaxRateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "archived":
		*e = TaxRateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxRateStatus: %v", v)
	}
}

type TaxRateSubsidiary struct {
	// The ID of the subsidiary.
	ID *string `json:"id,omitempty"`
}

func (o *TaxRateSubsidiary) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type TaxRate struct {
	// ID assigned to identify this tax rate.
	ID *string `json:"id,omitempty"`
	// Name assigned to identify this tax rate.
	Name *string `json:"name,omitempty"`
	// Tax code assigned to identify this tax rate.
	Code *string `json:"code,omitempty"`
	// Description of tax rate
	Description *string `json:"description,omitempty"`
	// Effective tax rate
	EffectiveTaxRate *float64 `json:"effective_tax_rate,omitempty"`
	// Not compounded sum of the components of a tax rate
	TotalTaxRate *float64 `json:"total_tax_rate,omitempty"`
	// Unique identifier for the account for tax collected.
	TaxPayableAccountID *string `json:"tax_payable_account_id,omitempty"`
	// Unique identifier for the account for tax remitted.
	TaxRemittedAccountID *string     `json:"tax_remitted_account_id,omitempty"`
	Components           []Component `json:"components,omitempty"`
	// Tax type used to indicate the source of tax collected or paid
	Type *string `json:"type,omitempty"`
	// Report Tax type to aggregate tax collected or paid for reporting purposes
	ReportTaxType *string `json:"report_tax_type,omitempty"`
	// ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
	OriginalTaxRateID *string `json:"original_tax_rate_id,omitempty"`
	// Tax rate status
	Status *TaxRateStatus `json:"status,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
	// The subsidiaries this belongs to.
	Subsidiaries []TaxRateSubsidiary `json:"subsidiaries,omitempty"`
	CustomFields []CustomField       `json:"custom_fields,omitempty"`
}

func (t TaxRate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaxRate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TaxRate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TaxRate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TaxRate) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *TaxRate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaxRate) GetEffectiveTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.EffectiveTaxRate
}

func (o *TaxRate) GetTotalTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTaxRate
}

func (o *TaxRate) GetTaxPayableAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TaxPayableAccountID
}

func (o *TaxRate) GetTaxRemittedAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TaxRemittedAccountID
}

func (o *TaxRate) GetComponents() []Component {
	if o == nil {
		return nil
	}
	return o.Components
}

func (o *TaxRate) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TaxRate) GetReportTaxType() *string {
	if o == nil {
		return nil
	}
	return o.ReportTaxType
}

func (o *TaxRate) GetOriginalTaxRateID() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTaxRateID
}

func (o *TaxRate) GetStatus() *TaxRateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TaxRate) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *TaxRate) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *TaxRate) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *TaxRate) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *TaxRate) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *TaxRate) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *TaxRate) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

func (o *TaxRate) GetSubsidiaries() []TaxRateSubsidiary {
	if o == nil {
		return nil
	}
	return o.Subsidiaries
}

func (o *TaxRate) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type TaxRateInput struct {
	// ID assigned to identify this tax rate.
	ID *string `json:"id,omitempty"`
	// Name assigned to identify this tax rate.
	Name *string `json:"name,omitempty"`
	// Tax code assigned to identify this tax rate.
	Code *string `json:"code,omitempty"`
	// Description of tax rate
	Description *string `json:"description,omitempty"`
	// Effective tax rate
	EffectiveTaxRate *float64 `json:"effective_tax_rate,omitempty"`
	// Not compounded sum of the components of a tax rate
	TotalTaxRate *float64 `json:"total_tax_rate,omitempty"`
	// Unique identifier for the account for tax collected.
	TaxPayableAccountID *string `json:"tax_payable_account_id,omitempty"`
	// Unique identifier for the account for tax remitted.
	TaxRemittedAccountID *string     `json:"tax_remitted_account_id,omitempty"`
	Components           []Component `json:"components,omitempty"`
	// Tax type used to indicate the source of tax collected or paid
	Type *string `json:"type,omitempty"`
	// Report Tax type to aggregate tax collected or paid for reporting purposes
	ReportTaxType *string `json:"report_tax_type,omitempty"`
	// ID of the original tax rate from which the new tax rate is derived. Helps to understand the relationship between corresponding tax rate entities.
	OriginalTaxRateID *string `json:"original_tax_rate_id,omitempty"`
	// Tax rate status
	Status *TaxRateStatus `json:"status,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
	// The subsidiaries this belongs to.
	Subsidiaries []TaxRateSubsidiary `json:"subsidiaries,omitempty"`
	CustomFields []CustomField       `json:"custom_fields,omitempty"`
}

func (o *TaxRateInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *TaxRateInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TaxRateInput) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *TaxRateInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TaxRateInput) GetEffectiveTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.EffectiveTaxRate
}

func (o *TaxRateInput) GetTotalTaxRate() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTaxRate
}

func (o *TaxRateInput) GetTaxPayableAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TaxPayableAccountID
}

func (o *TaxRateInput) GetTaxRemittedAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TaxRemittedAccountID
}

func (o *TaxRateInput) GetComponents() []Component {
	if o == nil {
		return nil
	}
	return o.Components
}

func (o *TaxRateInput) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TaxRateInput) GetReportTaxType() *string {
	if o == nil {
		return nil
	}
	return o.ReportTaxType
}

func (o *TaxRateInput) GetOriginalTaxRateID() *string {
	if o == nil {
		return nil
	}
	return o.OriginalTaxRateID
}

func (o *TaxRateInput) GetStatus() *TaxRateStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TaxRateInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *TaxRateInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

func (o *TaxRateInput) GetSubsidiaries() []TaxRateSubsidiary {
	if o == nil {
		return nil
	}
	return o.Subsidiaries
}

func (o *TaxRateInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}
