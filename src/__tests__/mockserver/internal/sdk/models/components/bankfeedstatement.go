// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// StatementStatus - The current status of the bank feed statement.
type StatementStatus string

const (
	StatementStatusPending  StatementStatus = "pending"
	StatementStatusRejected StatementStatus = "rejected"
	StatementStatusSuccess  StatementStatus = "success"
)

func (e StatementStatus) ToPointer() *StatementStatus {
	return &e
}
func (e *StatementStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "rejected":
		fallthrough
	case "success":
		*e = StatementStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatementStatus: %v", v)
	}
}

// BankFeedStatementTransactionType - Type of transaction.
type BankFeedStatementTransactionType string

const (
	BankFeedStatementTransactionTypeCredit   BankFeedStatementTransactionType = "credit"
	BankFeedStatementTransactionTypeDebit    BankFeedStatementTransactionType = "debit"
	BankFeedStatementTransactionTypeDeposit  BankFeedStatementTransactionType = "deposit"
	BankFeedStatementTransactionTypeTransfer BankFeedStatementTransactionType = "transfer"
	BankFeedStatementTransactionTypePayment  BankFeedStatementTransactionType = "payment"
	BankFeedStatementTransactionTypeOther    BankFeedStatementTransactionType = "other"
)

func (e BankFeedStatementTransactionType) ToPointer() *BankFeedStatementTransactionType {
	return &e
}
func (e *BankFeedStatementTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "credit":
		fallthrough
	case "debit":
		fallthrough
	case "deposit":
		fallthrough
	case "transfer":
		fallthrough
	case "payment":
		fallthrough
	case "other":
		*e = BankFeedStatementTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankFeedStatementTransactionType: %v", v)
	}
}

type Transaction struct {
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	PostedDate time.Time `json:"posted_date"`
	// A description of the transaction.
	Description *string `json:"description,omitempty"`
	// The amount of the transaction.
	Amount float64 `json:"amount"`
	// Whether the amount is a credit or debit.
	CreditOrDebit CreditOrDebit `json:"credit_or_debit"`
	// The ID of the source transaction.
	SourceTransactionID string `json:"source_transaction_id"`
	// The counterparty of the transaction.
	Counterparty *string `json:"counterparty,omitempty"`
	// The reference of the transaction.
	Reference *string `json:"reference,omitempty"`
	// Type of transaction.
	TransactionType *BankFeedStatementTransactionType `json:"transaction_type,omitempty"`
}

func (t Transaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Transaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Transaction) GetPostedDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.PostedDate
}

func (o *Transaction) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Transaction) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Transaction) GetCreditOrDebit() CreditOrDebit {
	if o == nil {
		return CreditOrDebit("")
	}
	return o.CreditOrDebit
}

func (o *Transaction) GetSourceTransactionID() string {
	if o == nil {
		return ""
	}
	return o.SourceTransactionID
}

func (o *Transaction) GetCounterparty() *string {
	if o == nil {
		return nil
	}
	return o.Counterparty
}

func (o *Transaction) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Transaction) GetTransactionType() *BankFeedStatementTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

type BankFeedStatement struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// The ID of the bank feed account this statement belongs to.
	BankFeedAccountID *string `json:"bank_feed_account_id,omitempty"`
	// The current status of the bank feed statement.
	Status *StatementStatus `json:"status,omitempty"`
	// Start date of the bank feed statement.
	StartDate *time.Time `json:"start_date,omitempty"`
	// End date of the bank feed statement.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Balance amount at the start of the period.
	StartBalance *float64 `json:"start_balance,omitempty"`
	// Whether the amount is a credit or debit.
	StartBalanceCreditOrDebit *CreditOrDebit `json:"start_balance_credit_or_debit,omitempty"`
	// Balance amount at the end of the period.
	EndBalance *float64 `json:"end_balance,omitempty"`
	// Whether the amount is a credit or debit.
	EndBalanceCreditOrDebit *CreditOrDebit `json:"end_balance_credit_or_debit,omitempty"`
	// List of transactions in the bank feed statement.
	Transactions []Transaction `json:"transactions,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
}

func (b BankFeedStatement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankFeedStatement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankFeedStatement) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BankFeedStatement) GetBankFeedAccountID() *string {
	if o == nil {
		return nil
	}
	return o.BankFeedAccountID
}

func (o *BankFeedStatement) GetStatus() *StatementStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BankFeedStatement) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *BankFeedStatement) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *BankFeedStatement) GetStartBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.StartBalance
}

func (o *BankFeedStatement) GetStartBalanceCreditOrDebit() *CreditOrDebit {
	if o == nil {
		return nil
	}
	return o.StartBalanceCreditOrDebit
}

func (o *BankFeedStatement) GetEndBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.EndBalance
}

func (o *BankFeedStatement) GetEndBalanceCreditOrDebit() *CreditOrDebit {
	if o == nil {
		return nil
	}
	return o.EndBalanceCreditOrDebit
}

func (o *BankFeedStatement) GetTransactions() []Transaction {
	if o == nil {
		return nil
	}
	return o.Transactions
}

func (o *BankFeedStatement) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *BankFeedStatement) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *BankFeedStatement) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *BankFeedStatement) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

type BankFeedStatementInput struct {
	// The ID of the bank feed account this statement belongs to.
	BankFeedAccountID *string `json:"bank_feed_account_id,omitempty"`
	// The current status of the bank feed statement.
	Status *StatementStatus `json:"status,omitempty"`
	// Start date of the bank feed statement.
	StartDate *time.Time `json:"start_date,omitempty"`
	// End date of the bank feed statement.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Balance amount at the start of the period.
	StartBalance *float64 `json:"start_balance,omitempty"`
	// Whether the amount is a credit or debit.
	StartBalanceCreditOrDebit *CreditOrDebit `json:"start_balance_credit_or_debit,omitempty"`
	// Balance amount at the end of the period.
	EndBalance *float64 `json:"end_balance,omitempty"`
	// Whether the amount is a credit or debit.
	EndBalanceCreditOrDebit *CreditOrDebit `json:"end_balance_credit_or_debit,omitempty"`
	// List of transactions in the bank feed statement.
	Transactions []Transaction `json:"transactions,omitempty"`
}

func (b BankFeedStatementInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankFeedStatementInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankFeedStatementInput) GetBankFeedAccountID() *string {
	if o == nil {
		return nil
	}
	return o.BankFeedAccountID
}

func (o *BankFeedStatementInput) GetStatus() *StatementStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BankFeedStatementInput) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *BankFeedStatementInput) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *BankFeedStatementInput) GetStartBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.StartBalance
}

func (o *BankFeedStatementInput) GetStartBalanceCreditOrDebit() *CreditOrDebit {
	if o == nil {
		return nil
	}
	return o.StartBalanceCreditOrDebit
}

func (o *BankFeedStatementInput) GetEndBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.EndBalance
}

func (o *BankFeedStatementInput) GetEndBalanceCreditOrDebit() *CreditOrDebit {
	if o == nil {
		return nil
	}
	return o.EndBalanceCreditOrDebit
}

func (o *BankFeedStatementInput) GetTransactions() []Transaction {
	if o == nil {
		return nil
	}
	return o.Transactions
}
