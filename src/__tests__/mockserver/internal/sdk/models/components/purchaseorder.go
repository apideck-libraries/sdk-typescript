// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

type PurchaseOrderStatus string

const (
	PurchaseOrderStatusDraft   PurchaseOrderStatus = "draft"
	PurchaseOrderStatusOpen    PurchaseOrderStatus = "open"
	PurchaseOrderStatusClosed  PurchaseOrderStatus = "closed"
	PurchaseOrderStatusDeleted PurchaseOrderStatus = "deleted"
	PurchaseOrderStatusBilled  PurchaseOrderStatus = "billed"
	PurchaseOrderStatusOther   PurchaseOrderStatus = "other"
)

func (e PurchaseOrderStatus) ToPointer() *PurchaseOrderStatus {
	return &e
}
func (e *PurchaseOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "deleted":
		fallthrough
	case "billed":
		fallthrough
	case "other":
		*e = PurchaseOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseOrderStatus: %v", v)
	}
}

// PurchaseOrderAmortizationType - Type of amortization
type PurchaseOrderAmortizationType string

const (
	PurchaseOrderAmortizationTypeManual   PurchaseOrderAmortizationType = "manual"
	PurchaseOrderAmortizationTypeReceipt  PurchaseOrderAmortizationType = "receipt"
	PurchaseOrderAmortizationTypeSchedule PurchaseOrderAmortizationType = "schedule"
	PurchaseOrderAmortizationTypeOther    PurchaseOrderAmortizationType = "other"
)

func (e PurchaseOrderAmortizationType) ToPointer() *PurchaseOrderAmortizationType {
	return &e
}
func (e *PurchaseOrderAmortizationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "receipt":
		fallthrough
	case "schedule":
		fallthrough
	case "other":
		*e = PurchaseOrderAmortizationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseOrderAmortizationType: %v", v)
	}
}

type PurchaseOrder struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Display ID of the purchase order
	DisplayID *string `json:"display_id,omitempty"`
	// A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
	PoNumber *string `json:"po_number,omitempty"`
	// Optional purchase order reference.
	Reference *string `json:"reference,omitempty"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplier `json:"supplier,omitempty"`
	// The ID of the subsidiary
	SubsidiaryID *string `json:"subsidiary_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string              `json:"department_id,omitempty"`
	Status       *PurchaseOrderStatus `json:"status,omitempty"`
	// Date purchase order was issued - YYYY-MM-DD.
	IssuedDate *types.Date `json:"issued_date,omitempty"`
	// The date on which the purchase order is to be delivered - YYYY-MM-DD.
	DeliveryDate *types.Date `json:"delivery_date,omitempty"`
	// The date on which the order is expected to arrive - YYYY-MM-DD.
	ExpectedArrivalDate *types.Date `json:"expected_arrival_date,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Total amount of invoice, including tax.
	Total *float64 `json:"total,omitempty"`
	// Amounts are including tax
	TaxInclusive    *bool                `json:"tax_inclusive,omitempty"`
	LineItems       []InvoiceLineItem    `json:"line_items,omitempty"`
	BillingAddress  *Address             `json:"billing_address,omitempty"`
	ShippingAddress *Address             `json:"shipping_address,omitempty"`
	LedgerAccount   *LinkedLedgerAccount `json:"ledger_account,omitempty"`
	// Optional purchase order template
	TemplateID *string `json:"template_id,omitempty"`
	// Discount percentage applied to this transaction.
	DiscountPercentage *float64     `json:"discount_percentage,omitempty"`
	BankAccount        *BankAccount `json:"bank_account,omitempty"`
	// Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
	AccountingByRow *bool `json:"accounting_by_row,omitempty"`
	// The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Terms of payment.
	Terms *string `json:"terms,omitempty"`
	// Type of amortization
	AmortizationType *PurchaseOrderAmortizationType `json:"amortization_type,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Method of tax calculation
	TaxMethod *string `json:"tax_method,omitempty"`
	// Method of issuance of the purchase order
	IssuedMethod *string `json:"issued_method,omitempty"`
	// Email address of the person who issued the purchase order
	IssuedEmail *string `json:"issued_email,omitempty"`
	// The channel through which the transaction is processed.
	Channel *string `json:"channel,omitempty"`
	// Message for the supplier. This text appears on the Purchase Order.
	Memo *string `json:"memo,omitempty"`
	// Internal notes for the purchase order.
	Notes *string `json:"notes,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	CustomFields   []CustomField  `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (p PurchaseOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PurchaseOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PurchaseOrder) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PurchaseOrder) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *PurchaseOrder) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *PurchaseOrder) GetPoNumber() *string {
	if o == nil {
		return nil
	}
	return o.PoNumber
}

func (o *PurchaseOrder) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *PurchaseOrder) GetSupplier() *LinkedSupplier {
	if o == nil {
		return nil
	}
	return o.Supplier
}

func (o *PurchaseOrder) GetSubsidiaryID() *string {
	if o == nil {
		return nil
	}
	return o.SubsidiaryID
}

func (o *PurchaseOrder) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *PurchaseOrder) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *PurchaseOrder) GetStatus() *PurchaseOrderStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PurchaseOrder) GetIssuedDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.IssuedDate
}

func (o *PurchaseOrder) GetDeliveryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DeliveryDate
}

func (o *PurchaseOrder) GetExpectedArrivalDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ExpectedArrivalDate
}

func (o *PurchaseOrder) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PurchaseOrder) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *PurchaseOrder) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *PurchaseOrder) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *PurchaseOrder) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *PurchaseOrder) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *PurchaseOrder) GetLineItems() []InvoiceLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *PurchaseOrder) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *PurchaseOrder) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *PurchaseOrder) GetLedgerAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.LedgerAccount
}

func (o *PurchaseOrder) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *PurchaseOrder) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *PurchaseOrder) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *PurchaseOrder) GetAccountingByRow() *bool {
	if o == nil {
		return nil
	}
	return o.AccountingByRow
}

func (o *PurchaseOrder) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *PurchaseOrder) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *PurchaseOrder) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *PurchaseOrder) GetAmortizationType() *PurchaseOrderAmortizationType {
	if o == nil {
		return nil
	}
	return o.AmortizationType
}

func (o *PurchaseOrder) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *PurchaseOrder) GetTaxMethod() *string {
	if o == nil {
		return nil
	}
	return o.TaxMethod
}

func (o *PurchaseOrder) GetIssuedMethod() *string {
	if o == nil {
		return nil
	}
	return o.IssuedMethod
}

func (o *PurchaseOrder) GetIssuedEmail() *string {
	if o == nil {
		return nil
	}
	return o.IssuedEmail
}

func (o *PurchaseOrder) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *PurchaseOrder) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *PurchaseOrder) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *PurchaseOrder) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *PurchaseOrder) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *PurchaseOrder) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *PurchaseOrder) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *PurchaseOrder) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *PurchaseOrder) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *PurchaseOrder) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PurchaseOrder) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PurchaseOrder) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type PurchaseOrderInput struct {
	// Display ID of the purchase order
	DisplayID *string `json:"display_id,omitempty"`
	// A PO Number uniquely identifies a purchase order and is generally defined by the buyer.
	PoNumber *string `json:"po_number,omitempty"`
	// Optional purchase order reference.
	Reference *string `json:"reference,omitempty"`
	// The supplier this entity is linked to.
	Supplier *LinkedSupplierInput `json:"supplier,omitempty"`
	// The ID of the subsidiary
	SubsidiaryID *string `json:"subsidiary_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string              `json:"department_id,omitempty"`
	Status       *PurchaseOrderStatus `json:"status,omitempty"`
	// Date purchase order was issued - YYYY-MM-DD.
	IssuedDate *types.Date `json:"issued_date,omitempty"`
	// The date on which the purchase order is to be delivered - YYYY-MM-DD.
	DeliveryDate *types.Date `json:"delivery_date,omitempty"`
	// The date on which the order is expected to arrive - YYYY-MM-DD.
	ExpectedArrivalDate *types.Date `json:"expected_arrival_date,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Total amount of invoice, including tax.
	Total *float64 `json:"total,omitempty"`
	// Amounts are including tax
	TaxInclusive    *bool                     `json:"tax_inclusive,omitempty"`
	LineItems       []InvoiceLineItemInput    `json:"line_items,omitempty"`
	BillingAddress  *Address                  `json:"billing_address,omitempty"`
	ShippingAddress *Address                  `json:"shipping_address,omitempty"`
	LedgerAccount   *LinkedLedgerAccountInput `json:"ledger_account,omitempty"`
	// Optional purchase order template
	TemplateID *string `json:"template_id,omitempty"`
	// Discount percentage applied to this transaction.
	DiscountPercentage *float64     `json:"discount_percentage,omitempty"`
	BankAccount        *BankAccount `json:"bank_account,omitempty"`
	// Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
	AccountingByRow *bool `json:"accounting_by_row,omitempty"`
	// The due date is the date on which a payment is scheduled to be received - YYYY-MM-DD.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Terms of payment.
	Terms *string `json:"terms,omitempty"`
	// Type of amortization
	AmortizationType *PurchaseOrderAmortizationType `json:"amortization_type,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Method of tax calculation
	TaxMethod *string `json:"tax_method,omitempty"`
	// Method of issuance of the purchase order
	IssuedMethod *string `json:"issued_method,omitempty"`
	// Email address of the person who issued the purchase order
	IssuedEmail *string `json:"issued_email,omitempty"`
	// The channel through which the transaction is processed.
	Channel *string `json:"channel,omitempty"`
	// Message for the supplier. This text appears on the Purchase Order.
	Memo *string `json:"memo,omitempty"`
	// Internal notes for the purchase order.
	Notes *string `json:"notes,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	CustomFields       []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (p PurchaseOrderInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PurchaseOrderInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PurchaseOrderInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *PurchaseOrderInput) GetPoNumber() *string {
	if o == nil {
		return nil
	}
	return o.PoNumber
}

func (o *PurchaseOrderInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *PurchaseOrderInput) GetSupplier() *LinkedSupplierInput {
	if o == nil {
		return nil
	}
	return o.Supplier
}

func (o *PurchaseOrderInput) GetSubsidiaryID() *string {
	if o == nil {
		return nil
	}
	return o.SubsidiaryID
}

func (o *PurchaseOrderInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *PurchaseOrderInput) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *PurchaseOrderInput) GetStatus() *PurchaseOrderStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PurchaseOrderInput) GetIssuedDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.IssuedDate
}

func (o *PurchaseOrderInput) GetDeliveryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DeliveryDate
}

func (o *PurchaseOrderInput) GetExpectedArrivalDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ExpectedArrivalDate
}

func (o *PurchaseOrderInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PurchaseOrderInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *PurchaseOrderInput) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *PurchaseOrderInput) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *PurchaseOrderInput) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *PurchaseOrderInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *PurchaseOrderInput) GetLineItems() []InvoiceLineItemInput {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *PurchaseOrderInput) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *PurchaseOrderInput) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *PurchaseOrderInput) GetLedgerAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.LedgerAccount
}

func (o *PurchaseOrderInput) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *PurchaseOrderInput) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *PurchaseOrderInput) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *PurchaseOrderInput) GetAccountingByRow() *bool {
	if o == nil {
		return nil
	}
	return o.AccountingByRow
}

func (o *PurchaseOrderInput) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *PurchaseOrderInput) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *PurchaseOrderInput) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *PurchaseOrderInput) GetAmortizationType() *PurchaseOrderAmortizationType {
	if o == nil {
		return nil
	}
	return o.AmortizationType
}

func (o *PurchaseOrderInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *PurchaseOrderInput) GetTaxMethod() *string {
	if o == nil {
		return nil
	}
	return o.TaxMethod
}

func (o *PurchaseOrderInput) GetIssuedMethod() *string {
	if o == nil {
		return nil
	}
	return o.IssuedMethod
}

func (o *PurchaseOrderInput) GetIssuedEmail() *string {
	if o == nil {
		return nil
	}
	return o.IssuedEmail
}

func (o *PurchaseOrderInput) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *PurchaseOrderInput) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *PurchaseOrderInput) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *PurchaseOrderInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *PurchaseOrderInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *PurchaseOrderInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *PurchaseOrderInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
