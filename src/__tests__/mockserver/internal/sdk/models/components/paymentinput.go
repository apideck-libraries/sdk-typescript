// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type PaymentInput struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The total amount of the transaction or record
	TotalAmount *float64 `json:"total_amount"`
	// Optional transaction reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// Optional reference message returned by payment method on processing
	PaymentMethodReference *string `json:"payment_method_reference,omitempty"`
	// A unique identifier for an object.
	PaymentMethodID *string `json:"payment_method_id,omitempty"`
	// Type of accounts receivable account.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountsReceivableAccountType *string `json:"accounts_receivable_account_type,omitempty"`
	// Unique identifier for the account to allocate payment to.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountsReceivableAccountID *string                   `json:"accounts_receivable_account_id,omitempty"`
	Account                     *LinkedLedgerAccountInput `json:"account,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// The supplier this entity is linked to.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Supplier *DeprecatedLinkedSupplierInput `json:"supplier,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Indicates if the transaction has been reconciled.
	Reconciled *bool `json:"reconciled,omitempty"`
	// Status of payment
	Status *PaymentStatus `json:"status,omitempty"`
	// Type of payment
	Type        *PaymentType      `json:"type,omitempty"`
	Allocations []AllocationInput `json:"allocations,omitempty"`
	// Note associated with the transaction
	Note *string `json:"note,omitempty"`
	// Number associated with the transaction
	Number *string `json:"number,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	CustomFields       []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// Id to be displayed.
	DisplayID *string `json:"display_id,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (p PaymentInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *PaymentInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *PaymentInput) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *PaymentInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *PaymentInput) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *PaymentInput) GetPaymentMethodReference() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodReference
}

func (o *PaymentInput) GetPaymentMethodID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethodID
}

func (o *PaymentInput) GetAccountsReceivableAccountType() *string {
	if o == nil {
		return nil
	}
	return o.AccountsReceivableAccountType
}

func (o *PaymentInput) GetAccountsReceivableAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountsReceivableAccountID
}

func (o *PaymentInput) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *PaymentInput) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *PaymentInput) GetCustomer() *LinkedCustomerInput {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *PaymentInput) GetSupplier() *DeprecatedLinkedSupplierInput {
	if o == nil {
		return nil
	}
	return o.Supplier
}

func (o *PaymentInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *PaymentInput) GetReconciled() *bool {
	if o == nil {
		return nil
	}
	return o.Reconciled
}

func (o *PaymentInput) GetStatus() *PaymentStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentInput) GetType() *PaymentType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PaymentInput) GetAllocations() []AllocationInput {
	if o == nil {
		return nil
	}
	return o.Allocations
}

func (o *PaymentInput) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *PaymentInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *PaymentInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *PaymentInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *PaymentInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *PaymentInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *PaymentInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
