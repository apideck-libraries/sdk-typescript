// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type FormFieldOptionType string

const (
	FormFieldOptionTypeSimple FormFieldOptionType = "simple"
	FormFieldOptionTypeGroup  FormFieldOptionType = "group"
)

type FormFieldOption struct {
	SimpleFormFieldOption *SimpleFormFieldOption `queryParam:"inline"`
	FormFieldOptionGroup  *FormFieldOptionGroup  `queryParam:"inline"`

	Type FormFieldOptionType
}

func CreateFormFieldOptionSimple(simple SimpleFormFieldOption) FormFieldOption {
	typ := FormFieldOptionTypeSimple

	typStr := SimpleFormFieldOptionOptionType(typ)
	simple.OptionType = typStr

	return FormFieldOption{
		SimpleFormFieldOption: &simple,
		Type:                  typ,
	}
}

func CreateFormFieldOptionGroup(group FormFieldOptionGroup) FormFieldOption {
	typ := FormFieldOptionTypeGroup

	typStr := FormFieldOptionGroupOptionType(typ)
	group.OptionType = typStr

	return FormFieldOption{
		FormFieldOptionGroup: &group,
		Type:                 typ,
	}
}

func (u *FormFieldOption) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		OptionType string `json:"option_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.OptionType {
	case "simple":
		simpleFormFieldOption := new(SimpleFormFieldOption)
		if err := utils.UnmarshalJSON(data, &simpleFormFieldOption, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OptionType == simple) type SimpleFormFieldOption within FormFieldOption: %w", string(data), err)
		}

		u.SimpleFormFieldOption = simpleFormFieldOption
		u.Type = FormFieldOptionTypeSimple
		return nil
	case "group":
		formFieldOptionGroup := new(FormFieldOptionGroup)
		if err := utils.UnmarshalJSON(data, &formFieldOptionGroup, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (OptionType == group) type FormFieldOptionGroup within FormFieldOption: %w", string(data), err)
		}

		u.FormFieldOptionGroup = formFieldOptionGroup
		u.Type = FormFieldOptionTypeGroup
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FormFieldOption", string(data))
}

func (u FormFieldOption) MarshalJSON() ([]byte, error) {
	if u.SimpleFormFieldOption != nil {
		return utils.MarshalJSON(u.SimpleFormFieldOption, "", true)
	}

	if u.FormFieldOptionGroup != nil {
		return utils.MarshalJSON(u.FormFieldOptionGroup, "", true)
	}

	return nil, errors.New("could not marshal union type FormFieldOption: all fields are null")
}
