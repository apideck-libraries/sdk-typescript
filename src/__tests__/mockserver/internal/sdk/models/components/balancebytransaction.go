// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
)

// BalanceByTransactionTransactionType - Type of the transaction.
type BalanceByTransactionTransactionType string

const (
	BalanceByTransactionTransactionTypeInvoice     BalanceByTransactionTransactionType = "invoice"
	BalanceByTransactionTransactionTypeCreditNote  BalanceByTransactionTransactionType = "credit_note"
	BalanceByTransactionTransactionTypeBill        BalanceByTransactionTransactionType = "bill"
	BalanceByTransactionTransactionTypePayment     BalanceByTransactionTransactionType = "payment"
	BalanceByTransactionTransactionTypeBillPayment BalanceByTransactionTransactionType = "bill_payment"
)

func (e BalanceByTransactionTransactionType) ToPointer() *BalanceByTransactionTransactionType {
	return &e
}
func (e *BalanceByTransactionTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invoice":
		fallthrough
	case "credit_note":
		fallthrough
	case "bill":
		fallthrough
	case "payment":
		fallthrough
	case "bill_payment":
		*e = BalanceByTransactionTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BalanceByTransactionTransactionType: %v", v)
	}
}

type BalanceByTransaction struct {
	// Unique identifier for the transaction.
	TransactionID *string `json:"transaction_id,omitempty"`
	// Date of the transaction.
	TransactionDate *types.Date `json:"transaction_date,omitempty"`
	// Type of the transaction.
	TransactionType *BalanceByTransactionTransactionType `json:"transaction_type,omitempty"`
	// Due date of the transaction.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Original amount of the transaction.
	OriginalAmount *float64 `json:"original_amount,omitempty"`
	// Outstanding balance of the transaction.
	OutstandingBalance *float64 `json:"outstanding_balance,omitempty"`
	// Transaction number of the transaction.
	TransactionNumber *string `json:"transaction_number,omitempty"`
}

func (b BalanceByTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BalanceByTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BalanceByTransaction) GetTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.TransactionID
}

func (o *BalanceByTransaction) GetTransactionDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *BalanceByTransaction) GetTransactionType() *BalanceByTransactionTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

func (o *BalanceByTransaction) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *BalanceByTransaction) GetOriginalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.OriginalAmount
}

func (o *BalanceByTransaction) GetOutstandingBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.OutstandingBalance
}

func (o *BalanceByTransaction) GetTransactionNumber() *string {
	if o == nil {
		return nil
	}
	return o.TransactionNumber
}
