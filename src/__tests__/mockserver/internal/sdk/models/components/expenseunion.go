// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ExpensePaymentType3 - The type of payment for the expense.
type ExpensePaymentType3 string

const (
	ExpensePaymentType3Cash       ExpensePaymentType3 = "cash"
	ExpensePaymentType3Check      ExpensePaymentType3 = "check"
	ExpensePaymentType3CreditCard ExpensePaymentType3 = "credit_card"
	ExpensePaymentType3Other      ExpensePaymentType3 = "other"
)

func (e ExpensePaymentType3) ToPointer() *ExpensePaymentType3 {
	return &e
}
func (e *ExpensePaymentType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "check":
		fallthrough
	case "credit_card":
		fallthrough
	case "other":
		*e = ExpensePaymentType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpensePaymentType3: %v", v)
	}
}

// ExpenseType3 - The type of expense.
type ExpenseType3 string

const (
	ExpenseType3Expense ExpenseType3 = "expense"
	ExpenseType3Refund  ExpenseType3 = "refund"
)

func (e ExpenseType3) ToPointer() *ExpenseType3 {
	return &e
}
func (e *ExpenseType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expense":
		fallthrough
	case "refund":
		*e = ExpenseType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseType3: %v", v)
	}
}

// ExpenseStatus3 - Expense status
type ExpenseStatus3 string

const (
	ExpenseStatus3Draft  ExpenseStatus3 = "draft"
	ExpenseStatus3Posted ExpenseStatus3 = "posted"
)

func (e ExpenseStatus3) ToPointer() *ExpenseStatus3 {
	return &e
}
func (e *ExpenseStatus3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "posted":
		*e = ExpenseStatus3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseStatus3: %v", v)
	}
}

type Expense3 struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   *string              `json:"account_id,omitempty"`
	Account     *LinkedLedgerAccount `json:"account,omitempty"`
	BankAccount *LinkedBankAccount   `json:"bank_account"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType3 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType3 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string        `json:"memo,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItem `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// Expense status
	Status *ExpenseStatus3 `json:"status,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e Expense3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Expense3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "bank_account", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *Expense3) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Expense3) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Expense3) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *Expense3) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Expense3) GetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Expense3) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *Expense3) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *Expense3) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *Expense3) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Expense3) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Expense3) GetPaymentType() *ExpensePaymentType3 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *Expense3) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Expense3) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Expense3) GetType() *ExpenseType3 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Expense3) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *Expense3) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Expense3) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *Expense3) GetLineItems() []ExpenseLineItem {
	if o == nil {
		return []ExpenseLineItem{}
	}
	return o.LineItems
}

func (o *Expense3) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Expense3) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *Expense3) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Expense3) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Expense3) GetStatus() *ExpenseStatus3 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Expense3) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Expense3) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Expense3) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Expense3) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Expense3) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Expense3) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

// ExpensePaymentType2 - The type of payment for the expense.
type ExpensePaymentType2 string

const (
	ExpensePaymentType2Cash       ExpensePaymentType2 = "cash"
	ExpensePaymentType2Check      ExpensePaymentType2 = "check"
	ExpensePaymentType2CreditCard ExpensePaymentType2 = "credit_card"
	ExpensePaymentType2Other      ExpensePaymentType2 = "other"
)

func (e ExpensePaymentType2) ToPointer() *ExpensePaymentType2 {
	return &e
}
func (e *ExpensePaymentType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "check":
		fallthrough
	case "credit_card":
		fallthrough
	case "other":
		*e = ExpensePaymentType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpensePaymentType2: %v", v)
	}
}

// ExpenseType2 - The type of expense.
type ExpenseType2 string

const (
	ExpenseType2Expense ExpenseType2 = "expense"
	ExpenseType2Refund  ExpenseType2 = "refund"
)

func (e ExpenseType2) ToPointer() *ExpenseType2 {
	return &e
}
func (e *ExpenseType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expense":
		fallthrough
	case "refund":
		*e = ExpenseType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseType2: %v", v)
	}
}

// ExpenseStatus2 - Expense status
type ExpenseStatus2 string

const (
	ExpenseStatus2Draft  ExpenseStatus2 = "draft"
	ExpenseStatus2Posted ExpenseStatus2 = "posted"
)

func (e ExpenseStatus2) ToPointer() *ExpenseStatus2 {
	return &e
}
func (e *ExpenseStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "posted":
		*e = ExpenseStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseStatus2: %v", v)
	}
}

type Expense2 struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   *string              `json:"account_id,omitempty"`
	Account     *LinkedLedgerAccount `json:"account"`
	BankAccount *LinkedBankAccount   `json:"bank_account,omitempty"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType2 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType2 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string        `json:"memo,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItem `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// Expense status
	Status *ExpenseStatus2 `json:"status,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e Expense2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Expense2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "account", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *Expense2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Expense2) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Expense2) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *Expense2) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Expense2) GetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Expense2) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *Expense2) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *Expense2) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *Expense2) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Expense2) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Expense2) GetPaymentType() *ExpensePaymentType2 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *Expense2) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Expense2) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Expense2) GetType() *ExpenseType2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Expense2) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *Expense2) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Expense2) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *Expense2) GetLineItems() []ExpenseLineItem {
	if o == nil {
		return []ExpenseLineItem{}
	}
	return o.LineItems
}

func (o *Expense2) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Expense2) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *Expense2) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Expense2) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Expense2) GetStatus() *ExpenseStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Expense2) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Expense2) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Expense2) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Expense2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Expense2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Expense2) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

// ExpensePaymentType1 - The type of payment for the expense.
type ExpensePaymentType1 string

const (
	ExpensePaymentType1Cash       ExpensePaymentType1 = "cash"
	ExpensePaymentType1Check      ExpensePaymentType1 = "check"
	ExpensePaymentType1CreditCard ExpensePaymentType1 = "credit_card"
	ExpensePaymentType1Other      ExpensePaymentType1 = "other"
)

func (e ExpensePaymentType1) ToPointer() *ExpensePaymentType1 {
	return &e
}
func (e *ExpensePaymentType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "check":
		fallthrough
	case "credit_card":
		fallthrough
	case "other":
		*e = ExpensePaymentType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpensePaymentType1: %v", v)
	}
}

// ExpenseType1 - The type of expense.
type ExpenseType1 string

const (
	ExpenseType1Expense ExpenseType1 = "expense"
	ExpenseType1Refund  ExpenseType1 = "refund"
)

func (e ExpenseType1) ToPointer() *ExpenseType1 {
	return &e
}
func (e *ExpenseType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expense":
		fallthrough
	case "refund":
		*e = ExpenseType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseType1: %v", v)
	}
}

// ExpenseStatus1 - Expense status
type ExpenseStatus1 string

const (
	ExpenseStatus1Draft  ExpenseStatus1 = "draft"
	ExpenseStatus1Posted ExpenseStatus1 = "posted"
)

func (e ExpenseStatus1) ToPointer() *ExpenseStatus1 {
	return &e
}
func (e *ExpenseStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "posted":
		*e = ExpenseStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseStatus1: %v", v)
	}
}

type Expense1 struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   string               `json:"account_id"`
	Account     *LinkedLedgerAccount `json:"account,omitempty"`
	BankAccount *LinkedBankAccount   `json:"bank_account,omitempty"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType1 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType1 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string        `json:"memo,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItem `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// Expense status
	Status *ExpenseStatus1 `json:"status,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e Expense1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Expense1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "account_id", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *Expense1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Expense1) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Expense1) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *Expense1) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *Expense1) GetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *Expense1) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *Expense1) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *Expense1) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *Expense1) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Expense1) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Expense1) GetPaymentType() *ExpensePaymentType1 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *Expense1) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Expense1) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Expense1) GetType() *ExpenseType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Expense1) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *Expense1) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Expense1) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *Expense1) GetLineItems() []ExpenseLineItem {
	if o == nil {
		return []ExpenseLineItem{}
	}
	return o.LineItems
}

func (o *Expense1) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Expense1) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *Expense1) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Expense1) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Expense1) GetStatus() *ExpenseStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Expense1) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Expense1) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Expense1) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Expense1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Expense1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Expense1) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ExpenseUnionType string

const (
	ExpenseUnionTypeExpense1 ExpenseUnionType = "Expense_1"
	ExpenseUnionTypeExpense2 ExpenseUnionType = "Expense_2"
	ExpenseUnionTypeExpense3 ExpenseUnionType = "Expense_3"
)

type ExpenseUnion struct {
	Expense1 *Expense1 `queryParam:"inline"`
	Expense2 *Expense2 `queryParam:"inline"`
	Expense3 *Expense3 `queryParam:"inline"`

	Type ExpenseUnionType
}

func CreateExpenseUnionExpense1(expense1 Expense1) ExpenseUnion {
	typ := ExpenseUnionTypeExpense1

	return ExpenseUnion{
		Expense1: &expense1,
		Type:     typ,
	}
}

func CreateExpenseUnionExpense2(expense2 Expense2) ExpenseUnion {
	typ := ExpenseUnionTypeExpense2

	return ExpenseUnion{
		Expense2: &expense2,
		Type:     typ,
	}
}

func CreateExpenseUnionExpense3(expense3 Expense3) ExpenseUnion {
	typ := ExpenseUnionTypeExpense3

	return ExpenseUnion{
		Expense3: &expense3,
		Type:     typ,
	}
}

func (u *ExpenseUnion) UnmarshalJSON(data []byte) error {

	var expense1 Expense1 = Expense1{}
	if err := utils.UnmarshalJSON(data, &expense1, "", true, nil); err == nil {
		u.Expense1 = &expense1
		u.Type = ExpenseUnionTypeExpense1
		return nil
	}

	var expense2 Expense2 = Expense2{}
	if err := utils.UnmarshalJSON(data, &expense2, "", true, nil); err == nil {
		u.Expense2 = &expense2
		u.Type = ExpenseUnionTypeExpense2
		return nil
	}

	var expense3 Expense3 = Expense3{}
	if err := utils.UnmarshalJSON(data, &expense3, "", true, nil); err == nil {
		u.Expense3 = &expense3
		u.Type = ExpenseUnionTypeExpense3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ExpenseUnion", string(data))
}

func (u ExpenseUnion) MarshalJSON() ([]byte, error) {
	if u.Expense1 != nil {
		return utils.MarshalJSON(u.Expense1, "", true)
	}

	if u.Expense2 != nil {
		return utils.MarshalJSON(u.Expense2, "", true)
	}

	if u.Expense3 != nil {
		return utils.MarshalJSON(u.Expense3, "", true)
	}

	return nil, errors.New("could not marshal union type ExpenseUnion: all fields are null")
}

type ExpenseInput3 struct {
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   *string                   `json:"account_id,omitempty"`
	Account     *LinkedLedgerAccountInput `json:"account,omitempty"`
	BankAccount *LinkedBankAccount        `json:"bank_account"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType3 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType3 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string             `json:"memo,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItemInput `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// Expense status
	Status *ExpenseStatus3 `json:"status,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e ExpenseInput3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExpenseInput3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "bank_account", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *ExpenseInput3) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *ExpenseInput3) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *ExpenseInput3) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *ExpenseInput3) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *ExpenseInput3) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ExpenseInput3) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ExpenseInput3) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *ExpenseInput3) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ExpenseInput3) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *ExpenseInput3) GetPaymentType() *ExpensePaymentType3 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *ExpenseInput3) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ExpenseInput3) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ExpenseInput3) GetType() *ExpenseType3 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExpenseInput3) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *ExpenseInput3) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *ExpenseInput3) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *ExpenseInput3) GetLineItems() []ExpenseLineItemInput {
	if o == nil {
		return []ExpenseLineItemInput{}
	}
	return o.LineItems
}

func (o *ExpenseInput3) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ExpenseInput3) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *ExpenseInput3) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ExpenseInput3) GetStatus() *ExpenseStatus3 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ExpenseInput3) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *ExpenseInput3) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ExpenseInput2 struct {
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   *string                   `json:"account_id,omitempty"`
	Account     *LinkedLedgerAccountInput `json:"account"`
	BankAccount *LinkedBankAccount        `json:"bank_account,omitempty"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType2 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType2 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string             `json:"memo,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItemInput `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// Expense status
	Status *ExpenseStatus2 `json:"status,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e ExpenseInput2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExpenseInput2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "account", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *ExpenseInput2) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *ExpenseInput2) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *ExpenseInput2) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *ExpenseInput2) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *ExpenseInput2) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ExpenseInput2) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ExpenseInput2) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *ExpenseInput2) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ExpenseInput2) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *ExpenseInput2) GetPaymentType() *ExpensePaymentType2 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *ExpenseInput2) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ExpenseInput2) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ExpenseInput2) GetType() *ExpenseType2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExpenseInput2) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *ExpenseInput2) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *ExpenseInput2) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *ExpenseInput2) GetLineItems() []ExpenseLineItemInput {
	if o == nil {
		return []ExpenseLineItemInput{}
	}
	return o.LineItems
}

func (o *ExpenseInput2) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ExpenseInput2) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *ExpenseInput2) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ExpenseInput2) GetStatus() *ExpenseStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ExpenseInput2) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *ExpenseInput2) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ExpenseInput1 struct {
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to. Deprecated, use account instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AccountID   string                    `json:"account_id"`
	Account     *LinkedLedgerAccountInput `json:"account,omitempty"`
	BankAccount *LinkedBankAccount        `json:"bank_account,omitempty"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType1 `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType1 `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string             `json:"memo,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItemInput `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// Expense status
	Status *ExpenseStatus1 `json:"status,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e ExpenseInput1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExpenseInput1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"transaction_date", "account_id", "line_items"}); err != nil {
		return err
	}
	return nil
}

func (o *ExpenseInput1) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *ExpenseInput1) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *ExpenseInput1) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ExpenseInput1) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *ExpenseInput1) GetBankAccount() *LinkedBankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *ExpenseInput1) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ExpenseInput1) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *ExpenseInput1) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ExpenseInput1) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *ExpenseInput1) GetPaymentType() *ExpensePaymentType1 {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *ExpenseInput1) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ExpenseInput1) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ExpenseInput1) GetType() *ExpenseType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExpenseInput1) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *ExpenseInput1) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *ExpenseInput1) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *ExpenseInput1) GetLineItems() []ExpenseLineItemInput {
	if o == nil {
		return []ExpenseLineItemInput{}
	}
	return o.LineItems
}

func (o *ExpenseInput1) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ExpenseInput1) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *ExpenseInput1) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ExpenseInput1) GetStatus() *ExpenseStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ExpenseInput1) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *ExpenseInput1) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ExpenseInputUnionType string

const (
	ExpenseInputUnionTypeExpenseInput1 ExpenseInputUnionType = "Expense_input_1"
	ExpenseInputUnionTypeExpenseInput2 ExpenseInputUnionType = "Expense_input_2"
	ExpenseInputUnionTypeExpenseInput3 ExpenseInputUnionType = "Expense_input_3"
)

type ExpenseInputUnion struct {
	ExpenseInput1 *ExpenseInput1 `queryParam:"inline"`
	ExpenseInput2 *ExpenseInput2 `queryParam:"inline"`
	ExpenseInput3 *ExpenseInput3 `queryParam:"inline"`

	Type ExpenseInputUnionType
}

func CreateExpenseInputUnionExpenseInput1(expenseInput1 ExpenseInput1) ExpenseInputUnion {
	typ := ExpenseInputUnionTypeExpenseInput1

	return ExpenseInputUnion{
		ExpenseInput1: &expenseInput1,
		Type:          typ,
	}
}

func CreateExpenseInputUnionExpenseInput2(expenseInput2 ExpenseInput2) ExpenseInputUnion {
	typ := ExpenseInputUnionTypeExpenseInput2

	return ExpenseInputUnion{
		ExpenseInput2: &expenseInput2,
		Type:          typ,
	}
}

func CreateExpenseInputUnionExpenseInput3(expenseInput3 ExpenseInput3) ExpenseInputUnion {
	typ := ExpenseInputUnionTypeExpenseInput3

	return ExpenseInputUnion{
		ExpenseInput3: &expenseInput3,
		Type:          typ,
	}
}

func (u *ExpenseInputUnion) UnmarshalJSON(data []byte) error {

	var expenseInput1 ExpenseInput1 = ExpenseInput1{}
	if err := utils.UnmarshalJSON(data, &expenseInput1, "", true, nil); err == nil {
		u.ExpenseInput1 = &expenseInput1
		u.Type = ExpenseInputUnionTypeExpenseInput1
		return nil
	}

	var expenseInput2 ExpenseInput2 = ExpenseInput2{}
	if err := utils.UnmarshalJSON(data, &expenseInput2, "", true, nil); err == nil {
		u.ExpenseInput2 = &expenseInput2
		u.Type = ExpenseInputUnionTypeExpenseInput2
		return nil
	}

	var expenseInput3 ExpenseInput3 = ExpenseInput3{}
	if err := utils.UnmarshalJSON(data, &expenseInput3, "", true, nil); err == nil {
		u.ExpenseInput3 = &expenseInput3
		u.Type = ExpenseInputUnionTypeExpenseInput3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ExpenseInputUnion", string(data))
}

func (u ExpenseInputUnion) MarshalJSON() ([]byte, error) {
	if u.ExpenseInput1 != nil {
		return utils.MarshalJSON(u.ExpenseInput1, "", true)
	}

	if u.ExpenseInput2 != nil {
		return utils.MarshalJSON(u.ExpenseInput2, "", true)
	}

	if u.ExpenseInput3 != nil {
		return utils.MarshalJSON(u.ExpenseInput3, "", true)
	}

	return nil, errors.New("could not marshal union type ExpenseInputUnion: all fields are null")
}
