// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// Priority of the ticket
type Priority string

const (
	PriorityLow    Priority = "low"
	PriorityNormal Priority = "normal"
	PriorityHigh   Priority = "high"
	PriorityUrgent Priority = "urgent"
)

func (e Priority) ToPointer() *Priority {
	return &e
}
func (e *Priority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "normal":
		fallthrough
	case "high":
		fallthrough
	case "urgent":
		*e = Priority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Priority: %v", v)
	}
}

type Ticket struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// The ticket's parent ID
	ParentID *string `json:"parent_id,omitempty"`
	// The ticket's collection ID
	CollectionID *string `json:"collection_id,omitempty"`
	// The ticket's type
	Type *string `json:"type,omitempty"`
	// Subject of the ticket
	Subject *string `json:"subject,omitempty"`
	// The ticket's description. HTML version of description is mapped if supported by the third-party platform
	Description *string `json:"description,omitempty"`
	// The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
	Status *string `json:"status,omitempty"`
	// Priority of the ticket
	Priority  *Priority  `json:"priority,omitempty"`
	Assignees []Assignee `json:"assignees,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// Due date of the ticket
	DueDate *time.Time `json:"due_date,omitempty"`
	// When the ticket was completed
	CompletedAt *time.Time      `json:"completed_at,omitempty"`
	Tags        []CollectionTag `json:"tags,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (t Ticket) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Ticket) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Ticket) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Ticket) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *Ticket) GetCollectionID() *string {
	if o == nil {
		return nil
	}
	return o.CollectionID
}

func (o *Ticket) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Ticket) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *Ticket) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Ticket) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Ticket) GetPriority() *Priority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *Ticket) GetAssignees() []Assignee {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *Ticket) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Ticket) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Ticket) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Ticket) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *Ticket) GetCompletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *Ticket) GetTags() []CollectionTag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Ticket) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Ticket) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type TicketInput struct {
	// The ticket's parent ID
	ParentID *string `json:"parent_id,omitempty"`
	// The ticket's type
	Type *string `json:"type,omitempty"`
	// Subject of the ticket
	Subject *string `json:"subject,omitempty"`
	// The ticket's description. HTML version of description is mapped if supported by the third-party platform
	Description *string `json:"description,omitempty"`
	// The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
	Status *string `json:"status,omitempty"`
	// Priority of the ticket
	Priority  *Priority       `json:"priority,omitempty"`
	Assignees []AssigneeInput `json:"assignees,omitempty"`
	// Due date of the ticket
	DueDate *time.Time           `json:"due_date,omitempty"`
	Tags    []CollectionTagInput `json:"tags,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (t TicketInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TicketInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TicketInput) GetParentID() *string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *TicketInput) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TicketInput) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *TicketInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TicketInput) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *TicketInput) GetPriority() *Priority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *TicketInput) GetAssignees() []AssigneeInput {
	if o == nil {
		return nil
	}
	return o.Assignees
}

func (o *TicketInput) GetDueDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *TicketInput) GetTags() []CollectionTagInput {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *TicketInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
