// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type SimpleFormFieldOptionValue1Type string

const (
	SimpleFormFieldOptionValue1TypeStr     SimpleFormFieldOptionValue1Type = "str"
	SimpleFormFieldOptionValue1TypeInteger SimpleFormFieldOptionValue1Type = "integer"
	SimpleFormFieldOptionValue1TypeNumber  SimpleFormFieldOptionValue1Type = "number"
)

type SimpleFormFieldOptionValue1 struct {
	Str     *string  `queryParam:"inline"`
	Integer *int64   `queryParam:"inline"`
	Number  *float64 `queryParam:"inline"`

	Type SimpleFormFieldOptionValue1Type
}

func CreateSimpleFormFieldOptionValue1Str(str string) SimpleFormFieldOptionValue1 {
	typ := SimpleFormFieldOptionValue1TypeStr

	return SimpleFormFieldOptionValue1{
		Str:  &str,
		Type: typ,
	}
}

func CreateSimpleFormFieldOptionValue1Integer(integer int64) SimpleFormFieldOptionValue1 {
	typ := SimpleFormFieldOptionValue1TypeInteger

	return SimpleFormFieldOptionValue1{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateSimpleFormFieldOptionValue1Number(number float64) SimpleFormFieldOptionValue1 {
	typ := SimpleFormFieldOptionValue1TypeNumber

	return SimpleFormFieldOptionValue1{
		Number: &number,
		Type:   typ,
	}
}

func (u *SimpleFormFieldOptionValue1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SimpleFormFieldOptionValue1TypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = SimpleFormFieldOptionValue1TypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = SimpleFormFieldOptionValue1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SimpleFormFieldOptionValue1", string(data))
}

func (u SimpleFormFieldOptionValue1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type SimpleFormFieldOptionValue1: all fields are null")
}

type SimpleFormFieldOptionValue2Type string

const (
	SimpleFormFieldOptionValue2TypeStr                                SimpleFormFieldOptionValue2Type = "str"
	SimpleFormFieldOptionValue2TypeInteger                            SimpleFormFieldOptionValue2Type = "integer"
	SimpleFormFieldOptionValue2TypeNumber                             SimpleFormFieldOptionValue2Type = "number"
	SimpleFormFieldOptionValue2TypeBoolean                            SimpleFormFieldOptionValue2Type = "boolean"
	SimpleFormFieldOptionValue2TypeArrayOfSimpleFormFieldOptionValue1 SimpleFormFieldOptionValue2Type = "arrayOfSimpleFormFieldOptionValue1"
)

type SimpleFormFieldOptionValue2 struct {
	Str                                *string                       `queryParam:"inline"`
	Integer                            *int64                        `queryParam:"inline"`
	Number                             *float64                      `queryParam:"inline"`
	Boolean                            *bool                         `queryParam:"inline"`
	ArrayOfSimpleFormFieldOptionValue1 []SimpleFormFieldOptionValue1 `queryParam:"inline"`

	Type SimpleFormFieldOptionValue2Type
}

func CreateSimpleFormFieldOptionValue2Str(str string) SimpleFormFieldOptionValue2 {
	typ := SimpleFormFieldOptionValue2TypeStr

	return SimpleFormFieldOptionValue2{
		Str:  &str,
		Type: typ,
	}
}

func CreateSimpleFormFieldOptionValue2Integer(integer int64) SimpleFormFieldOptionValue2 {
	typ := SimpleFormFieldOptionValue2TypeInteger

	return SimpleFormFieldOptionValue2{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateSimpleFormFieldOptionValue2Number(number float64) SimpleFormFieldOptionValue2 {
	typ := SimpleFormFieldOptionValue2TypeNumber

	return SimpleFormFieldOptionValue2{
		Number: &number,
		Type:   typ,
	}
}

func CreateSimpleFormFieldOptionValue2Boolean(boolean bool) SimpleFormFieldOptionValue2 {
	typ := SimpleFormFieldOptionValue2TypeBoolean

	return SimpleFormFieldOptionValue2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateSimpleFormFieldOptionValue2ArrayOfSimpleFormFieldOptionValue1(arrayOfSimpleFormFieldOptionValue1 []SimpleFormFieldOptionValue1) SimpleFormFieldOptionValue2 {
	typ := SimpleFormFieldOptionValue2TypeArrayOfSimpleFormFieldOptionValue1

	return SimpleFormFieldOptionValue2{
		ArrayOfSimpleFormFieldOptionValue1: arrayOfSimpleFormFieldOptionValue1,
		Type:                               typ,
	}
}

func (u *SimpleFormFieldOptionValue2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SimpleFormFieldOptionValue2TypeStr
		return nil
	}

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = SimpleFormFieldOptionValue2TypeInteger
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = SimpleFormFieldOptionValue2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = SimpleFormFieldOptionValue2TypeBoolean
		return nil
	}

	var arrayOfSimpleFormFieldOptionValue1 []SimpleFormFieldOptionValue1 = []SimpleFormFieldOptionValue1{}
	if err := utils.UnmarshalJSON(data, &arrayOfSimpleFormFieldOptionValue1, "", true, true); err == nil {
		u.ArrayOfSimpleFormFieldOptionValue1 = arrayOfSimpleFormFieldOptionValue1
		u.Type = SimpleFormFieldOptionValue2TypeArrayOfSimpleFormFieldOptionValue1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SimpleFormFieldOptionValue2", string(data))
}

func (u SimpleFormFieldOptionValue2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfSimpleFormFieldOptionValue1 != nil {
		return utils.MarshalJSON(u.ArrayOfSimpleFormFieldOptionValue1, "", true)
	}

	return nil, errors.New("could not marshal union type SimpleFormFieldOptionValue2: all fields are null")
}

type SimpleFormFieldOptionOptionType string

const (
	SimpleFormFieldOptionOptionTypeSimple SimpleFormFieldOptionOptionType = "simple"
)

func (e SimpleFormFieldOptionOptionType) ToPointer() *SimpleFormFieldOptionOptionType {
	return &e
}
func (e *SimpleFormFieldOptionOptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "simple":
		*e = SimpleFormFieldOptionOptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SimpleFormFieldOptionOptionType: %v", v)
	}
}

type SimpleFormFieldOption struct {
	Label      string                          `json:"label"`
	Value      *SimpleFormFieldOptionValue2    `json:"value,omitempty"`
	OptionType SimpleFormFieldOptionOptionType `json:"option_type"`
}

func (o *SimpleFormFieldOption) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *SimpleFormFieldOption) GetValue() *SimpleFormFieldOptionValue2 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *SimpleFormFieldOption) GetOptionType() SimpleFormFieldOptionOptionType {
	if o == nil {
		return SimpleFormFieldOptionOptionType("")
	}
	return o.OptionType
}
