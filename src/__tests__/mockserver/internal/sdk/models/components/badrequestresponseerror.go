// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type BadRequestResponseDetailType string

const (
	BadRequestResponseDetailTypeStr      BadRequestResponseDetailType = "str"
	BadRequestResponseDetailTypeMapOfAny BadRequestResponseDetailType = "mapOfAny"
)

// BadRequestResponseDetail - Contains parameter or domain specific information related to the error and why it occurred.
type BadRequestResponseDetail struct {
	Str      *string        `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type BadRequestResponseDetailType
}

func CreateBadRequestResponseDetailStr(str string) BadRequestResponseDetail {
	typ := BadRequestResponseDetailTypeStr

	return BadRequestResponseDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateBadRequestResponseDetailMapOfAny(mapOfAny map[string]any) BadRequestResponseDetail {
	typ := BadRequestResponseDetailTypeMapOfAny

	return BadRequestResponseDetail{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *BadRequestResponseDetail) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = BadRequestResponseDetailTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = BadRequestResponseDetailTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for BadRequestResponseDetail", string(data))
}

func (u BadRequestResponseDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type BadRequestResponseDetail: all fields are null")
}
