// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ProductStatus - The current status of the product (active or archived).
type ProductStatus string

const (
	ProductStatusActive   ProductStatus = "active"
	ProductStatusArchived ProductStatus = "archived"
)

func (e ProductStatus) ToPointer() *ProductStatus {
	return &e
}
func (e *ProductStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "archived":
		*e = ProductStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductStatus: %v", v)
	}
}

type Images struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The URL of an image of the product.
	URL *string `json:"url,omitempty"`
}

func (o *Images) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Images) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type EcommerceProductOptions struct {
	// A unique identifier for the option of the product.
	ID *string `json:"id,omitempty"`
	// The name of the option for the product.
	Name   *string   `json:"name,omitempty"`
	Values []*string `json:"values,omitempty"`
}

func (o *EcommerceProductOptions) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EcommerceProductOptions) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EcommerceProductOptions) GetValues() []*string {
	if o == nil {
		return nil
	}
	return o.Values
}

type EcommerceProductVariantsOptions struct {
	// A unique identifier for the option of the variant.
	ID *string `json:"id,omitempty"`
	// The name of the option for the variant.
	Name *string `json:"name,omitempty"`
	// The value of the option for the variant.
	Value *string `json:"value,omitempty"`
}

func (o *EcommerceProductVariantsOptions) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EcommerceProductVariantsOptions) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EcommerceProductVariantsOptions) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type EcommerceProductImages struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The URL of an image of the variant.
	URL *string `json:"url,omitempty"`
}

func (o *EcommerceProductImages) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EcommerceProductImages) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Variants struct {
	// A unique identifier for the variant of the product.
	ID *string `json:"id,omitempty"`
	// The name for the variant, used for displaying to customers.
	Name *string `json:"name,omitempty"`
	// The price of the variant.
	Price *string `json:"price,omitempty"`
	// The stock keeping unit of the variant.
	Sku *string `json:"sku,omitempty"`
	// The quantity of the variant in stock.
	InventoryQuantity *string `json:"inventory_quantity,omitempty"`
	// The weight of the variant.
	Weight *string `json:"weight,omitempty"`
	// The unit of measurement for the weight of the variant.
	WeightUnit *string                           `json:"weight_unit,omitempty"`
	Options    []EcommerceProductVariantsOptions `json:"options,omitempty"`
	Images     []EcommerceProductImages          `json:"images,omitempty"`
}

func (o *Variants) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Variants) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Variants) GetPrice() *string {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Variants) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *Variants) GetInventoryQuantity() *string {
	if o == nil {
		return nil
	}
	return o.InventoryQuantity
}

func (o *Variants) GetWeight() *string {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *Variants) GetWeightUnit() *string {
	if o == nil {
		return nil
	}
	return o.WeightUnit
}

func (o *Variants) GetOptions() []EcommerceProductVariantsOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *Variants) GetImages() []EcommerceProductImages {
	if o == nil {
		return nil
	}
	return o.Images
}

type EcommerceProductCategories struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The name of the category.
	Name *string `json:"name,omitempty"`
}

func (o *EcommerceProductCategories) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EcommerceProductCategories) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type EcommerceProduct struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// The name of the product as it should be displayed to customers.
	Name *string `json:"name,omitempty"`
	// A detailed description of the product.
	Description *string `json:"description,omitempty"`
	// The current status of the product (active or archived).
	Status *ProductStatus `json:"status,omitempty"`
	// The price of the product.
	Price *string `json:"price,omitempty"`
	// The stock keeping unit of the product.
	Sku *string `json:"sku,omitempty"`
	// The quantity of the product in stock.
	InventoryQuantity *string `json:"inventory_quantity,omitempty"`
	// An array of image URLs for the product.
	Images []Images `json:"images,omitempty"`
	// The weight of the product.
	Weight *string `json:"weight,omitempty"`
	// The unit of measurement for the weight of the product.
	WeightUnit *string `json:"weight_unit,omitempty"`
	// An array of options for the product.
	Options  []EcommerceProductOptions `json:"options,omitempty"`
	Variants []Variants                `json:"variants,omitempty"`
	// An array of tags for the product, used for organization and searching.
	Tags []*string `json:"tags,omitempty"`
	// An array of categories for the product, used for organization and searching.
	Categories []EcommerceProductCategories `json:"categories,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings *CustomMappings `json:"custom_mappings,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (e EcommerceProduct) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EcommerceProduct) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EcommerceProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EcommerceProduct) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EcommerceProduct) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EcommerceProduct) GetStatus() *ProductStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EcommerceProduct) GetPrice() *string {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *EcommerceProduct) GetSku() *string {
	if o == nil {
		return nil
	}
	return o.Sku
}

func (o *EcommerceProduct) GetInventoryQuantity() *string {
	if o == nil {
		return nil
	}
	return o.InventoryQuantity
}

func (o *EcommerceProduct) GetImages() []Images {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *EcommerceProduct) GetWeight() *string {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *EcommerceProduct) GetWeightUnit() *string {
	if o == nil {
		return nil
	}
	return o.WeightUnit
}

func (o *EcommerceProduct) GetOptions() []EcommerceProductOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *EcommerceProduct) GetVariants() []Variants {
	if o == nil {
		return nil
	}
	return o.Variants
}

func (o *EcommerceProduct) GetTags() []*string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *EcommerceProduct) GetCategories() []EcommerceProductCategories {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *EcommerceProduct) GetCustomMappings() *CustomMappings {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *EcommerceProduct) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EcommerceProduct) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
