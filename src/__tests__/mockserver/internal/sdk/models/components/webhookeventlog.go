// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// WebhookEventLogService - Apideck service provider associated with event.
type WebhookEventLogService struct {
	// Apideck service provider id.
	ID string `json:"id"`
	// Apideck service provider name.
	Name string `json:"name"`
}

func (o *WebhookEventLogService) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WebhookEventLogService) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Attempts struct {
	// ISO Date and time when the request was made.
	Timestamp *string `json:"timestamp,omitempty"`
	// Number of attempts webhook endpoint was called before a success was returned or eventually failed
	ExecutionAttempt *float64 `json:"execution_attempt,omitempty"`
	// HTTP Status code that was returned.
	StatusCode *int64 `json:"status_code,omitempty"`
	// Whether or not the request was successful.
	Success *bool `json:"success,omitempty"`
}

func (o *Attempts) GetTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *Attempts) GetExecutionAttempt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExecutionAttempt
}

func (o *Attempts) GetStatusCode() *int64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Attempts) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

type WebhookEventLog struct {
	ID *string `json:"id,omitempty"`
	// HTTP Status code that was returned.
	StatusCode *int64 `json:"status_code,omitempty"`
	// Whether or not the request was successful.
	Success *bool `json:"success,omitempty"`
	// ID of your Apideck Application
	ApplicationID *string `json:"application_id,omitempty"`
	// Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
	ConsumerID *string `json:"consumer_id,omitempty"`
	// Name of Apideck Unified API
	UnifiedAPI *UnifiedAPIID `json:"unified_api,omitempty"`
	// Apideck service provider associated with event.
	Service *WebhookEventLogService `json:"service,omitempty"`
	// The URL of the webhook endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Name of source event that webhook is subscribed to.
	EventType *string `json:"event_type,omitempty"`
	// Number of attempts webhook endpoint was called before a success was returned or eventually failed
	ExecutionAttempt *float64 `json:"execution_attempt,omitempty"`
	// HTTP Method of request to endpoint.
	HTTPMethod *string `json:"http_method,omitempty"`
	// ISO Date and time when the request was made.
	Timestamp *string `json:"timestamp,omitempty"`
	// Name of the Entity described by the attributes delivered within payload
	EntityType *string `json:"entity_type,omitempty"`
	// The JSON stringified payload that was delivered to the webhook endpoint.
	RequestBody *string `json:"request_body,omitempty"`
	// The JSON stringified response that was returned from the webhook endpoint.
	ResponseBody *string `json:"response_body,omitempty"`
	// If the request has not hit the max retry limit and will be retried.
	RetryScheduled *bool `json:"retry_scheduled,omitempty"`
	// record of each attempt to call webhook endpoint
	Attempts []Attempts `json:"attempts,omitempty"`
}

func (o *WebhookEventLog) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *WebhookEventLog) GetStatusCode() *int64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *WebhookEventLog) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *WebhookEventLog) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *WebhookEventLog) GetConsumerID() *string {
	if o == nil {
		return nil
	}
	return o.ConsumerID
}

func (o *WebhookEventLog) GetUnifiedAPI() *UnifiedAPIID {
	if o == nil {
		return nil
	}
	return o.UnifiedAPI
}

func (o *WebhookEventLog) GetService() *WebhookEventLogService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *WebhookEventLog) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *WebhookEventLog) GetEventType() *string {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *WebhookEventLog) GetExecutionAttempt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExecutionAttempt
}

func (o *WebhookEventLog) GetHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *WebhookEventLog) GetTimestamp() *string {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *WebhookEventLog) GetEntityType() *string {
	if o == nil {
		return nil
	}
	return o.EntityType
}

func (o *WebhookEventLog) GetRequestBody() *string {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

func (o *WebhookEventLog) GetResponseBody() *string {
	if o == nil {
		return nil
	}
	return o.ResponseBody
}

func (o *WebhookEventLog) GetRetryScheduled() *bool {
	if o == nil {
		return nil
	}
	return o.RetryScheduled
}

func (o *WebhookEventLog) GetAttempts() []Attempts {
	if o == nil {
		return nil
	}
	return o.Attempts
}
