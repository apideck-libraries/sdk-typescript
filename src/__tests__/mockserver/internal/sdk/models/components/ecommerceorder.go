// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// EcommerceOrderPaymentStatus - Current payment status of the order.
type EcommerceOrderPaymentStatus string

const (
	EcommerceOrderPaymentStatusPending    EcommerceOrderPaymentStatus = "pending"
	EcommerceOrderPaymentStatusAuthorized EcommerceOrderPaymentStatus = "authorized"
	EcommerceOrderPaymentStatusPaid       EcommerceOrderPaymentStatus = "paid"
	EcommerceOrderPaymentStatusPartial    EcommerceOrderPaymentStatus = "partial"
	EcommerceOrderPaymentStatusRefunded   EcommerceOrderPaymentStatus = "refunded"
	EcommerceOrderPaymentStatusVoided     EcommerceOrderPaymentStatus = "voided"
	EcommerceOrderPaymentStatusUnknown    EcommerceOrderPaymentStatus = "unknown"
)

func (e EcommerceOrderPaymentStatus) ToPointer() *EcommerceOrderPaymentStatus {
	return &e
}
func (e *EcommerceOrderPaymentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "authorized":
		fallthrough
	case "paid":
		fallthrough
	case "partial":
		fallthrough
	case "refunded":
		fallthrough
	case "voided":
		fallthrough
	case "unknown":
		*e = EcommerceOrderPaymentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EcommerceOrderPaymentStatus: %v", v)
	}
}

// FulfillmentStatus - Current fulfillment status of the order.
type FulfillmentStatus string

const (
	FulfillmentStatusPending   FulfillmentStatus = "pending"
	FulfillmentStatusShipped   FulfillmentStatus = "shipped"
	FulfillmentStatusPartial   FulfillmentStatus = "partial"
	FulfillmentStatusDelivered FulfillmentStatus = "delivered"
	FulfillmentStatusCancelled FulfillmentStatus = "cancelled"
	FulfillmentStatusReturned  FulfillmentStatus = "returned"
	FulfillmentStatusUnknown   FulfillmentStatus = "unknown"
)

func (e FulfillmentStatus) ToPointer() *FulfillmentStatus {
	return &e
}
func (e *FulfillmentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "shipped":
		fallthrough
	case "partial":
		fallthrough
	case "delivered":
		fallthrough
	case "cancelled":
		fallthrough
	case "returned":
		fallthrough
	case "unknown":
		*e = FulfillmentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FulfillmentStatus: %v", v)
	}
}

type EcommerceOrder struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// Order number, if any.
	OrderNumber *string `json:"order_number,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency  *Currency           `json:"currency,omitempty"`
	Discounts []EcommerceDiscount `json:"discounts,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *string `json:"sub_total,omitempty"`
	// Shipping cost, if any.
	ShippingCost *string `json:"shipping_cost,omitempty"`
	// Coupon discount, if any.
	CouponDiscount *string `json:"coupon_discount,omitempty"`
	// Total discount, if any.
	TotalDiscount *string `json:"total_discount,omitempty"`
	// Total tax, if any.
	TotalTax *string `json:"total_tax,omitempty"`
	// Total amount due.
	TotalAmount *string `json:"total_amount,omitempty"`
	// Refunded amount, if any.
	RefundedAmount *string `json:"refunded_amount,omitempty"`
	// Current status of the order.
	Status *EcommerceOrderStatus `json:"status,omitempty"`
	// Current payment status of the order.
	PaymentStatus *EcommerceOrderPaymentStatus `json:"payment_status,omitempty"`
	// Current fulfillment status of the order.
	FulfillmentStatus *FulfillmentStatus `json:"fulfillment_status,omitempty"`
	// Payment method used for this order.
	PaymentMethod *string `json:"payment_method,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedEcommerceCustomer `json:"customer,omitempty"`
	// An object representing a shipping or billing address.
	BillingAddress *EcommerceAddress `json:"billing_address,omitempty"`
	// An object representing a shipping or billing address.
	ShippingAddress *EcommerceAddress        `json:"shipping_address,omitempty"`
	Tracking        []TrackingItem           `json:"tracking,omitempty"`
	LineItems       []EcommerceOrderLineItem `json:"line_items,omitempty"`
	// Note for the order.
	Note    *string                `json:"note,omitempty"`
	Refunds []EcommerceOrderRefund `json:"refunds,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (e EcommerceOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EcommerceOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EcommerceOrder) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EcommerceOrder) GetOrderNumber() *string {
	if o == nil {
		return nil
	}
	return o.OrderNumber
}

func (o *EcommerceOrder) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *EcommerceOrder) GetDiscounts() []EcommerceDiscount {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *EcommerceOrder) GetSubTotal() *string {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *EcommerceOrder) GetShippingCost() *string {
	if o == nil {
		return nil
	}
	return o.ShippingCost
}

func (o *EcommerceOrder) GetCouponDiscount() *string {
	if o == nil {
		return nil
	}
	return o.CouponDiscount
}

func (o *EcommerceOrder) GetTotalDiscount() *string {
	if o == nil {
		return nil
	}
	return o.TotalDiscount
}

func (o *EcommerceOrder) GetTotalTax() *string {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *EcommerceOrder) GetTotalAmount() *string {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *EcommerceOrder) GetRefundedAmount() *string {
	if o == nil {
		return nil
	}
	return o.RefundedAmount
}

func (o *EcommerceOrder) GetStatus() *EcommerceOrderStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EcommerceOrder) GetPaymentStatus() *EcommerceOrderPaymentStatus {
	if o == nil {
		return nil
	}
	return o.PaymentStatus
}

func (o *EcommerceOrder) GetFulfillmentStatus() *FulfillmentStatus {
	if o == nil {
		return nil
	}
	return o.FulfillmentStatus
}

func (o *EcommerceOrder) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *EcommerceOrder) GetCustomer() *LinkedEcommerceCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *EcommerceOrder) GetBillingAddress() *EcommerceAddress {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *EcommerceOrder) GetShippingAddress() *EcommerceAddress {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *EcommerceOrder) GetTracking() []TrackingItem {
	if o == nil {
		return nil
	}
	return o.Tracking
}

func (o *EcommerceOrder) GetLineItems() []EcommerceOrderLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *EcommerceOrder) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *EcommerceOrder) GetRefunds() []EcommerceOrderRefund {
	if o == nil {
		return nil
	}
	return o.Refunds
}

func (o *EcommerceOrder) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *EcommerceOrder) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EcommerceOrder) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
