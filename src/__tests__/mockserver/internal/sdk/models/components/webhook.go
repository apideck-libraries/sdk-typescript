// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// DisabledReason - Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
type DisabledReason string

const (
	DisabledReasonNone       DisabledReason = "none"
	DisabledReasonRetryLimit DisabledReason = "retry_limit"
	DisabledReasonUsageLimit DisabledReason = "usage_limit"
)

func (e DisabledReason) ToPointer() *DisabledReason {
	return &e
}
func (e *DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "retry_limit":
		fallthrough
	case "usage_limit":
		*e = DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledReason: %v", v)
	}
}

type Webhook struct {
	ID *string `json:"id,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// Name of Apideck Unified API
	UnifiedAPI UnifiedAPIID `json:"unified_api"`
	// The status of the webhook.
	Status Status `json:"status"`
	// Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.
	DisabledReason *DisabledReason `json:"disabled_reason,omitempty"`
	// The delivery url of the webhook endpoint.
	DeliveryURL string `json:"delivery_url"`
	// The Unify Base URL events from connectors will be sent to after service id is appended.
	ExecuteBaseURL string `json:"execute_base_url"`
	// The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
	Events []WebhookEventType `json:"events"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

func (w Webhook) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *Webhook) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Webhook) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Webhook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Webhook) GetUnifiedAPI() UnifiedAPIID {
	if o == nil {
		return UnifiedAPIID("")
	}
	return o.UnifiedAPI
}

func (o *Webhook) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *Webhook) GetDisabledReason() *DisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *Webhook) GetDeliveryURL() string {
	if o == nil {
		return ""
	}
	return o.DeliveryURL
}

func (o *Webhook) GetExecuteBaseURL() string {
	if o == nil {
		return ""
	}
	return o.ExecuteBaseURL
}

func (o *Webhook) GetEvents() []WebhookEventType {
	if o == nil {
		return []WebhookEventType{}
	}
	return o.Events
}

func (o *Webhook) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Webhook) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}
