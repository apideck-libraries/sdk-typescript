// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// InvoiceItemType - Item type
type InvoiceItemType string

const (
	InvoiceItemTypeInventory    InvoiceItemType = "inventory"
	InvoiceItemTypeNonInventory InvoiceItemType = "non_inventory"
	InvoiceItemTypeService      InvoiceItemType = "service"
	InvoiceItemTypeDescription  InvoiceItemType = "description"
	InvoiceItemTypeOther        InvoiceItemType = "other"
)

func (e InvoiceItemType) ToPointer() *InvoiceItemType {
	return &e
}
func (e *InvoiceItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inventory":
		fallthrough
	case "non_inventory":
		fallthrough
	case "service":
		fallthrough
	case "description":
		fallthrough
	case "other":
		*e = InvoiceItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceItemType: %v", v)
	}
}

type SalesDetails struct {
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string `json:"unit_of_measure,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool          `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRate `json:"tax_rate,omitempty"`
}

func (o *SalesDetails) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *SalesDetails) GetUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.UnitOfMeasure
}

func (o *SalesDetails) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *SalesDetails) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

type PurchaseDetails struct {
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string `json:"unit_of_measure,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool          `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRate `json:"tax_rate,omitempty"`
}

func (o *PurchaseDetails) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *PurchaseDetails) GetUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.UnitOfMeasure
}

func (o *PurchaseDetails) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *PurchaseDetails) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

type InvoiceItem struct {
	// The ID of the item.
	ID *string `json:"id,omitempty"`
	// Item name
	Name *string `json:"name,omitempty"`
	// A short description of the item
	Description *string `json:"description,omitempty"`
	// User defined item code
	Code *string `json:"code,omitempty"`
	// Item will be available on sales transactions
	Sold *bool `json:"sold,omitempty"`
	// Item is available for purchase transactions
	Purchased *bool `json:"purchased,omitempty"`
	// Item is inventoried
	Tracked *bool `json:"tracked,omitempty"`
	// If true, transactions for this item are taxable
	Taxable *bool `json:"taxable,omitempty"`
	// The date of opening balance if inventory item is tracked - YYYY-MM-DD.
	InventoryDate *types.Date `json:"inventory_date,omitempty"`
	// Item type
	Type            *InvoiceItemType     `json:"type,omitempty"`
	SalesDetails    *SalesDetails        `json:"sales_details,omitempty"`
	PurchaseDetails *PurchaseDetails     `json:"purchase_details,omitempty"`
	Quantity        *float64             `json:"quantity,omitempty"`
	UnitPrice       *float64             `json:"unit_price,omitempty"`
	AssetAccount    *LinkedLedgerAccount `json:"asset_account,omitempty"`
	IncomeAccount   *LinkedLedgerAccount `json:"income_account,omitempty"`
	ExpenseAccount  *LinkedLedgerAccount `json:"expense_account,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TrackingCategory *DeprecatedLinkedTrackingCategory `json:"tracking_category,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	Active             *bool                     `json:"active,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The ID of the location
	LocationID *string `json:"location_id,omitempty"`
	// The ID of the subsidiary
	SubsidiaryID *string `json:"subsidiary_id,omitempty"`
	// The ID of the tax schedule
	TaxScheduleID *string `json:"tax_schedule_id,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (i InvoiceItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceItem) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InvoiceItem) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *InvoiceItem) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InvoiceItem) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *InvoiceItem) GetSold() *bool {
	if o == nil {
		return nil
	}
	return o.Sold
}

func (o *InvoiceItem) GetPurchased() *bool {
	if o == nil {
		return nil
	}
	return o.Purchased
}

func (o *InvoiceItem) GetTracked() *bool {
	if o == nil {
		return nil
	}
	return o.Tracked
}

func (o *InvoiceItem) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

func (o *InvoiceItem) GetInventoryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.InventoryDate
}

func (o *InvoiceItem) GetType() *InvoiceItemType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InvoiceItem) GetSalesDetails() *SalesDetails {
	if o == nil {
		return nil
	}
	return o.SalesDetails
}

func (o *InvoiceItem) GetPurchaseDetails() *PurchaseDetails {
	if o == nil {
		return nil
	}
	return o.PurchaseDetails
}

func (o *InvoiceItem) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *InvoiceItem) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *InvoiceItem) GetAssetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.AssetAccount
}

func (o *InvoiceItem) GetIncomeAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.IncomeAccount
}

func (o *InvoiceItem) GetExpenseAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.ExpenseAccount
}

func (o *InvoiceItem) GetTrackingCategory() *DeprecatedLinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategory
}

func (o *InvoiceItem) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *InvoiceItem) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *InvoiceItem) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *InvoiceItem) GetLocationID() *string {
	if o == nil {
		return nil
	}
	return o.LocationID
}

func (o *InvoiceItem) GetSubsidiaryID() *string {
	if o == nil {
		return nil
	}
	return o.SubsidiaryID
}

func (o *InvoiceItem) GetTaxScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.TaxScheduleID
}

func (o *InvoiceItem) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *InvoiceItem) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *InvoiceItem) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *InvoiceItem) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *InvoiceItem) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *InvoiceItem) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *InvoiceItem) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type SalesDetailsInput struct {
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string `json:"unit_of_measure,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool               `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRateInput `json:"tax_rate,omitempty"`
}

func (o *SalesDetailsInput) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *SalesDetailsInput) GetUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.UnitOfMeasure
}

func (o *SalesDetailsInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *SalesDetailsInput) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

type PurchaseDetailsInput struct {
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// Description of the unit type the item is sold as, ie: kg, hour.
	UnitOfMeasure *string `json:"unit_of_measure,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool               `json:"tax_inclusive,omitempty"`
	TaxRate      *LinkedTaxRateInput `json:"tax_rate,omitempty"`
}

func (o *PurchaseDetailsInput) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *PurchaseDetailsInput) GetUnitOfMeasure() *string {
	if o == nil {
		return nil
	}
	return o.UnitOfMeasure
}

func (o *PurchaseDetailsInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *PurchaseDetailsInput) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

type InvoiceItemInput struct {
	// Item name
	Name *string `json:"name,omitempty"`
	// A short description of the item
	Description *string `json:"description,omitempty"`
	// User defined item code
	Code *string `json:"code,omitempty"`
	// Item will be available on sales transactions
	Sold *bool `json:"sold,omitempty"`
	// Item is available for purchase transactions
	Purchased *bool `json:"purchased,omitempty"`
	// Item is inventoried
	Tracked *bool `json:"tracked,omitempty"`
	// If true, transactions for this item are taxable
	Taxable *bool `json:"taxable,omitempty"`
	// The date of opening balance if inventory item is tracked - YYYY-MM-DD.
	InventoryDate *types.Date `json:"inventory_date,omitempty"`
	// Item type
	Type            *InvoiceItemType          `json:"type,omitempty"`
	SalesDetails    *SalesDetailsInput        `json:"sales_details,omitempty"`
	PurchaseDetails *PurchaseDetailsInput     `json:"purchase_details,omitempty"`
	Quantity        *float64                  `json:"quantity,omitempty"`
	UnitPrice       *float64                  `json:"unit_price,omitempty"`
	AssetAccount    *LinkedLedgerAccountInput `json:"asset_account,omitempty"`
	IncomeAccount   *LinkedLedgerAccountInput `json:"income_account,omitempty"`
	ExpenseAccount  *LinkedLedgerAccountInput `json:"expense_account,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TrackingCategory *DeprecatedLinkedTrackingCategory `json:"tracking_category,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	Active             *bool                     `json:"active,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The ID of the location
	LocationID *string `json:"location_id,omitempty"`
	// The ID of the subsidiary
	SubsidiaryID *string `json:"subsidiary_id,omitempty"`
	// The ID of the tax schedule
	TaxScheduleID *string `json:"tax_schedule_id,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (i InvoiceItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceItemInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *InvoiceItemInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InvoiceItemInput) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *InvoiceItemInput) GetSold() *bool {
	if o == nil {
		return nil
	}
	return o.Sold
}

func (o *InvoiceItemInput) GetPurchased() *bool {
	if o == nil {
		return nil
	}
	return o.Purchased
}

func (o *InvoiceItemInput) GetTracked() *bool {
	if o == nil {
		return nil
	}
	return o.Tracked
}

func (o *InvoiceItemInput) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

func (o *InvoiceItemInput) GetInventoryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.InventoryDate
}

func (o *InvoiceItemInput) GetType() *InvoiceItemType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InvoiceItemInput) GetSalesDetails() *SalesDetailsInput {
	if o == nil {
		return nil
	}
	return o.SalesDetails
}

func (o *InvoiceItemInput) GetPurchaseDetails() *PurchaseDetailsInput {
	if o == nil {
		return nil
	}
	return o.PurchaseDetails
}

func (o *InvoiceItemInput) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *InvoiceItemInput) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *InvoiceItemInput) GetAssetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.AssetAccount
}

func (o *InvoiceItemInput) GetIncomeAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.IncomeAccount
}

func (o *InvoiceItemInput) GetExpenseAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.ExpenseAccount
}

func (o *InvoiceItemInput) GetTrackingCategory() *DeprecatedLinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategory
}

func (o *InvoiceItemInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *InvoiceItemInput) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *InvoiceItemInput) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *InvoiceItemInput) GetLocationID() *string {
	if o == nil {
		return nil
	}
	return o.LocationID
}

func (o *InvoiceItemInput) GetSubsidiaryID() *string {
	if o == nil {
		return nil
	}
	return o.SubsidiaryID
}

func (o *InvoiceItemInput) GetTaxScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.TaxScheduleID
}

func (o *InvoiceItemInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *InvoiceItemInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
