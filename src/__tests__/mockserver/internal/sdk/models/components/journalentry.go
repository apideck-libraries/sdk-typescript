// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// JournalEntryStatus - Journal entry status
type JournalEntryStatus string

const (
	JournalEntryStatusDraft           JournalEntryStatus = "draft"
	JournalEntryStatusPendingApproval JournalEntryStatus = "pending_approval"
	JournalEntryStatusApproved        JournalEntryStatus = "approved"
	JournalEntryStatusPosted          JournalEntryStatus = "posted"
	JournalEntryStatusVoided          JournalEntryStatus = "voided"
	JournalEntryStatusRejected        JournalEntryStatus = "rejected"
	JournalEntryStatusDeleted         JournalEntryStatus = "deleted"
	JournalEntryStatusOther           JournalEntryStatus = "other"
)

func (e JournalEntryStatus) ToPointer() *JournalEntryStatus {
	return &e
}
func (e *JournalEntryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "pending_approval":
		fallthrough
	case "approved":
		fallthrough
	case "posted":
		fallthrough
	case "voided":
		fallthrough
	case "rejected":
		fallthrough
	case "deleted":
		fallthrough
	case "other":
		*e = JournalEntryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JournalEntryStatus: %v", v)
	}
}

type JournalEntry struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Journal entry title
	Title *string `json:"title,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Requires a minimum of 2 line items that sum to 0
	LineItems []JournalEntryLineItem `json:"line_items,omitempty"`
	// Journal entry status
	Status *JournalEntryStatus `json:"status,omitempty"`
	// Reference for the journal entry.
	Memo *string `json:"memo,omitempty"`
	// This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
	PostedAt *time.Time `json:"posted_at,omitempty"`
	// Journal symbol of the entry. For example IND for indirect costs
	JournalSymbol *string `json:"journal_symbol,omitempty"`
	// The specific category of tax associated with a transaction like sales or purchase
	TaxType *string `json:"tax_type,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Journal entry number.
	Number *string `json:"number,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Accounting period
	AccountingPeriod *string `json:"accounting_period,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion   *string       `json:"row_version,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (j JournalEntry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JournalEntry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *JournalEntry) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *JournalEntry) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *JournalEntry) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *JournalEntry) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *JournalEntry) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *JournalEntry) GetLineItems() []JournalEntryLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *JournalEntry) GetStatus() *JournalEntryStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *JournalEntry) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *JournalEntry) GetPostedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PostedAt
}

func (o *JournalEntry) GetJournalSymbol() *string {
	if o == nil {
		return nil
	}
	return o.JournalSymbol
}

func (o *JournalEntry) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *JournalEntry) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *JournalEntry) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *JournalEntry) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *JournalEntry) GetAccountingPeriod() *string {
	if o == nil {
		return nil
	}
	return o.AccountingPeriod
}

func (o *JournalEntry) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *JournalEntry) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *JournalEntry) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *JournalEntry) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *JournalEntry) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *JournalEntry) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *JournalEntry) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *JournalEntry) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type JournalEntryInput struct {
	// Journal entry title
	Title *string `json:"title,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Requires a minimum of 2 line items that sum to 0
	LineItems []JournalEntryLineItemInput `json:"line_items,omitempty"`
	// Journal entry status
	Status *JournalEntryStatus `json:"status,omitempty"`
	// Reference for the journal entry.
	Memo *string `json:"memo,omitempty"`
	// This is the date on which the journal entry was added. This can be different from the creation date and can also be backdated.
	PostedAt *time.Time `json:"posted_at,omitempty"`
	// Journal symbol of the entry. For example IND for indirect costs
	JournalSymbol *string `json:"journal_symbol,omitempty"`
	// The specific category of tax associated with a transaction like sales or purchase
	TaxType *string `json:"tax_type,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Journal entry number.
	Number *string `json:"number,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Accounting period
	AccountingPeriod *string `json:"accounting_period,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion   *string       `json:"row_version,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (j JournalEntryInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JournalEntryInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *JournalEntryInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *JournalEntryInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *JournalEntryInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *JournalEntryInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *JournalEntryInput) GetLineItems() []JournalEntryLineItemInput {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *JournalEntryInput) GetStatus() *JournalEntryStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *JournalEntryInput) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *JournalEntryInput) GetPostedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PostedAt
}

func (o *JournalEntryInput) GetJournalSymbol() *string {
	if o == nil {
		return nil
	}
	return o.JournalSymbol
}

func (o *JournalEntryInput) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *JournalEntryInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *JournalEntryInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *JournalEntryInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *JournalEntryInput) GetAccountingPeriod() *string {
	if o == nil {
		return nil
	}
	return o.AccountingPeriod
}

func (o *JournalEntryInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *JournalEntryInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *JournalEntryInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
