// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// ApplicantType - The type of website
type ApplicantType string

const (
	ApplicantTypePrimary   ApplicantType = "primary"
	ApplicantTypeSecondary ApplicantType = "secondary"
	ApplicantTypeWork      ApplicantType = "work"
	ApplicantTypePersonal  ApplicantType = "personal"
	ApplicantTypeOther     ApplicantType = "other"
)

func (e ApplicantType) ToPointer() *ApplicantType {
	return &e
}
func (e *ApplicantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "secondary":
		fallthrough
	case "work":
		fallthrough
	case "personal":
		fallthrough
	case "other":
		*e = ApplicantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicantType: %v", v)
	}
}

type ApplicantWebsite struct {
	// Unique identifier for the website
	ID *string `json:"id,omitempty"`
	// The website URL
	URL string `json:"url"`
	// The type of website
	Type *ApplicantType `json:"type,omitempty"`
}

func (o *ApplicantWebsite) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ApplicantWebsite) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ApplicantWebsite) GetType() *ApplicantType {
	if o == nil {
		return nil
	}
	return o.Type
}

type ApplicantSocialLink struct {
	// Unique identifier of the social link
	ID *string `json:"id,omitempty"`
	// URL of the social link, e.g. https://www.twitter.com/apideck
	URL string `json:"url"`
	// Type of the social link, e.g. twitter
	Type *string `json:"type,omitempty"`
}

func (o *ApplicantSocialLink) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ApplicantSocialLink) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ApplicantSocialLink) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type Applicant struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The name of an applicant.
	Name *string `json:"name,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials *string `json:"initials,omitempty"`
	// The date of birth of the person.
	Birthday    *types.Date `json:"birthday,omitempty"`
	CoverLetter *string     `json:"cover_letter,omitempty"`
	JobURL      *string     `json:"job_url,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// Typically a list of previous companies where the contact has worked or schools that the contact has attended
	Headline *string `json:"headline,omitempty"`
	// The job title of the person.
	Title             *string               `json:"title,omitempty"`
	Emails            []Email               `json:"emails,omitempty"`
	CustomFields      []CustomField         `json:"custom_fields,omitempty"`
	PhoneNumbers      []PhoneNumber         `json:"phone_numbers,omitempty"`
	Addresses         []Address             `json:"addresses,omitempty"`
	Websites          []ApplicantWebsite    `json:"websites,omitempty"`
	SocialLinks       []ApplicantSocialLink `json:"social_links,omitempty"`
	StageID           *string               `json:"stage_id,omitempty"`
	RecruiterID       *string               `json:"recruiter_id,omitempty"`
	CoordinatorID     *string               `json:"coordinator_id,omitempty"`
	ApplicationIds    []string              `json:"application_ids,omitempty"`
	Applications      []string              `json:"applications,omitempty"`
	Followers         []string              `json:"followers,omitempty"`
	Sources           []string              `json:"sources,omitempty"`
	SourceID          *string               `json:"source_id,omitempty"`
	Confidential      *bool                 `json:"confidential,omitempty"`
	Anonymized        *bool                 `json:"anonymized,omitempty"`
	Tags              []string              `json:"tags,omitempty"`
	Archived          *bool                 `json:"archived,omitempty"`
	LastInteractionAt *time.Time            `json:"last_interaction_at,omitempty"`
	OwnerID           *string               `json:"owner_id,omitempty"`
	SourcedBy         *string               `json:"sourced_by,omitempty"`
	CvURL             *string               `json:"cv_url,omitempty"`
	RecordURL         *string               `json:"record_url,omitempty"`
	RejectedAt        *time.Time            `json:"rejected_at,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// Flag to indicate if the object is deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// The user who deleted the object.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// The time at which the object was deleted.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (a Applicant) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Applicant) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Applicant) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Applicant) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Applicant) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *Applicant) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *Applicant) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *Applicant) GetInitials() *string {
	if o == nil {
		return nil
	}
	return o.Initials
}

func (o *Applicant) GetBirthday() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *Applicant) GetCoverLetter() *string {
	if o == nil {
		return nil
	}
	return o.CoverLetter
}

func (o *Applicant) GetJobURL() *string {
	if o == nil {
		return nil
	}
	return o.JobURL
}

func (o *Applicant) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *Applicant) GetHeadline() *string {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *Applicant) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Applicant) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *Applicant) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Applicant) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *Applicant) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *Applicant) GetWebsites() []ApplicantWebsite {
	if o == nil {
		return nil
	}
	return o.Websites
}

func (o *Applicant) GetSocialLinks() []ApplicantSocialLink {
	if o == nil {
		return nil
	}
	return o.SocialLinks
}

func (o *Applicant) GetStageID() *string {
	if o == nil {
		return nil
	}
	return o.StageID
}

func (o *Applicant) GetRecruiterID() *string {
	if o == nil {
		return nil
	}
	return o.RecruiterID
}

func (o *Applicant) GetCoordinatorID() *string {
	if o == nil {
		return nil
	}
	return o.CoordinatorID
}

func (o *Applicant) GetApplicationIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicationIds
}

func (o *Applicant) GetApplications() []string {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *Applicant) GetFollowers() []string {
	if o == nil {
		return nil
	}
	return o.Followers
}

func (o *Applicant) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *Applicant) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *Applicant) GetConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.Confidential
}

func (o *Applicant) GetAnonymized() *bool {
	if o == nil {
		return nil
	}
	return o.Anonymized
}

func (o *Applicant) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Applicant) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *Applicant) GetLastInteractionAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastInteractionAt
}

func (o *Applicant) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Applicant) GetSourcedBy() *string {
	if o == nil {
		return nil
	}
	return o.SourcedBy
}

func (o *Applicant) GetCvURL() *string {
	if o == nil {
		return nil
	}
	return o.CvURL
}

func (o *Applicant) GetRecordURL() *string {
	if o == nil {
		return nil
	}
	return o.RecordURL
}

func (o *Applicant) GetRejectedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RejectedAt
}

func (o *Applicant) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Applicant) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *Applicant) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *Applicant) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Applicant) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Applicant) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Applicant) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Applicant) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Applicant) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ApplicantInput struct {
	// The name of an applicant.
	Name *string `json:"name,omitempty"`
	// The first name of the person.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person.
	LastName *string `json:"last_name,omitempty"`
	// Middle name of the person.
	MiddleName *string `json:"middle_name,omitempty"`
	// The initials of the person, usually derived from their first, middle, and last names.
	Initials *string `json:"initials,omitempty"`
	// The date of birth of the person.
	Birthday    *types.Date `json:"birthday,omitempty"`
	CoverLetter *string     `json:"cover_letter,omitempty"`
	// The URL of the photo of a person.
	PhotoURL *string `json:"photo_url,omitempty"`
	// Typically a list of previous companies where the contact has worked or schools that the contact has attended
	Headline *string `json:"headline,omitempty"`
	// The job title of the person.
	Title          *string               `json:"title,omitempty"`
	Emails         []Email               `json:"emails,omitempty"`
	CustomFields   []CustomField         `json:"custom_fields,omitempty"`
	PhoneNumbers   []PhoneNumber         `json:"phone_numbers,omitempty"`
	Addresses      []Address             `json:"addresses,omitempty"`
	Websites       []ApplicantWebsite    `json:"websites,omitempty"`
	SocialLinks    []ApplicantSocialLink `json:"social_links,omitempty"`
	StageID        *string               `json:"stage_id,omitempty"`
	RecruiterID    *string               `json:"recruiter_id,omitempty"`
	CoordinatorID  *string               `json:"coordinator_id,omitempty"`
	ApplicationIds []string              `json:"application_ids,omitempty"`
	Applications   []string              `json:"applications,omitempty"`
	Followers      []string              `json:"followers,omitempty"`
	Sources        []string              `json:"sources,omitempty"`
	Confidential   *bool                 `json:"confidential,omitempty"`
	Anonymized     *bool                 `json:"anonymized,omitempty"`
	Tags           []string              `json:"tags,omitempty"`
	Archived       *bool                 `json:"archived,omitempty"`
	OwnerID        *string               `json:"owner_id,omitempty"`
	RecordURL      *string               `json:"record_url,omitempty"`
	// Flag to indicate if the object is deleted.
	Deleted *bool `json:"deleted,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (a ApplicantInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicantInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ApplicantInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ApplicantInput) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *ApplicantInput) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *ApplicantInput) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *ApplicantInput) GetInitials() *string {
	if o == nil {
		return nil
	}
	return o.Initials
}

func (o *ApplicantInput) GetBirthday() *types.Date {
	if o == nil {
		return nil
	}
	return o.Birthday
}

func (o *ApplicantInput) GetCoverLetter() *string {
	if o == nil {
		return nil
	}
	return o.CoverLetter
}

func (o *ApplicantInput) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *ApplicantInput) GetHeadline() *string {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *ApplicantInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ApplicantInput) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *ApplicantInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ApplicantInput) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *ApplicantInput) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *ApplicantInput) GetWebsites() []ApplicantWebsite {
	if o == nil {
		return nil
	}
	return o.Websites
}

func (o *ApplicantInput) GetSocialLinks() []ApplicantSocialLink {
	if o == nil {
		return nil
	}
	return o.SocialLinks
}

func (o *ApplicantInput) GetStageID() *string {
	if o == nil {
		return nil
	}
	return o.StageID
}

func (o *ApplicantInput) GetRecruiterID() *string {
	if o == nil {
		return nil
	}
	return o.RecruiterID
}

func (o *ApplicantInput) GetCoordinatorID() *string {
	if o == nil {
		return nil
	}
	return o.CoordinatorID
}

func (o *ApplicantInput) GetApplicationIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicationIds
}

func (o *ApplicantInput) GetApplications() []string {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *ApplicantInput) GetFollowers() []string {
	if o == nil {
		return nil
	}
	return o.Followers
}

func (o *ApplicantInput) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *ApplicantInput) GetConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.Confidential
}

func (o *ApplicantInput) GetAnonymized() *bool {
	if o == nil {
		return nil
	}
	return o.Anonymized
}

func (o *ApplicantInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ApplicantInput) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *ApplicantInput) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *ApplicantInput) GetRecordURL() *string {
	if o == nil {
		return nil
	}
	return o.RecordURL
}

func (o *ApplicantInput) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *ApplicantInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
