// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// LedgerAccountClassification - The classification of account.
type LedgerAccountClassification string

const (
	LedgerAccountClassificationAsset        LedgerAccountClassification = "asset"
	LedgerAccountClassificationEquity       LedgerAccountClassification = "equity"
	LedgerAccountClassificationExpense      LedgerAccountClassification = "expense"
	LedgerAccountClassificationLiability    LedgerAccountClassification = "liability"
	LedgerAccountClassificationRevenue      LedgerAccountClassification = "revenue"
	LedgerAccountClassificationIncome       LedgerAccountClassification = "income"
	LedgerAccountClassificationOtherIncome  LedgerAccountClassification = "other_income"
	LedgerAccountClassificationOtherExpense LedgerAccountClassification = "other_expense"
	LedgerAccountClassificationCostsOfSales LedgerAccountClassification = "costs_of_sales"
	LedgerAccountClassificationOther        LedgerAccountClassification = "other"
)

func (e LedgerAccountClassification) ToPointer() *LedgerAccountClassification {
	return &e
}
func (e *LedgerAccountClassification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asset":
		fallthrough
	case "equity":
		fallthrough
	case "expense":
		fallthrough
	case "liability":
		fallthrough
	case "revenue":
		fallthrough
	case "income":
		fallthrough
	case "other_income":
		fallthrough
	case "other_expense":
		fallthrough
	case "costs_of_sales":
		fallthrough
	case "other":
		*e = LedgerAccountClassification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LedgerAccountClassification: %v", v)
	}
}

// LedgerAccountType - The type of account.
type LedgerAccountType string

const (
	LedgerAccountTypeAccountsReceivable  LedgerAccountType = "accounts_receivable"
	LedgerAccountTypeRevenue             LedgerAccountType = "revenue"
	LedgerAccountTypeSales               LedgerAccountType = "sales"
	LedgerAccountTypeOtherIncome         LedgerAccountType = "other_income"
	LedgerAccountTypeBank                LedgerAccountType = "bank"
	LedgerAccountTypeCurrentAsset        LedgerAccountType = "current_asset"
	LedgerAccountTypeFixedAsset          LedgerAccountType = "fixed_asset"
	LedgerAccountTypeNonCurrentAsset     LedgerAccountType = "non_current_asset"
	LedgerAccountTypeOtherAsset          LedgerAccountType = "other_asset"
	LedgerAccountTypeBalancesheet        LedgerAccountType = "balancesheet"
	LedgerAccountTypeEquity              LedgerAccountType = "equity"
	LedgerAccountTypeExpense             LedgerAccountType = "expense"
	LedgerAccountTypeOtherExpense        LedgerAccountType = "other_expense"
	LedgerAccountTypeCostsOfSales        LedgerAccountType = "costs_of_sales"
	LedgerAccountTypeAccountsPayable     LedgerAccountType = "accounts_payable"
	LedgerAccountTypeCreditCard          LedgerAccountType = "credit_card"
	LedgerAccountTypeCurrentLiability    LedgerAccountType = "current_liability"
	LedgerAccountTypeNonCurrentLiability LedgerAccountType = "non_current_liability"
	LedgerAccountTypeOtherLiability      LedgerAccountType = "other_liability"
	LedgerAccountTypeOther               LedgerAccountType = "other"
)

func (e LedgerAccountType) ToPointer() *LedgerAccountType {
	return &e
}
func (e *LedgerAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounts_receivable":
		fallthrough
	case "revenue":
		fallthrough
	case "sales":
		fallthrough
	case "other_income":
		fallthrough
	case "bank":
		fallthrough
	case "current_asset":
		fallthrough
	case "fixed_asset":
		fallthrough
	case "non_current_asset":
		fallthrough
	case "other_asset":
		fallthrough
	case "balancesheet":
		fallthrough
	case "equity":
		fallthrough
	case "expense":
		fallthrough
	case "other_expense":
		fallthrough
	case "costs_of_sales":
		fallthrough
	case "accounts_payable":
		fallthrough
	case "credit_card":
		fallthrough
	case "current_liability":
		fallthrough
	case "non_current_liability":
		fallthrough
	case "other_liability":
		fallthrough
	case "other":
		*e = LedgerAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LedgerAccountType: %v", v)
	}
}

// AccountStatus - The status of the account.
type AccountStatus string

const (
	AccountStatusActive   AccountStatus = "active"
	AccountStatusInactive AccountStatus = "inactive"
	AccountStatusArchived AccountStatus = "archived"
)

func (e AccountStatus) ToPointer() *AccountStatus {
	return &e
}
func (e *AccountStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "archived":
		*e = AccountStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountStatus: %v", v)
	}
}

type LedgerAccountCategory struct {
	ID *string `json:"id,omitempty"`
	// The name of the category.
	Name *string `json:"name,omitempty"`
}

func (o *LedgerAccountCategory) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LedgerAccountCategory) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type ParentAccount struct {
	// The ID of the parent account.
	ID *string `json:"id,omitempty"`
	// The name of the parent account.
	Name *string `json:"name,omitempty"`
	// The human readable display ID used when displaying the parent account
	DisplayID *string `json:"display_id,omitempty"`
}

func (o *ParentAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ParentAccount) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ParentAccount) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

type SubAccount struct {
	// The ID of the sub account.
	ID *string `json:"id,omitempty"`
	// The name of the sub account.
	AccountSubName *string `json:"account_sub_name,omitempty"`
}

func (o *SubAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SubAccount) GetAccountSubName() *string {
	if o == nil {
		return nil
	}
	return o.AccountSubName
}

type LedgerAccountSubsidiary struct {
	// The ID of the subsidiary.
	ID *string `json:"id,omitempty"`
}

func (o *LedgerAccountSubsidiary) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type LedgerAccount struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The human readable display ID used when displaying the account
	DisplayID *string `json:"display_id,omitempty"`
	// The nominal code of the ledger account.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	NominalCode *string `json:"nominal_code,omitempty"`
	// The code assigned to the account.
	Code *string `json:"code,omitempty"`
	// The classification of account.
	Classification *LedgerAccountClassification `json:"classification,omitempty"`
	// The type of account.
	Type *LedgerAccountType `json:"type,omitempty"`
	// The sub type of account.
	SubType *string `json:"sub_type,omitempty"`
	// The name of the account.
	Name *string `json:"name,omitempty"`
	// The fully qualified name of the account.
	FullyQualifiedName *string `json:"fully_qualified_name,omitempty"`
	// The description of the account.
	Description *string `json:"description,omitempty"`
	// The opening balance of the account.
	OpeningBalance *float64 `json:"opening_balance,omitempty"`
	// The current balance of the account.
	CurrentBalance *float64 `json:"current_balance,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The tax type of the account.
	TaxType *string        `json:"tax_type,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	Level   *float64       `json:"level,omitempty"`
	// Whether the account is active or not.
	Active *bool `json:"active,omitempty"`
	// The status of the account.
	Status *AccountStatus `json:"status,omitempty"`
	// Whether the account is a header or not.
	Header      *bool        `json:"header,omitempty"`
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	// The categories of the account.
	Categories    []LedgerAccountCategory `json:"categories,omitempty"`
	ParentAccount *ParentAccount          `json:"parent_account,omitempty"`
	// Whether the account is a sub account or not.
	SubAccount *bool `json:"sub_account,omitempty"`
	// The sub accounts of the account.
	SubAccounts []SubAccount `json:"sub_accounts,omitempty"`
	// Reconciliation Date means the last calendar day of each Reconciliation Period.
	LastReconciliationDate *types.Date `json:"last_reconciliation_date,omitempty"`
	// The subsidiaries the account belongs to.
	Subsidiaries []LedgerAccountSubsidiary `json:"subsidiaries,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	CustomFields   []CustomField  `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (l LedgerAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LedgerAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LedgerAccount) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LedgerAccount) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *LedgerAccount) GetNominalCode() *string {
	if o == nil {
		return nil
	}
	return o.NominalCode
}

func (o *LedgerAccount) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *LedgerAccount) GetClassification() *LedgerAccountClassification {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *LedgerAccount) GetType() *LedgerAccountType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *LedgerAccount) GetSubType() *string {
	if o == nil {
		return nil
	}
	return o.SubType
}

func (o *LedgerAccount) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LedgerAccount) GetFullyQualifiedName() *string {
	if o == nil {
		return nil
	}
	return o.FullyQualifiedName
}

func (o *LedgerAccount) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LedgerAccount) GetOpeningBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.OpeningBalance
}

func (o *LedgerAccount) GetCurrentBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrentBalance
}

func (o *LedgerAccount) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *LedgerAccount) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *LedgerAccount) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *LedgerAccount) GetLevel() *float64 {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *LedgerAccount) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *LedgerAccount) GetStatus() *AccountStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *LedgerAccount) GetHeader() *bool {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *LedgerAccount) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *LedgerAccount) GetCategories() []LedgerAccountCategory {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *LedgerAccount) GetParentAccount() *ParentAccount {
	if o == nil {
		return nil
	}
	return o.ParentAccount
}

func (o *LedgerAccount) GetSubAccount() *bool {
	if o == nil {
		return nil
	}
	return o.SubAccount
}

func (o *LedgerAccount) GetSubAccounts() []SubAccount {
	if o == nil {
		return nil
	}
	return o.SubAccounts
}

func (o *LedgerAccount) GetLastReconciliationDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.LastReconciliationDate
}

func (o *LedgerAccount) GetSubsidiaries() []LedgerAccountSubsidiary {
	if o == nil {
		return nil
	}
	return o.Subsidiaries
}

func (o *LedgerAccount) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *LedgerAccount) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *LedgerAccount) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *LedgerAccount) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *LedgerAccount) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *LedgerAccount) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *LedgerAccount) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LedgerAccount) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type LedgerAccountInput struct {
	// The human readable display ID used when displaying the account
	DisplayID *string `json:"display_id,omitempty"`
	// The nominal code of the ledger account.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	NominalCode *string `json:"nominal_code,omitempty"`
	// The code assigned to the account.
	Code *string `json:"code,omitempty"`
	// The classification of account.
	Classification *LedgerAccountClassification `json:"classification,omitempty"`
	// The type of account.
	Type *LedgerAccountType `json:"type,omitempty"`
	// The sub type of account.
	SubType *string `json:"sub_type,omitempty"`
	// The name of the account.
	Name *string `json:"name,omitempty"`
	// The fully qualified name of the account.
	FullyQualifiedName *string `json:"fully_qualified_name,omitempty"`
	// The description of the account.
	Description *string `json:"description,omitempty"`
	// The opening balance of the account.
	OpeningBalance *float64 `json:"opening_balance,omitempty"`
	// The current balance of the account.
	CurrentBalance *float64 `json:"current_balance,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// The tax type of the account.
	TaxType *string             `json:"tax_type,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	Level   *float64            `json:"level,omitempty"`
	// Whether the account is active or not.
	Active *bool `json:"active,omitempty"`
	// The status of the account.
	Status *AccountStatus `json:"status,omitempty"`
	// Whether the account is a header or not.
	Header        *bool          `json:"header,omitempty"`
	BankAccount   *BankAccount   `json:"bank_account,omitempty"`
	ParentAccount *ParentAccount `json:"parent_account,omitempty"`
	// Whether the account is a sub account or not.
	SubAccount *bool `json:"sub_account,omitempty"`
	// Reconciliation Date means the last calendar day of each Reconciliation Period.
	LastReconciliationDate *types.Date `json:"last_reconciliation_date,omitempty"`
	// The subsidiaries the account belongs to.
	Subsidiaries []LedgerAccountSubsidiary `json:"subsidiaries,omitempty"`
	CustomFields []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (l LedgerAccountInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LedgerAccountInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LedgerAccountInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *LedgerAccountInput) GetNominalCode() *string {
	if o == nil {
		return nil
	}
	return o.NominalCode
}

func (o *LedgerAccountInput) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *LedgerAccountInput) GetClassification() *LedgerAccountClassification {
	if o == nil {
		return nil
	}
	return o.Classification
}

func (o *LedgerAccountInput) GetType() *LedgerAccountType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *LedgerAccountInput) GetSubType() *string {
	if o == nil {
		return nil
	}
	return o.SubType
}

func (o *LedgerAccountInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LedgerAccountInput) GetFullyQualifiedName() *string {
	if o == nil {
		return nil
	}
	return o.FullyQualifiedName
}

func (o *LedgerAccountInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *LedgerAccountInput) GetOpeningBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.OpeningBalance
}

func (o *LedgerAccountInput) GetCurrentBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrentBalance
}

func (o *LedgerAccountInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *LedgerAccountInput) GetTaxType() *string {
	if o == nil {
		return nil
	}
	return o.TaxType
}

func (o *LedgerAccountInput) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *LedgerAccountInput) GetLevel() *float64 {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *LedgerAccountInput) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *LedgerAccountInput) GetStatus() *AccountStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *LedgerAccountInput) GetHeader() *bool {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *LedgerAccountInput) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *LedgerAccountInput) GetParentAccount() *ParentAccount {
	if o == nil {
		return nil
	}
	return o.ParentAccount
}

func (o *LedgerAccountInput) GetSubAccount() *bool {
	if o == nil {
		return nil
	}
	return o.SubAccount
}

func (o *LedgerAccountInput) GetLastReconciliationDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.LastReconciliationDate
}

func (o *LedgerAccountInput) GetSubsidiaries() []LedgerAccountSubsidiary {
	if o == nil {
		return nil
	}
	return o.Subsidiaries
}

func (o *LedgerAccountInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *LedgerAccountInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *LedgerAccountInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
