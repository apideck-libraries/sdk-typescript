// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type FormFieldOptionGroupOptionType string

const (
	FormFieldOptionGroupOptionTypeGroup FormFieldOptionGroupOptionType = "group"
)

func (e FormFieldOptionGroupOptionType) ToPointer() *FormFieldOptionGroupOptionType {
	return &e
}
func (e *FormFieldOptionGroupOptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "group":
		*e = FormFieldOptionGroupOptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FormFieldOptionGroupOptionType: %v", v)
	}
}

type FormFieldOptionGroup struct {
	ID         *string                        `json:"id,omitempty"`
	Label      string                         `json:"label"`
	Options    []SimpleFormFieldOption        `json:"options"`
	OptionType FormFieldOptionGroupOptionType `json:"option_type"`
}

func (o *FormFieldOptionGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FormFieldOptionGroup) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *FormFieldOptionGroup) GetOptions() []SimpleFormFieldOption {
	if o == nil {
		return []SimpleFormFieldOption{}
	}
	return o.Options
}

func (o *FormFieldOptionGroup) GetOptionType() FormFieldOptionGroupOptionType {
	if o == nil {
		return FormFieldOptionGroupOptionType("")
	}
	return o.OptionType
}
