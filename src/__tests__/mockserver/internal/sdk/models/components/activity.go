// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ActivityType - The type of the activity
type ActivityType string

const (
	ActivityTypeCall       ActivityType = "call"
	ActivityTypeMeeting    ActivityType = "meeting"
	ActivityTypeEmail      ActivityType = "email"
	ActivityTypeNote       ActivityType = "note"
	ActivityTypeTask       ActivityType = "task"
	ActivityTypeDeadline   ActivityType = "deadline"
	ActivityTypeSendLetter ActivityType = "send-letter"
	ActivityTypeSendQuote  ActivityType = "send-quote"
	ActivityTypeOther      ActivityType = "other"
)

func (e ActivityType) ToPointer() *ActivityType {
	return &e
}
func (e *ActivityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "call":
		fallthrough
	case "meeting":
		fallthrough
	case "email":
		fallthrough
	case "note":
		fallthrough
	case "task":
		fallthrough
	case "deadline":
		fallthrough
	case "send-letter":
		fallthrough
	case "send-quote":
		fallthrough
	case "other":
		*e = ActivityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityType: %v", v)
	}
}

type ShowAs string

const (
	ShowAsFree ShowAs = "free"
	ShowAsBusy ShowAs = "busy"
)

func (e ShowAs) ToPointer() *ShowAs {
	return &e
}
func (e *ShowAs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		fallthrough
	case "busy":
		*e = ShowAs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShowAs: %v", v)
	}
}

type Activity struct {
	// The unique identifier of the activity
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// The date and time of the activity
	ActivityDatetime *string `json:"activity_datetime,omitempty"`
	// The duration of the activity in seconds
	DurationSeconds *int64 `json:"duration_seconds,omitempty"`
	// The user related to the activity
	UserID *string `json:"user_id,omitempty"`
	// The account related to the activity
	AccountID *string `json:"account_id,omitempty"`
	// The contact related to the activity
	ContactID *string `json:"contact_id,omitempty"`
	// The company related to the activity
	CompanyID *string `json:"company_id,omitempty"`
	// The opportunity related to the activity
	OpportunityID *string `json:"opportunity_id,omitempty"`
	// The lead related to the activity
	LeadID *string `json:"lead_id,omitempty"`
	// The owner of the activity
	OwnerID *string `json:"owner_id,omitempty"`
	// The campaign related to the activity
	CampaignID *string `json:"campaign_id,omitempty"`
	// The case related to the activity
	CaseID *string `json:"case_id,omitempty"`
	// The asset related to the activity
	AssetID *string `json:"asset_id,omitempty"`
	// The contract related to the activity
	ContractID *string `json:"contract_id,omitempty"`
	// The product related to the activity
	ProductID *string `json:"product_id,omitempty"`
	// The solution related to the activity
	SolutionID *string `json:"solution_id,omitempty"`
	// The custom object related to the activity
	CustomObjectID *string `json:"custom_object_id,omitempty"`
	// The type of the activity
	Type *ActivityType `json:"type"`
	// The title of the activity
	Title *string `json:"title,omitempty"`
	// A description of the activity
	Description *string `json:"description,omitempty"`
	// An internal note about the activity
	Note *string `json:"note,omitempty"`
	// The location of the activity
	Location        *string  `json:"location,omitempty"`
	LocationAddress *Address `json:"location_address,omitempty"`
	// Whether the Activity is an all day event or not
	AllDayEvent *bool `json:"all_day_event,omitempty"`
	// Whether the Activity is private or not
	Private *bool `json:"private,omitempty"`
	// Whether the Activity is a group event or not
	GroupEvent *bool `json:"group_event,omitempty"`
	// The sub type of the group event
	EventSubType *string `json:"event_sub_type,omitempty"`
	// The type of the group event
	GroupEventType *string `json:"group_event_type,omitempty"`
	// Whether the activity is a child of another activity or not
	Child *bool `json:"child,omitempty"`
	// Whether the activity is archived or not
	Archived *bool `json:"archived,omitempty"`
	// Whether the activity is deleted or not
	Deleted *bool   `json:"deleted,omitempty"`
	ShowAs  *ShowAs `json:"show_as,omitempty"`
	// Whether the Activity is done or not
	Done *bool `json:"done,omitempty"`
	// The start date and time of the activity
	StartDatetime *string `json:"start_datetime,omitempty"`
	// The end date and time of the activity
	EndDatetime *string `json:"end_datetime,omitempty"`
	// The duration of the activity in minutes
	DurationMinutes *int64 `json:"duration_minutes,omitempty"`
	// The date of the activity
	ActivityDate *string `json:"activity_date,omitempty"`
	// The end date of the activity
	EndDate *string `json:"end_date,omitempty"`
	// Whether the activity is recurrent or not
	Recurrent *bool `json:"recurrent,omitempty"`
	// The date and time of the reminder
	ReminderDatetime *string `json:"reminder_datetime,omitempty"`
	// Whether the reminder is set or not
	ReminderSet *bool `json:"reminder_set,omitempty"`
	// The URL of the video conference
	VideoConferenceURL *string `json:"video_conference_url,omitempty"`
	// The ID of the video conference
	VideoConferenceID *string `json:"video_conference_id,omitempty"`
	// Custom fields of the activity
	CustomFields []CustomField      `json:"custom_fields,omitempty"`
	Attendees    []ActivityAttendee `json:"attendees,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings *CustomMappings `json:"custom_mappings,omitempty"`
	// The user who last updated the activity
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the activity
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the activity was last updated
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The date and time when the activity was created
	CreatedAt *string `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (o *Activity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Activity) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *Activity) GetActivityDatetime() *string {
	if o == nil {
		return nil
	}
	return o.ActivityDatetime
}

func (o *Activity) GetDurationSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationSeconds
}

func (o *Activity) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Activity) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Activity) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *Activity) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Activity) GetOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.OpportunityID
}

func (o *Activity) GetLeadID() *string {
	if o == nil {
		return nil
	}
	return o.LeadID
}

func (o *Activity) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Activity) GetCampaignID() *string {
	if o == nil {
		return nil
	}
	return o.CampaignID
}

func (o *Activity) GetCaseID() *string {
	if o == nil {
		return nil
	}
	return o.CaseID
}

func (o *Activity) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *Activity) GetContractID() *string {
	if o == nil {
		return nil
	}
	return o.ContractID
}

func (o *Activity) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *Activity) GetSolutionID() *string {
	if o == nil {
		return nil
	}
	return o.SolutionID
}

func (o *Activity) GetCustomObjectID() *string {
	if o == nil {
		return nil
	}
	return o.CustomObjectID
}

func (o *Activity) GetType() *ActivityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Activity) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Activity) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Activity) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *Activity) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *Activity) GetLocationAddress() *Address {
	if o == nil {
		return nil
	}
	return o.LocationAddress
}

func (o *Activity) GetAllDayEvent() *bool {
	if o == nil {
		return nil
	}
	return o.AllDayEvent
}

func (o *Activity) GetPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.Private
}

func (o *Activity) GetGroupEvent() *bool {
	if o == nil {
		return nil
	}
	return o.GroupEvent
}

func (o *Activity) GetEventSubType() *string {
	if o == nil {
		return nil
	}
	return o.EventSubType
}

func (o *Activity) GetGroupEventType() *string {
	if o == nil {
		return nil
	}
	return o.GroupEventType
}

func (o *Activity) GetChild() *bool {
	if o == nil {
		return nil
	}
	return o.Child
}

func (o *Activity) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *Activity) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *Activity) GetShowAs() *ShowAs {
	if o == nil {
		return nil
	}
	return o.ShowAs
}

func (o *Activity) GetDone() *bool {
	if o == nil {
		return nil
	}
	return o.Done
}

func (o *Activity) GetStartDatetime() *string {
	if o == nil {
		return nil
	}
	return o.StartDatetime
}

func (o *Activity) GetEndDatetime() *string {
	if o == nil {
		return nil
	}
	return o.EndDatetime
}

func (o *Activity) GetDurationMinutes() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationMinutes
}

func (o *Activity) GetActivityDate() *string {
	if o == nil {
		return nil
	}
	return o.ActivityDate
}

func (o *Activity) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *Activity) GetRecurrent() *bool {
	if o == nil {
		return nil
	}
	return o.Recurrent
}

func (o *Activity) GetReminderDatetime() *string {
	if o == nil {
		return nil
	}
	return o.ReminderDatetime
}

func (o *Activity) GetReminderSet() *bool {
	if o == nil {
		return nil
	}
	return o.ReminderSet
}

func (o *Activity) GetVideoConferenceURL() *string {
	if o == nil {
		return nil
	}
	return o.VideoConferenceURL
}

func (o *Activity) GetVideoConferenceID() *string {
	if o == nil {
		return nil
	}
	return o.VideoConferenceID
}

func (o *Activity) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Activity) GetAttendees() []ActivityAttendee {
	if o == nil {
		return nil
	}
	return o.Attendees
}

func (o *Activity) GetCustomMappings() *CustomMappings {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Activity) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Activity) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Activity) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Activity) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Activity) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ActivityInput struct {
	// The date and time of the activity
	ActivityDatetime *string `json:"activity_datetime,omitempty"`
	// The duration of the activity in seconds
	DurationSeconds *int64 `json:"duration_seconds,omitempty"`
	// The user related to the activity
	UserID *string `json:"user_id,omitempty"`
	// The account related to the activity
	AccountID *string `json:"account_id,omitempty"`
	// The contact related to the activity
	ContactID *string `json:"contact_id,omitempty"`
	// The company related to the activity
	CompanyID *string `json:"company_id,omitempty"`
	// The opportunity related to the activity
	OpportunityID *string `json:"opportunity_id,omitempty"`
	// The lead related to the activity
	LeadID *string `json:"lead_id,omitempty"`
	// The owner of the activity
	OwnerID *string `json:"owner_id,omitempty"`
	// The campaign related to the activity
	CampaignID *string `json:"campaign_id,omitempty"`
	// The case related to the activity
	CaseID *string `json:"case_id,omitempty"`
	// The asset related to the activity
	AssetID *string `json:"asset_id,omitempty"`
	// The contract related to the activity
	ContractID *string `json:"contract_id,omitempty"`
	// The product related to the activity
	ProductID *string `json:"product_id,omitempty"`
	// The solution related to the activity
	SolutionID *string `json:"solution_id,omitempty"`
	// The custom object related to the activity
	CustomObjectID *string `json:"custom_object_id,omitempty"`
	// The type of the activity
	Type *ActivityType `json:"type"`
	// The title of the activity
	Title *string `json:"title,omitempty"`
	// A description of the activity
	Description *string `json:"description,omitempty"`
	// An internal note about the activity
	Note *string `json:"note,omitempty"`
	// The location of the activity
	Location        *string  `json:"location,omitempty"`
	LocationAddress *Address `json:"location_address,omitempty"`
	// Whether the Activity is an all day event or not
	AllDayEvent *bool `json:"all_day_event,omitempty"`
	// Whether the Activity is private or not
	Private *bool `json:"private,omitempty"`
	// Whether the Activity is a group event or not
	GroupEvent *bool `json:"group_event,omitempty"`
	// The sub type of the group event
	EventSubType *string `json:"event_sub_type,omitempty"`
	// The type of the group event
	GroupEventType *string `json:"group_event_type,omitempty"`
	// Whether the activity is a child of another activity or not
	Child *bool `json:"child,omitempty"`
	// Whether the activity is archived or not
	Archived *bool `json:"archived,omitempty"`
	// Whether the activity is deleted or not
	Deleted *bool   `json:"deleted,omitempty"`
	ShowAs  *ShowAs `json:"show_as,omitempty"`
	// Whether the Activity is done or not
	Done *bool `json:"done,omitempty"`
	// The start date and time of the activity
	StartDatetime *string `json:"start_datetime,omitempty"`
	// The end date and time of the activity
	EndDatetime *string `json:"end_datetime,omitempty"`
	// The date of the activity
	ActivityDate *string `json:"activity_date,omitempty"`
	// The end date of the activity
	EndDate *string `json:"end_date,omitempty"`
	// Whether the activity is recurrent or not
	Recurrent *bool `json:"recurrent,omitempty"`
	// The date and time of the reminder
	ReminderDatetime *string `json:"reminder_datetime,omitempty"`
	// Whether the reminder is set or not
	ReminderSet *bool `json:"reminder_set,omitempty"`
	// The URL of the video conference
	VideoConferenceURL *string `json:"video_conference_url,omitempty"`
	// The ID of the video conference
	VideoConferenceID *string `json:"video_conference_id,omitempty"`
	// Custom fields of the activity
	CustomFields []CustomField           `json:"custom_fields,omitempty"`
	Attendees    []ActivityAttendeeInput `json:"attendees,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (o *ActivityInput) GetActivityDatetime() *string {
	if o == nil {
		return nil
	}
	return o.ActivityDatetime
}

func (o *ActivityInput) GetDurationSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.DurationSeconds
}

func (o *ActivityInput) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ActivityInput) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *ActivityInput) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *ActivityInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ActivityInput) GetOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.OpportunityID
}

func (o *ActivityInput) GetLeadID() *string {
	if o == nil {
		return nil
	}
	return o.LeadID
}

func (o *ActivityInput) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *ActivityInput) GetCampaignID() *string {
	if o == nil {
		return nil
	}
	return o.CampaignID
}

func (o *ActivityInput) GetCaseID() *string {
	if o == nil {
		return nil
	}
	return o.CaseID
}

func (o *ActivityInput) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *ActivityInput) GetContractID() *string {
	if o == nil {
		return nil
	}
	return o.ContractID
}

func (o *ActivityInput) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *ActivityInput) GetSolutionID() *string {
	if o == nil {
		return nil
	}
	return o.SolutionID
}

func (o *ActivityInput) GetCustomObjectID() *string {
	if o == nil {
		return nil
	}
	return o.CustomObjectID
}

func (o *ActivityInput) GetType() *ActivityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ActivityInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *ActivityInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ActivityInput) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *ActivityInput) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *ActivityInput) GetLocationAddress() *Address {
	if o == nil {
		return nil
	}
	return o.LocationAddress
}

func (o *ActivityInput) GetAllDayEvent() *bool {
	if o == nil {
		return nil
	}
	return o.AllDayEvent
}

func (o *ActivityInput) GetPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.Private
}

func (o *ActivityInput) GetGroupEvent() *bool {
	if o == nil {
		return nil
	}
	return o.GroupEvent
}

func (o *ActivityInput) GetEventSubType() *string {
	if o == nil {
		return nil
	}
	return o.EventSubType
}

func (o *ActivityInput) GetGroupEventType() *string {
	if o == nil {
		return nil
	}
	return o.GroupEventType
}

func (o *ActivityInput) GetChild() *bool {
	if o == nil {
		return nil
	}
	return o.Child
}

func (o *ActivityInput) GetArchived() *bool {
	if o == nil {
		return nil
	}
	return o.Archived
}

func (o *ActivityInput) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *ActivityInput) GetShowAs() *ShowAs {
	if o == nil {
		return nil
	}
	return o.ShowAs
}

func (o *ActivityInput) GetDone() *bool {
	if o == nil {
		return nil
	}
	return o.Done
}

func (o *ActivityInput) GetStartDatetime() *string {
	if o == nil {
		return nil
	}
	return o.StartDatetime
}

func (o *ActivityInput) GetEndDatetime() *string {
	if o == nil {
		return nil
	}
	return o.EndDatetime
}

func (o *ActivityInput) GetActivityDate() *string {
	if o == nil {
		return nil
	}
	return o.ActivityDate
}

func (o *ActivityInput) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ActivityInput) GetRecurrent() *bool {
	if o == nil {
		return nil
	}
	return o.Recurrent
}

func (o *ActivityInput) GetReminderDatetime() *string {
	if o == nil {
		return nil
	}
	return o.ReminderDatetime
}

func (o *ActivityInput) GetReminderSet() *bool {
	if o == nil {
		return nil
	}
	return o.ReminderSet
}

func (o *ActivityInput) GetVideoConferenceURL() *string {
	if o == nil {
		return nil
	}
	return o.VideoConferenceURL
}

func (o *ActivityInput) GetVideoConferenceID() *string {
	if o == nil {
		return nil
	}
	return o.VideoConferenceID
}

func (o *ActivityInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ActivityInput) GetAttendees() []ActivityAttendeeInput {
	if o == nil {
		return nil
	}
	return o.Attendees
}

func (o *ActivityInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
