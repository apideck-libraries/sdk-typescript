// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ExpensePaymentType - The type of payment for the expense.
type ExpensePaymentType string

const (
	ExpensePaymentTypeCash       ExpensePaymentType = "cash"
	ExpensePaymentTypeCheck      ExpensePaymentType = "check"
	ExpensePaymentTypeCreditCard ExpensePaymentType = "credit_card"
)

func (e ExpensePaymentType) ToPointer() *ExpensePaymentType {
	return &e
}
func (e *ExpensePaymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "check":
		fallthrough
	case "credit_card":
		*e = ExpensePaymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpensePaymentType: %v", v)
	}
}

// ExpenseType - The type of expense.
type ExpenseType string

const (
	ExpenseTypeExpense ExpenseType = "expense"
	ExpenseTypeRefund  ExpenseType = "refund"
)

func (e ExpenseType) ToPointer() *ExpenseType {
	return &e
}
func (e *ExpenseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "expense":
		fallthrough
	case "refund":
		*e = ExpenseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExpenseType: %v", v)
	}
}

type Expense struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to.
	AccountID string `json:"account_id"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string        `json:"memo,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItem `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference    *string       `json:"reference,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e Expense) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Expense) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Expense) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Expense) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Expense) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *Expense) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *Expense) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *Expense) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *Expense) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Expense) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Expense) GetPaymentType() *ExpensePaymentType {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *Expense) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Expense) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Expense) GetType() *ExpenseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Expense) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *Expense) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Expense) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *Expense) GetLineItems() []ExpenseLineItem {
	if o == nil {
		return []ExpenseLineItem{}
	}
	return o.LineItems
}

func (o *Expense) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Expense) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Expense) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Expense) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Expense) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Expense) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Expense) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Expense) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Expense) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type ExpenseInput struct {
	// Number.
	Number *string `json:"number,omitempty"`
	// The date of the transaction - YYYY:MM::DDThh:mm:ss.sTZD
	TransactionDate *time.Time `json:"transaction_date"`
	// The unique identifier for the ledger account that this expense should be credited to.
	AccountID string `json:"account_id"`
	// The ID of the customer this entity is linked to. Used for expenses that should be marked as billable to customers.
	CustomerID *string `json:"customer_id,omitempty"`
	// The ID of the supplier this entity is linked to.
	SupplierID *string `json:"supplier_id,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The type of payment for the expense.
	PaymentType *ExpensePaymentType `json:"payment_type,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// The type of expense.
	Type *ExpenseType `json:"type,omitempty"`
	// The memo of the expense.
	Memo    *string             `json:"memo,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// The total amount of the expense line item.
	TotalAmount *float64 `json:"total_amount,omitempty"`
	// Expense line items linked to this expense.
	LineItems []ExpenseLineItemInput `json:"line_items"`
	// Optional reference identifier for the transaction.
	Reference    *string       `json:"reference,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (e ExpenseInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExpenseInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExpenseInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *ExpenseInput) GetTransactionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.TransactionDate
}

func (o *ExpenseInput) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ExpenseInput) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *ExpenseInput) GetSupplierID() *string {
	if o == nil {
		return nil
	}
	return o.SupplierID
}

func (o *ExpenseInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ExpenseInput) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *ExpenseInput) GetPaymentType() *ExpensePaymentType {
	if o == nil {
		return nil
	}
	return o.PaymentType
}

func (o *ExpenseInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ExpenseInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *ExpenseInput) GetType() *ExpenseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ExpenseInput) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *ExpenseInput) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *ExpenseInput) GetTotalAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *ExpenseInput) GetLineItems() []ExpenseLineItemInput {
	if o == nil {
		return []ExpenseLineItemInput{}
	}
	return o.LineItems
}

func (o *ExpenseInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *ExpenseInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ExpenseInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *ExpenseInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
