// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// APIType - Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
type APIType string

const (
	APITypePlatform APIType = "platform"
	APITypeUnified  APIType = "unified"
)

func (e APIType) ToPointer() *APIType {
	return &e
}
func (e *APIType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "platform":
		fallthrough
	case "unified":
		*e = APIType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for APIType: %v", v)
	}
}

type Resources struct {
	// ID of the resource, typically a lowercased version of its name.
	ID *string `json:"id,omitempty"`
	// Name of the resource (plural)
	Name *string `json:"name,omitempty"`
	// Status of the resource. Resources with status live or beta are callable.
	Status *ResourceStatus `json:"status,omitempty"`
	// Exclude from mapping coverage
	ExcludedFromCoverage *bool `json:"excluded_from_coverage,omitempty"`
}

func (o *Resources) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Resources) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Resources) GetStatus() *ResourceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Resources) GetExcludedFromCoverage() *bool {
	if o == nil {
		return nil
	}
	return o.ExcludedFromCoverage
}

type API struct {
	// ID of the API.
	ID *string `json:"id,omitempty"`
	// Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.
	Type *APIType `json:"type,omitempty"`
	// Name of the API.
	Name *string `json:"name,omitempty"`
	// Description of the API.
	Description *string `json:"description,omitempty"`
	// Status of the API. APIs with status live or beta are callable.
	Status *APIStatus `json:"status,omitempty"`
	// Link to the latest OpenAPI specification of the API.
	SpecURL *string `json:"spec_url,omitempty"`
	// Link to the API reference of the API.
	APIReferenceURL *string `json:"api_reference_url,omitempty"`
	// ID of the Postman collection of the API.
	PostmanCollectionID *string `json:"postman_collection_id,omitempty"`
	// List of categories the API belongs to.
	Categories []string `json:"categories,omitempty"`
	// List of resources supported in this API.
	Resources []Resources `json:"resources,omitempty"`
	// List of event types this API supports.
	Events []string `json:"events,omitempty"`
}

func (o *API) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *API) GetType() *APIType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *API) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *API) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *API) GetStatus() *APIStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *API) GetSpecURL() *string {
	if o == nil {
		return nil
	}
	return o.SpecURL
}

func (o *API) GetAPIReferenceURL() *string {
	if o == nil {
		return nil
	}
	return o.APIReferenceURL
}

func (o *API) GetPostmanCollectionID() *string {
	if o == nil {
		return nil
	}
	return o.PostmanCollectionID
}

func (o *API) GetCategories() []string {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *API) GetResources() []Resources {
	if o == nil {
		return nil
	}
	return o.Resources
}

func (o *API) GetEvents() []string {
	if o == nil {
		return nil
	}
	return o.Events
}
