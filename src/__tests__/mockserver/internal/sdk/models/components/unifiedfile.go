// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

// Permissions the current user has on this file.
type Permissions struct {
	// Whether the current user can download this file.
	Download *bool `json:"download,omitempty"`
}

func (o *Permissions) GetDownload() *bool {
	if o == nil {
		return nil
	}
	return o.Download
}

type UnifiedFile struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// The name of the file
	Name *string `json:"name"`
	// Optional description of the file
	Description *string `json:"description,omitempty"`
	// The type of resource. Could be file, folder or url
	Type *FileType `json:"type"`
	// The full path of the file or folder (includes the file name)
	Path *string `json:"path,omitempty"`
	// The MIME type of the file.
	MimeType *string `json:"mime_type,omitempty"`
	// Whether the current user can download this file
	Downloadable *bool `json:"downloadable,omitempty"`
	// The size of the file in bytes
	Size  *int64 `json:"size,omitempty"`
	Owner *Owner `json:"owner,omitempty"`
	// The parent folders of the file, starting from the root
	ParentFolders []LinkedFolder `json:"parent_folders,omitempty"`
	// Whether the list of parent folders is complete. Some connectors only return the direct parent of a file
	ParentFoldersComplete *bool `json:"parent_folders_complete,omitempty"`
	// Permissions the current user has on this file.
	Permissions *Permissions `json:"permissions,omitempty"`
	// Whether the current file is exportable to other file formats. This property is relevant for proprietary file formats such as Google Docs or Dropbox Paper.
	Exportable *bool `json:"exportable,omitempty"`
	// The available file formats when exporting this file.
	ExportFormats []string `json:"export_formats,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

func (u UnifiedFile) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UnifiedFile) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UnifiedFile) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UnifiedFile) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *UnifiedFile) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UnifiedFile) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UnifiedFile) GetType() *FileType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UnifiedFile) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *UnifiedFile) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *UnifiedFile) GetDownloadable() *bool {
	if o == nil {
		return nil
	}
	return o.Downloadable
}

func (o *UnifiedFile) GetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *UnifiedFile) GetOwner() *Owner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UnifiedFile) GetParentFolders() []LinkedFolder {
	if o == nil {
		return nil
	}
	return o.ParentFolders
}

func (o *UnifiedFile) GetParentFoldersComplete() *bool {
	if o == nil {
		return nil
	}
	return o.ParentFoldersComplete
}

func (o *UnifiedFile) GetPermissions() *Permissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UnifiedFile) GetExportable() *bool {
	if o == nil {
		return nil
	}
	return o.Exportable
}

func (o *UnifiedFile) GetExportFormats() []string {
	if o == nil {
		return nil
	}
	return o.ExportFormats
}

func (o *UnifiedFile) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *UnifiedFile) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UnifiedFile) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UnifiedFile) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UnifiedFile) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}
