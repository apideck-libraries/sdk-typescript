// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type NotFoundResponseDetailType string

const (
	NotFoundResponseDetailTypeStr      NotFoundResponseDetailType = "str"
	NotFoundResponseDetailTypeMapOfAny NotFoundResponseDetailType = "mapOfAny"
)

// NotFoundResponseDetail - Contains parameter or domain specific information related to the error and why it occurred.
type NotFoundResponseDetail struct {
	Str      *string        `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type NotFoundResponseDetailType
}

func CreateNotFoundResponseDetailStr(str string) NotFoundResponseDetail {
	typ := NotFoundResponseDetailTypeStr

	return NotFoundResponseDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateNotFoundResponseDetailMapOfAny(mapOfAny map[string]any) NotFoundResponseDetail {
	typ := NotFoundResponseDetailTypeMapOfAny

	return NotFoundResponseDetail{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *NotFoundResponseDetail) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NotFoundResponseDetailTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = NotFoundResponseDetailTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NotFoundResponseDetail", string(data))
}

func (u NotFoundResponseDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type NotFoundResponseDetail: all fields are null")
}
