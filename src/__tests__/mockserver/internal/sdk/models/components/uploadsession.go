// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type UploadSession struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Indicates if the upload session was completed successfully.
	Success *bool `json:"success,omitempty"`
	// Size in bytes of each part of the file that you will upload. Uploaded parts need to be this size for the upload to be successful.
	PartSize *float64 `json:"part_size,omitempty"`
	// Indicates if parts of the file can uploaded in parallel.
	ParallelUploadSupported *bool `json:"parallel_upload_supported,omitempty"`
	// The range of bytes that was successfully uploaded.
	UploadedByteRange *string    `json:"uploaded_byte_range,omitempty"`
	ExpiresAt         *time.Time `json:"expires_at,omitempty"`
}

func (u UploadSession) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UploadSession) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UploadSession) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UploadSession) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *UploadSession) GetPartSize() *float64 {
	if o == nil {
		return nil
	}
	return o.PartSize
}

func (o *UploadSession) GetParallelUploadSupported() *bool {
	if o == nil {
		return nil
	}
	return o.ParallelUploadSupported
}

func (o *UploadSession) GetUploadedByteRange() *string {
	if o == nil {
		return nil
	}
	return o.UploadedByteRange
}

func (o *UploadSession) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}
