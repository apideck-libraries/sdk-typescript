// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type IssuesFilter struct {
	// Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
	Status []string `queryParam:"name=status"`
	// Only return tickets since a specific date
	Since *time.Time `queryParam:"name=since"`
	// Only return tickets assigned to a specific user
	AssigneeID *string `queryParam:"name=assignee_id"`
}

func (i IssuesFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssuesFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssuesFilter) GetStatus() []string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *IssuesFilter) GetSince() *time.Time {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *IssuesFilter) GetAssigneeID() *string {
	if o == nil {
		return nil
	}
	return o.AssigneeID
}
