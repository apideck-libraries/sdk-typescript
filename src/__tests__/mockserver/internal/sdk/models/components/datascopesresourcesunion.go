// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// DataScopesResourcesEnum - Wildcard indicating all resources and fields when Data Scopes is selected
type DataScopesResourcesEnum string

const (
	DataScopesResourcesEnumWildcard DataScopesResourcesEnum = "*"
)

func (e DataScopesResourcesEnum) ToPointer() *DataScopesResourcesEnum {
	return &e
}
func (e *DataScopesResourcesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		*e = DataScopesResourcesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataScopesResourcesEnum: %v", v)
	}
}

type DataScopesResources struct {
	// Whether the field can be read
	Read *bool `json:"read,omitempty"`
	// Whether the field can be written to
	Write *bool `json:"write,omitempty"`
}

func (d DataScopesResources) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DataScopesResources) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *DataScopesResources) GetRead() *bool {
	if o == nil {
		return nil
	}
	return o.Read
}

func (o *DataScopesResources) GetWrite() *bool {
	if o == nil {
		return nil
	}
	return o.Write
}

type DataScopesResourcesUnionType string

const (
	DataScopesResourcesUnionTypeMapOfMapOfDataScopesResources DataScopesResourcesUnionType = "mapOfMapOfDataScopesResources"
	DataScopesResourcesUnionTypeDataScopesResourcesEnum       DataScopesResourcesUnionType = "DataScopesResources_enum"
)

// DataScopesResourcesUnion - Data scopes resource configuration that can be either detailed field permissions or a wildcard
type DataScopesResourcesUnion struct {
	MapOfMapOfDataScopesResources map[string]map[string]DataScopesResources `queryParam:"inline"`
	DataScopesResourcesEnum       *DataScopesResourcesEnum                  `queryParam:"inline"`

	Type DataScopesResourcesUnionType
}

func CreateDataScopesResourcesUnionMapOfMapOfDataScopesResources(mapOfMapOfDataScopesResources map[string]map[string]DataScopesResources) DataScopesResourcesUnion {
	typ := DataScopesResourcesUnionTypeMapOfMapOfDataScopesResources

	return DataScopesResourcesUnion{
		MapOfMapOfDataScopesResources: mapOfMapOfDataScopesResources,
		Type:                          typ,
	}
}

func CreateDataScopesResourcesUnionDataScopesResourcesEnum(dataScopesResourcesEnum DataScopesResourcesEnum) DataScopesResourcesUnion {
	typ := DataScopesResourcesUnionTypeDataScopesResourcesEnum

	return DataScopesResourcesUnion{
		DataScopesResourcesEnum: &dataScopesResourcesEnum,
		Type:                    typ,
	}
}

func (u *DataScopesResourcesUnion) UnmarshalJSON(data []byte) error {

	var mapOfMapOfDataScopesResources map[string]map[string]DataScopesResources = map[string]map[string]DataScopesResources{}
	if err := utils.UnmarshalJSON(data, &mapOfMapOfDataScopesResources, "", true, nil); err == nil {
		u.MapOfMapOfDataScopesResources = mapOfMapOfDataScopesResources
		u.Type = DataScopesResourcesUnionTypeMapOfMapOfDataScopesResources
		return nil
	}

	var dataScopesResourcesEnum DataScopesResourcesEnum = DataScopesResourcesEnum("")
	if err := utils.UnmarshalJSON(data, &dataScopesResourcesEnum, "", true, nil); err == nil {
		u.DataScopesResourcesEnum = &dataScopesResourcesEnum
		u.Type = DataScopesResourcesUnionTypeDataScopesResourcesEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DataScopesResourcesUnion", string(data))
}

func (u DataScopesResourcesUnion) MarshalJSON() ([]byte, error) {
	if u.MapOfMapOfDataScopesResources != nil {
		return utils.MarshalJSON(u.MapOfMapOfDataScopesResources, "", true)
	}

	if u.DataScopesResourcesEnum != nil {
		return utils.MarshalJSON(u.DataScopesResourcesEnum, "", true)
	}

	return nil, errors.New("could not marshal union type DataScopesResourcesUnion: all fields are null")
}
