// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// InvoiceType - Invoice type
type InvoiceType string

const (
	InvoiceTypeStandard InvoiceType = "standard"
	InvoiceTypeCredit   InvoiceType = "credit"
	InvoiceTypeService  InvoiceType = "service"
	InvoiceTypeProduct  InvoiceType = "product"
	InvoiceTypeSupplier InvoiceType = "supplier"
	InvoiceTypeOther    InvoiceType = "other"
)

func (e InvoiceType) ToPointer() *InvoiceType {
	return &e
}
func (e *InvoiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "credit":
		fallthrough
	case "service":
		fallthrough
	case "product":
		fallthrough
	case "supplier":
		fallthrough
	case "other":
		*e = InvoiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceType: %v", v)
	}
}

// InvoiceStatus - Invoice status
type InvoiceStatus string

const (
	InvoiceStatusDraft         InvoiceStatus = "draft"
	InvoiceStatusSubmitted     InvoiceStatus = "submitted"
	InvoiceStatusAuthorised    InvoiceStatus = "authorised"
	InvoiceStatusPartiallyPaid InvoiceStatus = "partially_paid"
	InvoiceStatusPaid          InvoiceStatus = "paid"
	InvoiceStatusVoid          InvoiceStatus = "void"
	InvoiceStatusCredit        InvoiceStatus = "credit"
	InvoiceStatusDeleted       InvoiceStatus = "deleted"
)

func (e InvoiceStatus) ToPointer() *InvoiceStatus {
	return &e
}
func (e *InvoiceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "submitted":
		fallthrough
	case "authorised":
		fallthrough
	case "partially_paid":
		fallthrough
	case "paid":
		fallthrough
	case "void":
		fallthrough
	case "credit":
		fallthrough
	case "deleted":
		*e = InvoiceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceStatus: %v", v)
	}
}

type PaymentAllocation struct {
	// ID of the payment
	ID *string `json:"id,omitempty"`
	// Amount of the payment allocated to the invoice
	AllocatedAmount *float64 `json:"allocated_amount,omitempty"`
	// Date of the payment
	Date *time.Time `json:"date,omitempty"`
}

func (p PaymentAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentAllocation) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentAllocation) GetAllocatedAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.AllocatedAmount
}

func (o *PaymentAllocation) GetDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.Date
}

type Invoice struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Invoice type
	Type *InvoiceType `json:"type,omitempty"`
	// Invoice number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Date invoice was issued - YYYY-MM-DD.
	InvoiceDate *types.Date `json:"invoice_date,omitempty"`
	// The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Terms of payment.
	Terms *string `json:"terms,omitempty"`
	// A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
	PoNumber *string `json:"po_number,omitempty"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// Invoice status
	Status *InvoiceStatus `json:"status,omitempty"`
	// Invoice sent to contact/customer.
	InvoiceSent *bool `json:"invoice_sent,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Discount percentage applied to this invoice.
	DiscountPercentage *float64 `json:"discount_percentage,omitempty"`
	// Discount amount applied to this invoice.
	DiscountAmount *float64 `json:"discount_amount,omitempty"`
	// Total amount of invoice, including tax.
	Total *float64 `json:"total,omitempty"`
	// Balance of invoice due.
	Balance *float64 `json:"balance,omitempty"`
	// Amount of deposit made to this invoice.
	Deposit *float64 `json:"deposit,omitempty"`
	// Customer memo
	CustomerMemo *string `json:"customer_memo,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TrackingCategory *DeprecatedLinkedTrackingCategory `json:"tracking_category,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	LineItems          []InvoiceLineItem         `json:"line_items,omitempty"`
	BillingAddress     *Address                  `json:"billing_address,omitempty"`
	ShippingAddress    *Address                  `json:"shipping_address,omitempty"`
	// Optional invoice template
	TemplateID *string `json:"template_id,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string `json:"source_document_url,omitempty"`
	// IDs of payments made on the invoice
	PaymentAllocations []PaymentAllocation `json:"payment_allocations,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// The channel through which the transaction is processed.
	Channel *string `json:"channel,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language *string `json:"language,omitempty"`
	// Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
	AccountingByRow *bool                `json:"accounting_by_row,omitempty"`
	BankAccount     *BankAccount         `json:"bank_account,omitempty"`
	LedgerAccount   *LinkedLedgerAccount `json:"ledger_account,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	CustomFields   []CustomField  `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (i Invoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Invoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Invoice) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Invoice) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *Invoice) GetType() *InvoiceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Invoice) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Invoice) GetCustomer() *LinkedCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *Invoice) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Invoice) GetInvoiceDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.InvoiceDate
}

func (o *Invoice) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *Invoice) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *Invoice) GetPoNumber() *string {
	if o == nil {
		return nil
	}
	return o.PoNumber
}

func (o *Invoice) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Invoice) GetStatus() *InvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Invoice) GetInvoiceSent() *bool {
	if o == nil {
		return nil
	}
	return o.InvoiceSent
}

func (o *Invoice) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Invoice) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Invoice) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *Invoice) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *Invoice) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *Invoice) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *Invoice) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *Invoice) GetDiscountAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *Invoice) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *Invoice) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *Invoice) GetDeposit() *float64 {
	if o == nil {
		return nil
	}
	return o.Deposit
}

func (o *Invoice) GetCustomerMemo() *string {
	if o == nil {
		return nil
	}
	return o.CustomerMemo
}

func (o *Invoice) GetTrackingCategory() *DeprecatedLinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategory
}

func (o *Invoice) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *Invoice) GetLineItems() []InvoiceLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *Invoice) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Invoice) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *Invoice) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *Invoice) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *Invoice) GetPaymentAllocations() []PaymentAllocation {
	if o == nil {
		return nil
	}
	return o.PaymentAllocations
}

func (o *Invoice) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *Invoice) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *Invoice) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *Invoice) GetAccountingByRow() *bool {
	if o == nil {
		return nil
	}
	return o.AccountingByRow
}

func (o *Invoice) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *Invoice) GetLedgerAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.LedgerAccount
}

func (o *Invoice) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Invoice) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Invoice) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Invoice) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Invoice) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Invoice) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Invoice) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Invoice) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type InvoiceInput struct {
	// Invoice type
	Type *InvoiceType `json:"type,omitempty"`
	// Invoice number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Date invoice was issued - YYYY-MM-DD.
	InvoiceDate *types.Date `json:"invoice_date,omitempty"`
	// The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
	DueDate *types.Date `json:"due_date,omitempty"`
	// Terms of payment.
	Terms *string `json:"terms,omitempty"`
	// A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
	PoNumber *string `json:"po_number,omitempty"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// Invoice status
	Status *InvoiceStatus `json:"status,omitempty"`
	// Invoice sent to contact/customer.
	InvoiceSent *bool `json:"invoice_sent,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Discount percentage applied to this invoice.
	DiscountPercentage *float64 `json:"discount_percentage,omitempty"`
	// Discount amount applied to this invoice.
	DiscountAmount *float64 `json:"discount_amount,omitempty"`
	// Total amount of invoice, including tax.
	Total *float64 `json:"total,omitempty"`
	// Balance of invoice due.
	Balance *float64 `json:"balance,omitempty"`
	// Amount of deposit made to this invoice.
	Deposit *float64 `json:"deposit,omitempty"`
	// Customer memo
	CustomerMemo *string `json:"customer_memo,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TrackingCategory *DeprecatedLinkedTrackingCategory `json:"tracking_category,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	LineItems          []InvoiceLineItemInput    `json:"line_items,omitempty"`
	BillingAddress     *Address                  `json:"billing_address,omitempty"`
	ShippingAddress    *Address                  `json:"shipping_address,omitempty"`
	// Optional invoice template
	TemplateID *string `json:"template_id,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
	SourceDocumentURL *string `json:"source_document_url,omitempty"`
	// IDs of payments made on the invoice
	PaymentAllocations []PaymentAllocation `json:"payment_allocations,omitempty"`
	// Payment method used for the transaction, such as cash, credit card, bank transfer, or check
	PaymentMethod *string `json:"payment_method,omitempty"`
	// The channel through which the transaction is processed.
	Channel *string `json:"channel,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language *string `json:"language,omitempty"`
	// Indicates if accounting by row is used (true) or not (false). Accounting by row means that a separate ledger transaction is created for each row.
	AccountingByRow *bool                     `json:"accounting_by_row,omitempty"`
	BankAccount     *BankAccount              `json:"bank_account,omitempty"`
	LedgerAccount   *LinkedLedgerAccountInput `json:"ledger_account,omitempty"`
	CustomFields    []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (i InvoiceInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceInput) GetType() *InvoiceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InvoiceInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *InvoiceInput) GetCustomer() *LinkedCustomerInput {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *InvoiceInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *InvoiceInput) GetInvoiceDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.InvoiceDate
}

func (o *InvoiceInput) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *InvoiceInput) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *InvoiceInput) GetPoNumber() *string {
	if o == nil {
		return nil
	}
	return o.PoNumber
}

func (o *InvoiceInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *InvoiceInput) GetStatus() *InvoiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *InvoiceInput) GetInvoiceSent() *bool {
	if o == nil {
		return nil
	}
	return o.InvoiceSent
}

func (o *InvoiceInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *InvoiceInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *InvoiceInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *InvoiceInput) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *InvoiceInput) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *InvoiceInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *InvoiceInput) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *InvoiceInput) GetDiscountAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *InvoiceInput) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *InvoiceInput) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *InvoiceInput) GetDeposit() *float64 {
	if o == nil {
		return nil
	}
	return o.Deposit
}

func (o *InvoiceInput) GetCustomerMemo() *string {
	if o == nil {
		return nil
	}
	return o.CustomerMemo
}

func (o *InvoiceInput) GetTrackingCategory() *DeprecatedLinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategory
}

func (o *InvoiceInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *InvoiceInput) GetLineItems() []InvoiceLineItemInput {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *InvoiceInput) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *InvoiceInput) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *InvoiceInput) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *InvoiceInput) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *InvoiceInput) GetPaymentAllocations() []PaymentAllocation {
	if o == nil {
		return nil
	}
	return o.PaymentAllocations
}

func (o *InvoiceInput) GetPaymentMethod() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *InvoiceInput) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *InvoiceInput) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *InvoiceInput) GetAccountingByRow() *bool {
	if o == nil {
		return nil
	}
	return o.AccountingByRow
}

func (o *InvoiceInput) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *InvoiceInput) GetLedgerAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.LedgerAccount
}

func (o *InvoiceInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *InvoiceInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *InvoiceInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
