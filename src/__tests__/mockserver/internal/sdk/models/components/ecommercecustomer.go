// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// EcommerceCustomerStatusCustomerStatus - The current status of the customer
type EcommerceCustomerStatusCustomerStatus string

const (
	EcommerceCustomerStatusCustomerStatusActive   EcommerceCustomerStatusCustomerStatus = "active"
	EcommerceCustomerStatusCustomerStatusArchived EcommerceCustomerStatusCustomerStatus = "archived"
)

func (e EcommerceCustomerStatusCustomerStatus) ToPointer() *EcommerceCustomerStatusCustomerStatus {
	return &e
}
func (e *EcommerceCustomerStatusCustomerStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "archived":
		*e = EcommerceCustomerStatusCustomerStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EcommerceCustomerStatusCustomerStatus: %v", v)
	}
}

type EcommerceCustomerType string

const (
	EcommerceCustomerTypeBilling  EcommerceCustomerType = "billing"
	EcommerceCustomerTypeShipping EcommerceCustomerType = "shipping"
	EcommerceCustomerTypeOther    EcommerceCustomerType = "other"
)

func (e EcommerceCustomerType) ToPointer() *EcommerceCustomerType {
	return &e
}
func (e *EcommerceCustomerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "billing":
		fallthrough
	case "shipping":
		fallthrough
	case "other":
		*e = EcommerceCustomerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EcommerceCustomerType: %v", v)
	}
}

type EcommerceCustomerAddress struct {
	Type *EcommerceCustomerType `json:"type,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// First line of the street address of the customer
	Line1 *string `json:"line1,omitempty"`
	// Second line of the street address of the customer
	Line2 *string `json:"line2,omitempty"`
	// City of the customer
	City *string `json:"city,omitempty"`
	// State of the customer
	State *string `json:"state,omitempty"`
	// Postal code of the customer
	PostalCode *string `json:"postal_code,omitempty"`
	// Country of the customer
	Country *string `json:"country,omitempty"`
}

func (o *EcommerceCustomerAddress) GetType() *EcommerceCustomerType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EcommerceCustomerAddress) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EcommerceCustomerAddress) GetLine1() *string {
	if o == nil {
		return nil
	}
	return o.Line1
}

func (o *EcommerceCustomerAddress) GetLine2() *string {
	if o == nil {
		return nil
	}
	return o.Line2
}

func (o *EcommerceCustomerAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *EcommerceCustomerAddress) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *EcommerceCustomerAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *EcommerceCustomerAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

type EcommerceCustomer struct {
	// A unique identifier for an object.
	ID string `json:"id"`
	// Full name of the customer
	Name *string `json:"name,omitempty"`
	// First name of the customer
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the customer
	LastName *string `json:"last_name,omitempty"`
	// Company name of the customer
	CompanyName *string `json:"company_name,omitempty"`
	// The current status of the customer
	Status *EcommerceCustomerStatusCustomerStatus `json:"status,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// An array of email addresses for the customer.
	Emails []Email `json:"emails,omitempty"`
	// An array of phone numbers for the customer.
	PhoneNumbers []PhoneNumber `json:"phone_numbers,omitempty"`
	// An array of addresses for the customer.
	Addresses []EcommerceCustomerAddress `json:"addresses,omitempty"`
	Orders    []LinkedEcommerceOrder     `json:"orders,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (e EcommerceCustomer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EcommerceCustomer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EcommerceCustomer) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EcommerceCustomer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EcommerceCustomer) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *EcommerceCustomer) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *EcommerceCustomer) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *EcommerceCustomer) GetStatus() *EcommerceCustomerStatusCustomerStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EcommerceCustomer) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *EcommerceCustomer) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *EcommerceCustomer) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *EcommerceCustomer) GetAddresses() []EcommerceCustomerAddress {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *EcommerceCustomer) GetOrders() []LinkedEcommerceOrder {
	if o == nil {
		return nil
	}
	return o.Orders
}

func (o *EcommerceCustomer) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *EcommerceCustomer) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EcommerceCustomer) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}
