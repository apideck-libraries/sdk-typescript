// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type CustomFieldValue2 struct {
}

type CustomFieldValue1 struct {
}

type CustomFieldValueUnionType string

const (
	CustomFieldValueUnionTypeStr                      CustomFieldValueUnionType = "str"
	CustomFieldValueUnionTypeNumber                   CustomFieldValueUnionType = "number"
	CustomFieldValueUnionTypeBoolean                  CustomFieldValueUnionType = "boolean"
	CustomFieldValueUnionTypeCustomFieldValue1        CustomFieldValueUnionType = "CustomField_value_1"
	CustomFieldValueUnionTypeArrayOfStr               CustomFieldValueUnionType = "arrayOfStr"
	CustomFieldValueUnionTypeArrayOfCustomFieldValue2 CustomFieldValueUnionType = "arrayOfCustomFieldValue2"
)

type CustomFieldValueUnion struct {
	Str                      *string             `queryParam:"inline"`
	Number                   *float64            `queryParam:"inline"`
	Boolean                  *bool               `queryParam:"inline"`
	CustomFieldValue1        *CustomFieldValue1  `queryParam:"inline"`
	ArrayOfStr               []string            `queryParam:"inline"`
	ArrayOfCustomFieldValue2 []CustomFieldValue2 `queryParam:"inline"`

	Type CustomFieldValueUnionType
}

func CreateCustomFieldValueUnionStr(str string) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeStr

	return CustomFieldValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldValueUnionNumber(number float64) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeNumber

	return CustomFieldValueUnion{
		Number: &number,
		Type:   typ,
	}
}

func CreateCustomFieldValueUnionBoolean(boolean bool) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeBoolean

	return CustomFieldValueUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCustomFieldValueUnionCustomFieldValue1(customFieldValue1 CustomFieldValue1) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeCustomFieldValue1

	return CustomFieldValueUnion{
		CustomFieldValue1: &customFieldValue1,
		Type:              typ,
	}
}

func CreateCustomFieldValueUnionArrayOfStr(arrayOfStr []string) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeArrayOfStr

	return CustomFieldValueUnion{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateCustomFieldValueUnionArrayOfCustomFieldValue2(arrayOfCustomFieldValue2 []CustomFieldValue2) CustomFieldValueUnion {
	typ := CustomFieldValueUnionTypeArrayOfCustomFieldValue2

	return CustomFieldValueUnion{
		ArrayOfCustomFieldValue2: arrayOfCustomFieldValue2,
		Type:                     typ,
	}
}

func (u *CustomFieldValueUnion) UnmarshalJSON(data []byte) error {

	var customFieldValue1 CustomFieldValue1 = CustomFieldValue1{}
	if err := utils.UnmarshalJSON(data, &customFieldValue1, "", true, true); err == nil {
		u.CustomFieldValue1 = &customFieldValue1
		u.Type = CustomFieldValueUnionTypeCustomFieldValue1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldValueUnionTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CustomFieldValueUnionTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldValueUnionTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CustomFieldValueUnionTypeArrayOfStr
		return nil
	}

	var arrayOfCustomFieldValue2 []CustomFieldValue2 = []CustomFieldValue2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCustomFieldValue2, "", true, true); err == nil {
		u.ArrayOfCustomFieldValue2 = arrayOfCustomFieldValue2
		u.Type = CustomFieldValueUnionTypeArrayOfCustomFieldValue2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldValueUnion", string(data))
}

func (u CustomFieldValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.CustomFieldValue1 != nil {
		return utils.MarshalJSON(u.CustomFieldValue1, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfCustomFieldValue2 != nil {
		return utils.MarshalJSON(u.ArrayOfCustomFieldValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldValueUnion: all fields are null")
}

type CustomField struct {
	// Unique identifier for the custom field.
	ID *string `json:"id"`
	// Name of the custom field.
	Name *string `json:"name,omitempty"`
	// More information about the custom field
	Description *string                `json:"description,omitempty"`
	Value       *CustomFieldValueUnion `json:"value,omitempty"`
}

func (o *CustomField) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CustomField) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomField) GetValue() *CustomFieldValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}
