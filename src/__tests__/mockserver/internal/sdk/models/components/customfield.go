// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type CustomFieldValue1Type string

const (
	CustomFieldValue1TypeStr      CustomFieldValue1Type = "str"
	CustomFieldValue1TypeNumber   CustomFieldValue1Type = "number"
	CustomFieldValue1TypeBoolean  CustomFieldValue1Type = "boolean"
	CustomFieldValue1TypeMapOfAny CustomFieldValue1Type = "mapOfAny"
)

type CustomFieldValue1 struct {
	Str      *string        `queryParam:"inline"`
	Number   *float64       `queryParam:"inline"`
	Boolean  *bool          `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type CustomFieldValue1Type
}

func CreateCustomFieldValue1Str(str string) CustomFieldValue1 {
	typ := CustomFieldValue1TypeStr

	return CustomFieldValue1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldValue1Number(number float64) CustomFieldValue1 {
	typ := CustomFieldValue1TypeNumber

	return CustomFieldValue1{
		Number: &number,
		Type:   typ,
	}
}

func CreateCustomFieldValue1Boolean(boolean bool) CustomFieldValue1 {
	typ := CustomFieldValue1TypeBoolean

	return CustomFieldValue1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCustomFieldValue1MapOfAny(mapOfAny map[string]any) CustomFieldValue1 {
	typ := CustomFieldValue1TypeMapOfAny

	return CustomFieldValue1{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *CustomFieldValue1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CustomFieldValue1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CustomFieldValue1TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldValue1TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CustomFieldValue1TypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldValue1", string(data))
}

func (u CustomFieldValue1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldValue1: all fields are null")
}

type CustomFieldValue2Type string

const (
	CustomFieldValue2TypeStr                      CustomFieldValue2Type = "str"
	CustomFieldValue2TypeNumber                   CustomFieldValue2Type = "number"
	CustomFieldValue2TypeBoolean                  CustomFieldValue2Type = "boolean"
	CustomFieldValue2TypeMapOfAny                 CustomFieldValue2Type = "mapOfAny"
	CustomFieldValue2TypeArrayOfCustomFieldValue1 CustomFieldValue2Type = "arrayOfCustomFieldValue1"
)

type CustomFieldValue2 struct {
	Str                      *string              `queryParam:"inline"`
	Number                   *float64             `queryParam:"inline"`
	Boolean                  *bool                `queryParam:"inline"`
	MapOfAny                 map[string]any       `queryParam:"inline"`
	ArrayOfCustomFieldValue1 []*CustomFieldValue1 `queryParam:"inline"`

	Type CustomFieldValue2Type
}

func CreateCustomFieldValue2Str(str string) CustomFieldValue2 {
	typ := CustomFieldValue2TypeStr

	return CustomFieldValue2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldValue2Number(number float64) CustomFieldValue2 {
	typ := CustomFieldValue2TypeNumber

	return CustomFieldValue2{
		Number: &number,
		Type:   typ,
	}
}

func CreateCustomFieldValue2Boolean(boolean bool) CustomFieldValue2 {
	typ := CustomFieldValue2TypeBoolean

	return CustomFieldValue2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCustomFieldValue2MapOfAny(mapOfAny map[string]any) CustomFieldValue2 {
	typ := CustomFieldValue2TypeMapOfAny

	return CustomFieldValue2{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func CreateCustomFieldValue2ArrayOfCustomFieldValue1(arrayOfCustomFieldValue1 []*CustomFieldValue1) CustomFieldValue2 {
	typ := CustomFieldValue2TypeArrayOfCustomFieldValue1

	return CustomFieldValue2{
		ArrayOfCustomFieldValue1: arrayOfCustomFieldValue1,
		Type:                     typ,
	}
}

func (u *CustomFieldValue2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CustomFieldValue2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = CustomFieldValue2TypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldValue2TypeBoolean
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, nil); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = CustomFieldValue2TypeMapOfAny
		return nil
	}

	var arrayOfCustomFieldValue1 []*CustomFieldValue1 = []*CustomFieldValue1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCustomFieldValue1, "", true, nil); err == nil {
		u.ArrayOfCustomFieldValue1 = arrayOfCustomFieldValue1
		u.Type = CustomFieldValue2TypeArrayOfCustomFieldValue1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CustomFieldValue2", string(data))
}

func (u CustomFieldValue2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	if u.ArrayOfCustomFieldValue1 != nil {
		return utils.MarshalJSON(u.ArrayOfCustomFieldValue1, "", true)
	}

	return nil, errors.New("could not marshal union type CustomFieldValue2: all fields are null")
}

type CustomField struct {
	// Unique identifier for the custom field.
	ID *string `json:"id"`
	// Name of the custom field.
	Name *string `json:"name,omitempty"`
	// More information about the custom field
	Description *string            `json:"description,omitempty"`
	Value       *CustomFieldValue2 `json:"value,omitempty"`
}

func (c CustomField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (o *CustomField) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CustomField) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomField) GetValue() *CustomFieldValue2 {
	if o == nil {
		return nil
	}
	return o.Value
}
