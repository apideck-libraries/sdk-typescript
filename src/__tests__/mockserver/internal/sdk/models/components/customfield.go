// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Six struct {
}

type Four struct {
}

type ValueType string

const (
	ValueTypeStr        ValueType = "str"
	ValueTypeNumber     ValueType = "number"
	ValueTypeBoolean    ValueType = "boolean"
	ValueTypeFour       ValueType = "4"
	ValueTypeArrayOfStr ValueType = "arrayOfStr"
	ValueTypeArrayOf6   ValueType = "arrayOf6"
)

type Value struct {
	Str        *string
	Number     *float64
	Boolean    *bool
	Four       *Four
	ArrayOfStr []string
	ArrayOf6   []Six

	Type ValueType
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueNumber(number float64) Value {
	typ := ValueTypeNumber

	return Value{
		Number: &number,
		Type:   typ,
	}
}

func CreateValueBoolean(boolean bool) Value {
	typ := ValueTypeBoolean

	return Value{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateValueFour(four Four) Value {
	typ := ValueTypeFour

	return Value{
		Four: &four,
		Type: typ,
	}
}

func CreateValueArrayOfStr(arrayOfStr []string) Value {
	typ := ValueTypeArrayOfStr

	return Value{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateValueArrayOf6(arrayOf6 []Six) Value {
	typ := ValueTypeArrayOf6

	return Value{
		ArrayOf6: arrayOf6,
		Type:     typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	var four Four = Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = ValueTypeFour
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ValueTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ValueTypeArrayOfStr
		return nil
	}

	var arrayOf6 []Six = []Six{}
	if err := utils.UnmarshalJSON(data, &arrayOf6, "", true, true); err == nil {
		u.ArrayOf6 = arrayOf6
		u.Type = ValueTypeArrayOf6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value", string(data))
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOf6 != nil {
		return utils.MarshalJSON(u.ArrayOf6, "", true)
	}

	return nil, errors.New("could not marshal union type Value: all fields are null")
}

type CustomField struct {
	// Unique identifier for the custom field.
	ID *string `json:"id"`
	// Name of the custom field.
	Name *string `json:"name,omitempty"`
	// More information about the custom field
	Description *string `json:"description,omitempty"`
	Value       *Value  `json:"value,omitempty"`
}

func (o *CustomField) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CustomField) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomField) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}
