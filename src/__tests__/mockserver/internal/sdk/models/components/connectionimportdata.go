// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type Credentials struct {
	// The refresh token can be used to obtain a new access token.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// Access token
	AccessToken *string `json:"access_token,omitempty"`
	// The datetime at which the token was issued. If omitted the token will be queued for refresh.
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// The number of seconds until the token expires. If omitted the token will be queued for refresh.
	ExpiresIn *int64 `json:"expires_in,omitempty"`
}

func (c Credentials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Credentials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Credentials) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *Credentials) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *Credentials) GetIssuedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *Credentials) GetExpiresIn() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiresIn
}

type ConnectionImportData struct {
	Credentials *Credentials `json:"credentials,omitempty"`
	// Connection settings. Values will persist to `form_fields` with corresponding id
	Settings map[string]any `json:"settings,omitempty"`
	// Attach your own consumer specific metadata
	Metadata map[string]any `json:"metadata,omitempty"`
}

func (o *ConnectionImportData) GetCredentials() *Credentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *ConnectionImportData) GetSettings() map[string]any {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *ConnectionImportData) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}
