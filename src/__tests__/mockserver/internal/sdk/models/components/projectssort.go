// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// ProjectsSortSortBy - The field to sort by
type ProjectsSortSortBy string

const (
	ProjectsSortSortByName         ProjectsSortSortBy = "name"
	ProjectsSortSortByStatus       ProjectsSortSortBy = "status"
	ProjectsSortSortByStartDate    ProjectsSortSortBy = "start_date"
	ProjectsSortSortByEndDate      ProjectsSortSortBy = "end_date"
	ProjectsSortSortByBudgetAmount ProjectsSortSortBy = "budget_amount"
	ProjectsSortSortByActualAmount ProjectsSortSortBy = "actual_amount"
	ProjectsSortSortByCreatedAt    ProjectsSortSortBy = "created_at"
	ProjectsSortSortByUpdatedAt    ProjectsSortSortBy = "updated_at"
)

func (e ProjectsSortSortBy) ToPointer() *ProjectsSortSortBy {
	return &e
}
func (e *ProjectsSortSortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "status":
		fallthrough
	case "start_date":
		fallthrough
	case "end_date":
		fallthrough
	case "budget_amount":
		fallthrough
	case "actual_amount":
		fallthrough
	case "created_at":
		fallthrough
	case "updated_at":
		*e = ProjectsSortSortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectsSortSortBy: %v", v)
	}
}

type ProjectsSort struct {
	// The field to sort by
	By *ProjectsSortSortBy `queryParam:"name=by"`
	// The direction in which to sort the results
	Direction *SortDirection `default:"asc" queryParam:"name=direction"`
}

func (p ProjectsSort) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProjectsSort) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ProjectsSort) GetBy() *ProjectsSortSortBy {
	if o == nil {
		return nil
	}
	return o.By
}

func (o *ProjectsSort) GetDirection() *SortDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}
