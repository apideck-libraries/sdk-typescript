// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// CompanyStatus - Based on the status some functionality is enabled or disabled.
type CompanyStatus string

const (
	CompanyStatusActive   CompanyStatus = "active"
	CompanyStatusInactive CompanyStatus = "inactive"
)

func (e CompanyStatus) ToPointer() *CompanyStatus {
	return &e
}
func (e *CompanyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = CompanyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompanyStatus: %v", v)
	}
}

// TheStartMonthOfFiscalYear - The start month of fiscal year.
type TheStartMonthOfFiscalYear string

const (
	TheStartMonthOfFiscalYearJanuary   TheStartMonthOfFiscalYear = "January"
	TheStartMonthOfFiscalYearFebruary  TheStartMonthOfFiscalYear = "February"
	TheStartMonthOfFiscalYearMarch     TheStartMonthOfFiscalYear = "March"
	TheStartMonthOfFiscalYearApril     TheStartMonthOfFiscalYear = "April"
	TheStartMonthOfFiscalYearMay       TheStartMonthOfFiscalYear = "May"
	TheStartMonthOfFiscalYearJune      TheStartMonthOfFiscalYear = "June"
	TheStartMonthOfFiscalYearJuly      TheStartMonthOfFiscalYear = "July"
	TheStartMonthOfFiscalYearAugust    TheStartMonthOfFiscalYear = "August"
	TheStartMonthOfFiscalYearSeptember TheStartMonthOfFiscalYear = "September"
	TheStartMonthOfFiscalYearOctober   TheStartMonthOfFiscalYear = "October"
	TheStartMonthOfFiscalYearNovember  TheStartMonthOfFiscalYear = "November"
	TheStartMonthOfFiscalYearDecember  TheStartMonthOfFiscalYear = "December"
)

func (e TheStartMonthOfFiscalYear) ToPointer() *TheStartMonthOfFiscalYear {
	return &e
}
func (e *TheStartMonthOfFiscalYear) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "January":
		fallthrough
	case "February":
		fallthrough
	case "March":
		fallthrough
	case "April":
		fallthrough
	case "May":
		fallthrough
	case "June":
		fallthrough
	case "July":
		fallthrough
	case "August":
		fallthrough
	case "September":
		fallthrough
	case "October":
		fallthrough
	case "November":
		fallthrough
	case "December":
		*e = TheStartMonthOfFiscalYear(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TheStartMonthOfFiscalYear: %v", v)
	}
}

type CompanyInfo struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The name of the company.
	CompanyName *string `json:"company_name,omitempty"`
	// Based on the status some functionality is enabled or disabled.
	Status *CompanyStatus `json:"status,omitempty"`
	// The legal name of the company
	LegalName *string `json:"legal_name,omitempty"`
	// country code according to ISO 3166-1 alpha-2.
	Country        *string `json:"country,omitempty"`
	SalesTaxNumber *string `json:"sales_tax_number,omitempty"`
	// Whether sales tax is calculated automatically for the company
	AutomatedSalesTax *bool `json:"automated_sales_tax,omitempty"`
	// Whether sales tax is enabled for the company
	SalesTaxEnabled *bool    `json:"sales_tax_enabled,omitempty"`
	DefaultSalesTax *TaxRate `json:"default_sales_tax,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language *string `json:"language,omitempty"`
	// The start month of fiscal year.
	FiscalYearStartMonth *TheStartMonthOfFiscalYear `json:"fiscal_year_start_month,omitempty"`
	// Date when company file was created
	CompanyStartDate *types.Date   `json:"company_start_date,omitempty"`
	Addresses        []Address     `json:"addresses,omitempty"`
	PhoneNumbers     []PhoneNumber `json:"phone_numbers,omitempty"`
	Emails           []Email       `json:"emails,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

func (c CompanyInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CompanyInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CompanyInfo) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CompanyInfo) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *CompanyInfo) GetStatus() *CompanyStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CompanyInfo) GetLegalName() *string {
	if o == nil {
		return nil
	}
	return o.LegalName
}

func (o *CompanyInfo) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CompanyInfo) GetSalesTaxNumber() *string {
	if o == nil {
		return nil
	}
	return o.SalesTaxNumber
}

func (o *CompanyInfo) GetAutomatedSalesTax() *bool {
	if o == nil {
		return nil
	}
	return o.AutomatedSalesTax
}

func (o *CompanyInfo) GetSalesTaxEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.SalesTaxEnabled
}

func (o *CompanyInfo) GetDefaultSalesTax() *TaxRate {
	if o == nil {
		return nil
	}
	return o.DefaultSalesTax
}

func (o *CompanyInfo) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CompanyInfo) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *CompanyInfo) GetFiscalYearStartMonth() *TheStartMonthOfFiscalYear {
	if o == nil {
		return nil
	}
	return o.FiscalYearStartMonth
}

func (o *CompanyInfo) GetCompanyStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.CompanyStartDate
}

func (o *CompanyInfo) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *CompanyInfo) GetPhoneNumbers() []PhoneNumber {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *CompanyInfo) GetEmails() []Email {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *CompanyInfo) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *CompanyInfo) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *CompanyInfo) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CompanyInfo) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CompanyInfo) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CompanyInfo) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}
