// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type Consumer struct {
	// Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.
	ConsumerID string `json:"consumer_id"`
	// ID of your Apideck Application
	ApplicationID *string `json:"application_id,omitempty"`
	// The metadata of the consumer. This is used to display the consumer in the sidebar. This is optional, but recommended.
	Metadata               *ConsumerMetadata       `json:"metadata,omitempty"`
	Connections            []ConsumerConnection    `json:"connections,omitempty"`
	Services               []string                `json:"services,omitempty"`
	AggregatedRequestCount *float64                `json:"aggregated_request_count,omitempty"`
	RequestCounts          *RequestCountAllocation `json:"request_counts,omitempty"`
	Created                *string                 `json:"created,omitempty"`
	Modified               *string                 `json:"modified,omitempty"`
	RequestCountUpdated    *string                 `json:"request_count_updated,omitempty"`
}

func (o *Consumer) GetConsumerID() string {
	if o == nil {
		return ""
	}
	return o.ConsumerID
}

func (o *Consumer) GetApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ApplicationID
}

func (o *Consumer) GetMetadata() *ConsumerMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *Consumer) GetConnections() []ConsumerConnection {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *Consumer) GetServices() []string {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *Consumer) GetAggregatedRequestCount() *float64 {
	if o == nil {
		return nil
	}
	return o.AggregatedRequestCount
}

func (o *Consumer) GetRequestCounts() *RequestCountAllocation {
	if o == nil {
		return nil
	}
	return o.RequestCounts
}

func (o *Consumer) GetCreated() *string {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Consumer) GetModified() *string {
	if o == nil {
		return nil
	}
	return o.Modified
}

func (o *Consumer) GetRequestCountUpdated() *string {
	if o == nil {
		return nil
	}
	return o.RequestCountUpdated
}
