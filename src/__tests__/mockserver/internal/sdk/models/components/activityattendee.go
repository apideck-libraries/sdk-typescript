// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ActivityAttendeeStatus - Status of the attendee
type ActivityAttendeeStatus string

const (
	ActivityAttendeeStatusAccepted  ActivityAttendeeStatus = "accepted"
	ActivityAttendeeStatusTentative ActivityAttendeeStatus = "tentative"
	ActivityAttendeeStatusDeclined  ActivityAttendeeStatus = "declined"
)

func (e ActivityAttendeeStatus) ToPointer() *ActivityAttendeeStatus {
	return &e
}
func (e *ActivityAttendeeStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "tentative":
		fallthrough
	case "declined":
		*e = ActivityAttendeeStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityAttendeeStatus: %v", v)
	}
}

type ActivityAttendee struct {
	// Unique identifier for the attendee
	ID *string `json:"id,omitempty"`
	// Full name of the attendee
	Name *string `json:"name,omitempty"`
	// First name of the attendee
	FirstName *string `json:"first_name,omitempty"`
	// Middle name of the attendee
	MiddleName *string `json:"middle_name,omitempty"`
	// Last name of the attendee
	LastName *string `json:"last_name,omitempty"`
	// Prefix of the attendee
	Prefix *string `json:"prefix,omitempty"`
	// Suffix of the attendee
	Suffix *string `json:"suffix,omitempty"`
	// Email address of the attendee
	EmailAddress *string `json:"email_address,omitempty"`
	// Whether the attendee is the organizer of the activity
	IsOrganizer *bool `json:"is_organizer,omitempty"`
	// Status of the attendee
	Status *ActivityAttendeeStatus `json:"status,omitempty"`
	// The identifier for a related user
	UserID *string `json:"user_id,omitempty"`
	// The identifier for a related contact
	ContactID *string `json:"contact_id,omitempty"`
	// The last time the attendee was updated (ISO 8601)
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The time the attendee was created (ISO 8601)
	CreatedAt *time.Time `json:"created_at,omitempty"`
}

func (a ActivityAttendee) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ActivityAttendee) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ActivityAttendee) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ActivityAttendee) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ActivityAttendee) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *ActivityAttendee) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *ActivityAttendee) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *ActivityAttendee) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *ActivityAttendee) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *ActivityAttendee) GetEmailAddress() *string {
	if o == nil {
		return nil
	}
	return o.EmailAddress
}

func (o *ActivityAttendee) GetIsOrganizer() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrganizer
}

func (o *ActivityAttendee) GetStatus() *ActivityAttendeeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ActivityAttendee) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ActivityAttendee) GetContactID() *string {
	if o == nil {
		return nil
	}
	return o.ContactID
}

func (o *ActivityAttendee) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ActivityAttendee) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

type ActivityAttendeeInput struct {
	// Full name of the attendee
	Name *string `json:"name,omitempty"`
	// First name of the attendee
	FirstName *string `json:"first_name,omitempty"`
	// Middle name of the attendee
	MiddleName *string `json:"middle_name,omitempty"`
	// Last name of the attendee
	LastName *string `json:"last_name,omitempty"`
	// Prefix of the attendee
	Prefix *string `json:"prefix,omitempty"`
	// Suffix of the attendee
	Suffix *string `json:"suffix,omitempty"`
	// Email address of the attendee
	EmailAddress *string `json:"email_address,omitempty"`
	// Whether the attendee is the organizer of the activity
	IsOrganizer *bool `json:"is_organizer,omitempty"`
	// Status of the attendee
	Status *ActivityAttendeeStatus `json:"status,omitempty"`
}

func (o *ActivityAttendeeInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ActivityAttendeeInput) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *ActivityAttendeeInput) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *ActivityAttendeeInput) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *ActivityAttendeeInput) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *ActivityAttendeeInput) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *ActivityAttendeeInput) GetEmailAddress() *string {
	if o == nil {
		return nil
	}
	return o.EmailAddress
}

func (o *ActivityAttendeeInput) GetIsOrganizer() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrganizer
}

func (o *ActivityAttendeeInput) GetStatus() *ActivityAttendeeStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
