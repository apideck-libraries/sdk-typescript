// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// QuoteStatus - Quote status
type QuoteStatus string

const (
	QuoteStatusDraft     QuoteStatus = "draft"
	QuoteStatusSent      QuoteStatus = "sent"
	QuoteStatusAccepted  QuoteStatus = "accepted"
	QuoteStatusRejected  QuoteStatus = "rejected"
	QuoteStatusExpired   QuoteStatus = "expired"
	QuoteStatusConverted QuoteStatus = "converted"
	QuoteStatusVoid      QuoteStatus = "void"
	QuoteStatusDeleted   QuoteStatus = "deleted"
)

func (e QuoteStatus) ToPointer() *QuoteStatus {
	return &e
}
func (e *QuoteStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "sent":
		fallthrough
	case "accepted":
		fallthrough
	case "rejected":
		fallthrough
	case "expired":
		fallthrough
	case "converted":
		fallthrough
	case "void":
		fallthrough
	case "deleted":
		*e = QuoteStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QuoteStatus: %v", v)
	}
}

type Quote struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Quote number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// The unique identifier for the invoice.
	InvoiceID *string `json:"invoice_id,omitempty"`
	// The unique identifier for the sales order.
	SalesOrderID *string `json:"sales_order_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The unique identifier for the linked project.
	ProjectID *string `json:"project_id,omitempty"`
	// Date quote was issued - YYYY-MM-DD.
	QuoteDate *types.Date `json:"quote_date,omitempty"`
	// The date until which the quote is valid - YYYY-MM-DD.
	ExpiryDate *types.Date `json:"expiry_date,omitempty"`
	// Terms of the quote.
	Terms *string `json:"terms,omitempty"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// Quote status
	Status *QuoteStatus `json:"status,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this quote.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Discount percentage applied to this quote.
	DiscountPercentage *float64 `json:"discount_percentage,omitempty"`
	// Discount amount applied to this quote.
	DiscountAmount *float64 `json:"discount_amount,omitempty"`
	// Total amount of quote, including tax.
	Total *float64 `json:"total,omitempty"`
	// Customer memo
	CustomerMemo    *string         `json:"customer_memo,omitempty"`
	LineItems       []QuoteLineItem `json:"line_items,omitempty"`
	BillingAddress  *Address        `json:"billing_address,omitempty"`
	ShippingAddress *Address        `json:"shipping_address,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Optional quote template
	TemplateID *string `json:"template_id,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (q Quote) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *Quote) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Quote) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Quote) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *Quote) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *Quote) GetCustomer() *LinkedCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *Quote) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *Quote) GetSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.SalesOrderID
}

func (o *Quote) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Quote) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *Quote) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Quote) GetQuoteDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.QuoteDate
}

func (o *Quote) GetExpiryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *Quote) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *Quote) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Quote) GetStatus() *QuoteStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Quote) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Quote) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *Quote) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *Quote) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *Quote) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *Quote) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *Quote) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *Quote) GetDiscountAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *Quote) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *Quote) GetCustomerMemo() *string {
	if o == nil {
		return nil
	}
	return o.CustomerMemo
}

func (o *Quote) GetLineItems() []QuoteLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *Quote) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Quote) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *Quote) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *Quote) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *Quote) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *Quote) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Quote) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Quote) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Quote) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Quote) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Quote) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Quote) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type QuoteInput struct {
	// Quote number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// The unique identifier for the sales order.
	SalesOrderID *string `json:"sales_order_id,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// The ID of the department
	DepartmentID *string `json:"department_id,omitempty"`
	// The unique identifier for the linked project.
	ProjectID *string `json:"project_id,omitempty"`
	// Date quote was issued - YYYY-MM-DD.
	QuoteDate *types.Date `json:"quote_date,omitempty"`
	// The date until which the quote is valid - YYYY-MM-DD.
	ExpiryDate *types.Date `json:"expiry_date,omitempty"`
	// Terms of the quote.
	Terms *string `json:"terms,omitempty"`
	// Optional reference identifier for the transaction.
	Reference *string `json:"reference,omitempty"`
	// Quote status
	Status *QuoteStatus `json:"status,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Total tax amount applied to this quote.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// Discount percentage applied to this quote.
	DiscountPercentage *float64 `json:"discount_percentage,omitempty"`
	// Discount amount applied to this quote.
	DiscountAmount *float64 `json:"discount_amount,omitempty"`
	// Total amount of quote, including tax.
	Total *float64 `json:"total,omitempty"`
	// Customer memo
	CustomerMemo    *string              `json:"customer_memo,omitempty"`
	LineItems       []QuoteLineItemInput `json:"line_items,omitempty"`
	BillingAddress  *Address             `json:"billing_address,omitempty"`
	ShippingAddress *Address             `json:"shipping_address,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Optional quote template
	TemplateID *string `json:"template_id,omitempty"`
	// URL link to a source document - shown as 'Go to [appName]' in the downstream app.
	SourceDocumentURL *string       `json:"source_document_url,omitempty"`
	CustomFields      []CustomField `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (q QuoteInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QuoteInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *QuoteInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *QuoteInput) GetCustomer() *LinkedCustomerInput {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *QuoteInput) GetSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.SalesOrderID
}

func (o *QuoteInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *QuoteInput) GetDepartmentID() *string {
	if o == nil {
		return nil
	}
	return o.DepartmentID
}

func (o *QuoteInput) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *QuoteInput) GetQuoteDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.QuoteDate
}

func (o *QuoteInput) GetExpiryDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ExpiryDate
}

func (o *QuoteInput) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *QuoteInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *QuoteInput) GetStatus() *QuoteStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *QuoteInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *QuoteInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *QuoteInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *QuoteInput) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *QuoteInput) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *QuoteInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *QuoteInput) GetDiscountPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountPercentage
}

func (o *QuoteInput) GetDiscountAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.DiscountAmount
}

func (o *QuoteInput) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *QuoteInput) GetCustomerMemo() *string {
	if o == nil {
		return nil
	}
	return o.CustomerMemo
}

func (o *QuoteInput) GetLineItems() []QuoteLineItemInput {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *QuoteInput) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *QuoteInput) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *QuoteInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *QuoteInput) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *QuoteInput) GetSourceDocumentURL() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentURL
}

func (o *QuoteInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *QuoteInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *QuoteInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
