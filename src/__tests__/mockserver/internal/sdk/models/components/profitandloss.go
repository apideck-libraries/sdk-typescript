// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Income - The operating income accounts
type Income struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *Income) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Income) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Income) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Income) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Income) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *Income) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

// CostOfGoodsSold - The cost of goods sold accounts
type CostOfGoodsSold struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *CostOfGoodsSold) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CostOfGoodsSold) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *CostOfGoodsSold) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *CostOfGoodsSold) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CostOfGoodsSold) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *CostOfGoodsSold) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

// Expenses - The operating expenses accounts
type Expenses struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *Expenses) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Expenses) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Expenses) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Expenses) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Expenses) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *Expenses) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

// OtherIncome - The other income accounts
type OtherIncome struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *OtherIncome) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OtherIncome) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *OtherIncome) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *OtherIncome) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OtherIncome) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *OtherIncome) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

// OtherExpenses - The other expenses accounts
type OtherExpenses struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *OtherExpenses) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OtherExpenses) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *OtherExpenses) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *OtherExpenses) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OtherExpenses) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *OtherExpenses) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

// UncategorizedAccounts - The accounts not categorized in the other sections
type UncategorizedAccounts struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The account code of the account
	Code *string `json:"code,omitempty"`
	// The name of the account.
	Title *string `json:"title,omitempty"`
	// The type of profit and loss
	Type *ProfitAndLossType `json:"type,omitempty"`
	// The aggregated total of all accounts within this category.
	Total   *float64 `json:"total"`
	Records any      `json:"records"`
}

func (o *UncategorizedAccounts) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UncategorizedAccounts) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *UncategorizedAccounts) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *UncategorizedAccounts) GetType() *ProfitAndLossType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UncategorizedAccounts) GetTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Total
}

func (o *UncategorizedAccounts) GetRecords() any {
	if o == nil {
		return nil
	}
	return o.Records
}

type ProfitAndLoss struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The name of the report
	ReportName string `json:"report_name"`
	// The start date of the report
	StartDate *string `json:"start_date,omitempty"`
	// The end date of the report
	EndDate *string `json:"end_date,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency"`
	// The operating income accounts
	Income Income `json:"income"`
	// The cost of goods sold accounts
	CostOfGoodsSold *CostOfGoodsSold `json:"cost_of_goods_sold,omitempty"`
	// The operating expenses accounts
	Expenses Expenses `json:"expenses"`
	// The other income accounts
	OtherIncome *OtherIncome `json:"other_income,omitempty"`
	// The other expenses accounts
	OtherExpenses *OtherExpenses `json:"other_expenses,omitempty"`
	// The accounts not categorized in the other sections
	UncategorizedAccounts *UncategorizedAccounts  `json:"uncategorized_accounts,omitempty"`
	GrossProfit           *ProfitAndLossIndicator `json:"gross_profit,omitempty"`
	NetOperatingIncome    *ProfitAndLossIndicator `json:"net_operating_income,omitempty"`
	NetIncome             *ProfitAndLossIndicator `json:"net_income,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings *CustomMappings `json:"custom_mappings,omitempty"`
	// The customer id
	Customer *string `json:"customer,omitempty"`
}

func (o *ProfitAndLoss) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProfitAndLoss) GetReportName() string {
	if o == nil {
		return ""
	}
	return o.ReportName
}

func (o *ProfitAndLoss) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ProfitAndLoss) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ProfitAndLoss) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ProfitAndLoss) GetIncome() Income {
	if o == nil {
		return Income{}
	}
	return o.Income
}

func (o *ProfitAndLoss) GetCostOfGoodsSold() *CostOfGoodsSold {
	if o == nil {
		return nil
	}
	return o.CostOfGoodsSold
}

func (o *ProfitAndLoss) GetExpenses() Expenses {
	if o == nil {
		return Expenses{}
	}
	return o.Expenses
}

func (o *ProfitAndLoss) GetOtherIncome() *OtherIncome {
	if o == nil {
		return nil
	}
	return o.OtherIncome
}

func (o *ProfitAndLoss) GetOtherExpenses() *OtherExpenses {
	if o == nil {
		return nil
	}
	return o.OtherExpenses
}

func (o *ProfitAndLoss) GetUncategorizedAccounts() *UncategorizedAccounts {
	if o == nil {
		return nil
	}
	return o.UncategorizedAccounts
}

func (o *ProfitAndLoss) GetGrossProfit() *ProfitAndLossIndicator {
	if o == nil {
		return nil
	}
	return o.GrossProfit
}

func (o *ProfitAndLoss) GetNetOperatingIncome() *ProfitAndLossIndicator {
	if o == nil {
		return nil
	}
	return o.NetOperatingIncome
}

func (o *ProfitAndLoss) GetNetIncome() *ProfitAndLossIndicator {
	if o == nil {
		return nil
	}
	return o.NetIncome
}

func (o *ProfitAndLoss) GetCustomMappings() *CustomMappings {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *ProfitAndLoss) GetCustomer() *string {
	if o == nil {
		return nil
	}
	return o.Customer
}
