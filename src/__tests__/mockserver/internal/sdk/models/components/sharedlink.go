// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// Scope - The scope of the shared link.
type Scope string

const (
	ScopePublic  Scope = "public"
	ScopeCompany Scope = "company"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "company":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

type SharedLink struct {
	// The URL that can be used to view the file.
	URL *string `json:"url,omitempty"`
	// The URL that can be used to download the file.
	DownloadURL *string           `json:"download_url,omitempty"`
	Target      *SharedLinkTarget `json:"target,omitempty"`
	// The scope of the shared link.
	Scope *Scope `json:"scope,omitempty"`
	// Indicated if the shared link is password protected.
	PasswordProtected *bool      `json:"password_protected,omitempty"`
	ExpiresAt         *time.Time `json:"expires_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (s SharedLink) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SharedLink) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SharedLink) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *SharedLink) GetDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.DownloadURL
}

func (o *SharedLink) GetTarget() *SharedLinkTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *SharedLink) GetScope() *Scope {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *SharedLink) GetPasswordProtected() *bool {
	if o == nil {
		return nil
	}
	return o.PasswordProtected
}

func (o *SharedLink) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *SharedLink) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *SharedLink) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SharedLink) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type SharedLinkInput struct {
	// The URL that can be used to download the file.
	DownloadURL *string `json:"download_url,omitempty"`
	// The ID of the file or folder to link.
	TargetID *string `json:"target_id"`
	// The scope of the shared link.
	Scope *Scope `json:"scope,omitempty"`
	// Optional password for the shared link.
	Password *string `json:"password,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (o *SharedLinkInput) GetDownloadURL() *string {
	if o == nil {
		return nil
	}
	return o.DownloadURL
}

func (o *SharedLinkInput) GetTargetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetID
}

func (o *SharedLinkInput) GetScope() *Scope {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *SharedLinkInput) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SharedLinkInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
