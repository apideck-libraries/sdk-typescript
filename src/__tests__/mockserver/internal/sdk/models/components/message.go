// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// MessageType - Set to sms for SMS messages and mms for MMS messages.
type MessageType string

const (
	MessageTypeSms MessageType = "sms"
	MessageTypeMms MessageType = "mms"
)

func (e MessageType) ToPointer() *MessageType {
	return &e
}
func (e *MessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sms":
		fallthrough
	case "mms":
		*e = MessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageType: %v", v)
	}
}

// Direction - The direction of the message.
type Direction string

const (
	DirectionInbound       Direction = "inbound"
	DirectionOutboundAPI   Direction = "outbound-api"
	DirectionOutboundCall  Direction = "outbound-call"
	DirectionOutboundReply Direction = "outbound-reply"
	DirectionUnknown       Direction = "unknown"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inbound":
		fallthrough
	case "outbound-api":
		fallthrough
	case "outbound-call":
		fallthrough
	case "outbound-reply":
		fallthrough
	case "unknown":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

// MessageStatus - Status of the delivery of the message.
type MessageStatus string

const (
	MessageStatusAccepted    MessageStatus = "accepted"
	MessageStatusScheduled   MessageStatus = "scheduled"
	MessageStatusCanceled    MessageStatus = "canceled"
	MessageStatusQueued      MessageStatus = "queued"
	MessageStatusSending     MessageStatus = "sending"
	MessageStatusSent        MessageStatus = "sent"
	MessageStatusFailed      MessageStatus = "failed"
	MessageStatusDelivered   MessageStatus = "delivered"
	MessageStatusUndelivered MessageStatus = "undelivered"
	MessageStatusReceiving   MessageStatus = "receiving"
	MessageStatusReceived    MessageStatus = "received"
	MessageStatusRead        MessageStatus = "read"
)

func (e MessageStatus) ToPointer() *MessageStatus {
	return &e
}
func (e *MessageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accepted":
		fallthrough
	case "scheduled":
		fallthrough
	case "canceled":
		fallthrough
	case "queued":
		fallthrough
	case "sending":
		fallthrough
	case "sent":
		fallthrough
	case "failed":
		fallthrough
	case "delivered":
		fallthrough
	case "undelivered":
		fallthrough
	case "receiving":
		fallthrough
	case "received":
		fallthrough
	case "read":
		*e = MessageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageStatus: %v", v)
	}
}

// Price of the message.
type Price struct {
	PerUnit     *string `json:"per_unit,omitempty"`
	TotalAmount *string `json:"total_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
}

func (o *Price) GetPerUnit() *string {
	if o == nil {
		return nil
	}
	return o.PerUnit
}

func (o *Price) GetTotalAmount() *string {
	if o == nil {
		return nil
	}
	return o.TotalAmount
}

func (o *Price) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

// Error - The error returned if your message status is failed or undelivered.
type Error struct {
	// The error_code provides more information about the failure. If the message was successful, this value is null
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (o *Error) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Error) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

type Message struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The phone number that initiated the message.
	From string `json:"from"`
	// The phone number that received the message.
	To      string  `json:"to"`
	Subject *string `json:"subject,omitempty"`
	// The message text.
	Body string `json:"body"`
	// Set to sms for SMS messages and mms for MMS messages.
	Type *MessageType `json:"type,omitempty"`
	// The number of units that make up the complete message. Messages can be split up due to the constraints of the message size.
	NumberOfUnits *int64 `json:"number_of_units,omitempty"`
	// The number of media files associated with the message.
	NumberOfMediaFiles *int64 `json:"number_of_media_files,omitempty"`
	// The direction of the message.
	Direction *Direction `json:"direction,omitempty"`
	// Status of the delivery of the message.
	Status *MessageStatus `json:"status,omitempty"`
	// The scheduled date and time of the message.
	ScheduledAt *time.Time `json:"scheduled_at,omitempty"`
	// The date and time that the message was sent
	SentAt *time.Time `json:"sent_at,omitempty"`
	// Define a webhook to receive delivery notifications.
	WebhookURL *string `json:"webhook_url,omitempty"`
	// A client reference.
	Reference *string `json:"reference,omitempty"`
	// Price of the message.
	Price *Price `json:"price,omitempty"`
	// The error returned if your message status is failed or undelivered.
	Error *Error `json:"error,omitempty"`
	// The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
	MessagingServiceID *string `json:"messaging_service_id,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (m Message) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *Message) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Message) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Message) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *Message) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *Message) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *Message) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *Message) GetType() *MessageType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Message) GetNumberOfUnits() *int64 {
	if o == nil {
		return nil
	}
	return o.NumberOfUnits
}

func (o *Message) GetNumberOfMediaFiles() *int64 {
	if o == nil {
		return nil
	}
	return o.NumberOfMediaFiles
}

func (o *Message) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *Message) GetStatus() *MessageStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Message) GetScheduledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ScheduledAt
}

func (o *Message) GetSentAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SentAt
}

func (o *Message) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *Message) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *Message) GetPrice() *Price {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Message) GetError() *Error {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *Message) GetMessagingServiceID() *string {
	if o == nil {
		return nil
	}
	return o.MessagingServiceID
}

func (o *Message) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *Message) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Message) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Message) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Message) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Message) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type MessageInput struct {
	// The phone number that initiated the message.
	From string `json:"from"`
	// The phone number that received the message.
	To      string  `json:"to"`
	Subject *string `json:"subject,omitempty"`
	// The message text.
	Body string `json:"body"`
	// Set to sms for SMS messages and mms for MMS messages.
	Type *MessageType `json:"type,omitempty"`
	// The scheduled date and time of the message.
	ScheduledAt *time.Time `json:"scheduled_at,omitempty"`
	// Define a webhook to receive delivery notifications.
	WebhookURL *string `json:"webhook_url,omitempty"`
	// A client reference.
	Reference *string `json:"reference,omitempty"`
	// The ID of the Messaging Service used with the message. In case of Plivo this links to the Powerpack ID.
	MessagingServiceID *string `json:"messaging_service_id,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (m MessageInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MessageInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MessageInput) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *MessageInput) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *MessageInput) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *MessageInput) GetBody() string {
	if o == nil {
		return ""
	}
	return o.Body
}

func (o *MessageInput) GetType() *MessageType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *MessageInput) GetScheduledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ScheduledAt
}

func (o *MessageInput) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *MessageInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *MessageInput) GetMessagingServiceID() *string {
	if o == nil {
		return nil
	}
	return o.MessagingServiceID
}

func (o *MessageInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
