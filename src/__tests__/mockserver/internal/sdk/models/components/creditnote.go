// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// CreditNoteStatus - Status of credit notes
type CreditNoteStatus string

const (
	CreditNoteStatusDraft      CreditNoteStatus = "draft"
	CreditNoteStatusAuthorised CreditNoteStatus = "authorised"
	CreditNoteStatusPaid       CreditNoteStatus = "paid"
	CreditNoteStatusVoided     CreditNoteStatus = "voided"
	CreditNoteStatusDeleted    CreditNoteStatus = "deleted"
)

func (e CreditNoteStatus) ToPointer() *CreditNoteStatus {
	return &e
}
func (e *CreditNoteStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "authorised":
		fallthrough
	case "paid":
		fallthrough
	case "voided":
		fallthrough
	case "deleted":
		*e = CreditNoteStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteStatus: %v", v)
	}
}

// CreditNoteType - Type of payment
type CreditNoteType string

const (
	CreditNoteTypeAccountsReceivableCredit CreditNoteType = "accounts_receivable_credit"
	CreditNoteTypeAccountsPayableCredit    CreditNoteType = "accounts_payable_credit"
)

func (e CreditNoteType) ToPointer() *CreditNoteType {
	return &e
}
func (e *CreditNoteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accounts_receivable_credit":
		fallthrough
	case "accounts_payable_credit":
		*e = CreditNoteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteType: %v", v)
	}
}

type CreditNote struct {
	// Unique identifier representing the entity
	ID string `json:"id"`
	// Credit note number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Amount of transaction
	TotalAmount float64 `json:"total_amount"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// The balance reflecting any payments made against the transaction.
	Balance *float64 `json:"balance,omitempty"`
	// Indicates the total credit amount still available to apply towards the payment.
	RemainingCredit *float64 `json:"remaining_credit,omitempty"`
	// Status of credit notes
	Status *CreditNoteStatus `json:"status,omitempty"`
	// Optional reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
	DateIssued *time.Time `json:"date_issued,omitempty"`
	// Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
	DatePaid *time.Time `json:"date_paid,omitempty"`
	// Type of payment
	Type        *CreditNoteType      `json:"type,omitempty"`
	Account     *LinkedLedgerAccount `json:"account,omitempty"`
	LineItems   []InvoiceLineItem    `json:"line_items,omitempty"`
	Allocations []Allocation         `json:"allocations,omitempty"`
	// Optional note to be associated with the credit note.
	Note *string `json:"note,omitempty"`
	// Optional terms to be associated with the credit note.
	Terms           *string  `json:"terms,omitempty"`
	BillingAddress  *Address `json:"billing_address,omitempty"`
	ShippingAddress *Address `json:"shipping_address,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// When custom mappings are configured on the resource, the result is included here.
	CustomMappings map[string]any `json:"custom_mappings,omitempty"`
	CustomFields   []CustomField  `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (c CreditNote) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreditNote) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreditNote) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreditNote) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *CreditNote) GetCustomer() *LinkedCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *CreditNote) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *CreditNote) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreditNote) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *CreditNote) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *CreditNote) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *CreditNote) GetTotalAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalAmount
}

func (o *CreditNote) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *CreditNote) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *CreditNote) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *CreditNote) GetRemainingCredit() *float64 {
	if o == nil {
		return nil
	}
	return o.RemainingCredit
}

func (o *CreditNote) GetStatus() *CreditNoteStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreditNote) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *CreditNote) GetDateIssued() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateIssued
}

func (o *CreditNote) GetDatePaid() *time.Time {
	if o == nil {
		return nil
	}
	return o.DatePaid
}

func (o *CreditNote) GetType() *CreditNoteType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreditNote) GetAccount() *LinkedLedgerAccount {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *CreditNote) GetLineItems() []InvoiceLineItem {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *CreditNote) GetAllocations() []Allocation {
	if o == nil {
		return nil
	}
	return o.Allocations
}

func (o *CreditNote) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *CreditNote) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *CreditNote) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreditNote) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreditNote) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *CreditNote) GetCustomMappings() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomMappings
}

func (o *CreditNote) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *CreditNote) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *CreditNote) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreditNote) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreditNote) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreditNote) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreditNote) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}

type CreditNoteInput struct {
	// Credit note number.
	Number *string `json:"number,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// The company or subsidiary id the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Currency Exchange Rate at the time entity was recorded/generated.
	CurrencyRate *float64 `json:"currency_rate,omitempty"`
	// Amounts are including tax
	TaxInclusive *bool `json:"tax_inclusive,omitempty"`
	// Sub-total amount, normally before tax.
	SubTotal *float64 `json:"sub_total,omitempty"`
	// Amount of transaction
	TotalAmount float64 `json:"total_amount"`
	// Total tax amount applied to this invoice.
	TotalTax *float64 `json:"total_tax,omitempty"`
	// Applicable tax id/code override if tax is not supplied on a line item basis.
	TaxCode *string `json:"tax_code,omitempty"`
	// The balance reflecting any payments made against the transaction.
	Balance *float64 `json:"balance,omitempty"`
	// Indicates the total credit amount still available to apply towards the payment.
	RemainingCredit *float64 `json:"remaining_credit,omitempty"`
	// Status of credit notes
	Status *CreditNoteStatus `json:"status,omitempty"`
	// Optional reference message ie: Debit remittance detail.
	Reference *string `json:"reference,omitempty"`
	// Date credit note issued - YYYY:MM::DDThh:mm:ss.sTZD
	DateIssued *time.Time `json:"date_issued,omitempty"`
	// Date credit note paid - YYYY:MM::DDThh:mm:ss.sTZD
	DatePaid *time.Time `json:"date_paid,omitempty"`
	// Type of payment
	Type        *CreditNoteType           `json:"type,omitempty"`
	Account     *LinkedLedgerAccountInput `json:"account,omitempty"`
	LineItems   []InvoiceLineItemInput    `json:"line_items,omitempty"`
	Allocations []AllocationInput         `json:"allocations,omitempty"`
	// Optional note to be associated with the credit note.
	Note *string `json:"note,omitempty"`
	// Optional terms to be associated with the credit note.
	Terms           *string  `json:"terms,omitempty"`
	BillingAddress  *Address `json:"billing_address,omitempty"`
	ShippingAddress *Address `json:"shipping_address,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	CustomFields       []CustomField             `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The pass_through property allows passing service-specific, custom data or structured modifications in request body when creating or updating resources.
	PassThrough []PassThroughBody `json:"pass_through,omitempty"`
}

func (c CreditNoteInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreditNoteInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreditNoteInput) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

func (o *CreditNoteInput) GetCustomer() *LinkedCustomerInput {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *CreditNoteInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *CreditNoteInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *CreditNoteInput) GetCurrencyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CurrencyRate
}

func (o *CreditNoteInput) GetTaxInclusive() *bool {
	if o == nil {
		return nil
	}
	return o.TaxInclusive
}

func (o *CreditNoteInput) GetSubTotal() *float64 {
	if o == nil {
		return nil
	}
	return o.SubTotal
}

func (o *CreditNoteInput) GetTotalAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalAmount
}

func (o *CreditNoteInput) GetTotalTax() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalTax
}

func (o *CreditNoteInput) GetTaxCode() *string {
	if o == nil {
		return nil
	}
	return o.TaxCode
}

func (o *CreditNoteInput) GetBalance() *float64 {
	if o == nil {
		return nil
	}
	return o.Balance
}

func (o *CreditNoteInput) GetRemainingCredit() *float64 {
	if o == nil {
		return nil
	}
	return o.RemainingCredit
}

func (o *CreditNoteInput) GetStatus() *CreditNoteStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreditNoteInput) GetReference() *string {
	if o == nil {
		return nil
	}
	return o.Reference
}

func (o *CreditNoteInput) GetDateIssued() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateIssued
}

func (o *CreditNoteInput) GetDatePaid() *time.Time {
	if o == nil {
		return nil
	}
	return o.DatePaid
}

func (o *CreditNoteInput) GetType() *CreditNoteType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreditNoteInput) GetAccount() *LinkedLedgerAccountInput {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *CreditNoteInput) GetLineItems() []InvoiceLineItemInput {
	if o == nil {
		return nil
	}
	return o.LineItems
}

func (o *CreditNoteInput) GetAllocations() []AllocationInput {
	if o == nil {
		return nil
	}
	return o.Allocations
}

func (o *CreditNoteInput) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *CreditNoteInput) GetTerms() *string {
	if o == nil {
		return nil
	}
	return o.Terms
}

func (o *CreditNoteInput) GetBillingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreditNoteInput) GetShippingAddress() *Address {
	if o == nil {
		return nil
	}
	return o.ShippingAddress
}

func (o *CreditNoteInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *CreditNoteInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *CreditNoteInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *CreditNoteInput) GetPassThrough() []PassThroughBody {
	if o == nil {
		return nil
	}
	return o.PassThrough
}
