// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type FormFieldType string

const (
	FormFieldTypeText           FormFieldType = "text"
	FormFieldTypeCheckbox       FormFieldType = "checkbox"
	FormFieldTypeTel            FormFieldType = "tel"
	FormFieldTypeEmail          FormFieldType = "email"
	FormFieldTypeURL            FormFieldType = "url"
	FormFieldTypeTextarea       FormFieldType = "textarea"
	FormFieldTypeSelect         FormFieldType = "select"
	FormFieldTypeFilteredSelect FormFieldType = "filtered-select"
	FormFieldTypeMultiSelect    FormFieldType = "multi-select"
	FormFieldTypeDatetime       FormFieldType = "datetime"
	FormFieldTypeDate           FormFieldType = "date"
	FormFieldTypeTime           FormFieldType = "time"
	FormFieldTypeNumber         FormFieldType = "number"
)

func (e FormFieldType) ToPointer() *FormFieldType {
	return &e
}
func (e *FormFieldType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "checkbox":
		fallthrough
	case "tel":
		fallthrough
	case "email":
		fallthrough
	case "url":
		fallthrough
	case "textarea":
		fallthrough
	case "select":
		fallthrough
	case "filtered-select":
		fallthrough
	case "multi-select":
		fallthrough
	case "datetime":
		fallthrough
	case "date":
		fallthrough
	case "time":
		fallthrough
	case "number":
		*e = FormFieldType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FormFieldType: %v", v)
	}
}

type FormField struct {
	// The unique identifier of the form field.
	ID *string `json:"id,omitempty"`
	// The label of the field
	Label *string `json:"label,omitempty"`
	// The placeholder for the form field
	Placeholder *string `json:"placeholder,omitempty"`
	// The description of the form field
	Description *string        `json:"description,omitempty"`
	Type        *FormFieldType `json:"type,omitempty"`
	// Indicates if the form field is required, which means it must be filled in before the form can be submitted
	Required    *bool `json:"required,omitempty"`
	CustomField *bool `json:"custom_field,omitempty"`
	// Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
	AllowCustomValues *bool `default:"false" json:"allow_custom_values"`
	// Indicates if the form field is displayed in a “read-only” mode.
	Disabled *bool `json:"disabled,omitempty"`
	// Indicates if the form field is not displayed but the value that is being stored on the connection.
	Hidden *bool `json:"hidden,omitempty"`
	// When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
	Deprecated *bool `json:"deprecated,omitempty"`
	// Indicates if the form field contains sensitive data, which will display the value as a masked input.
	Sensitive *bool `json:"sensitive,omitempty"`
	// Prefix to display in front of the form field.
	Prefix *string `json:"prefix,omitempty"`
	// Suffix to display next to the form field.
	Suffix  *string           `json:"suffix,omitempty"`
	Options []FormFieldOption `json:"options,omitempty"`
}

func (f FormField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FormField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FormField) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FormField) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *FormField) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *FormField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *FormField) GetType() *FormFieldType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FormField) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *FormField) GetCustomField() *bool {
	if o == nil {
		return nil
	}
	return o.CustomField
}

func (o *FormField) GetAllowCustomValues() *bool {
	if o == nil {
		return nil
	}
	return o.AllowCustomValues
}

func (o *FormField) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *FormField) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *FormField) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *FormField) GetSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.Sensitive
}

func (o *FormField) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *FormField) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *FormField) GetOptions() []FormFieldOption {
	if o == nil {
		return nil
	}
	return o.Options
}
