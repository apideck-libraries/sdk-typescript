// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
)

// EmployeeJobStatus - Indicates the status of the job.
type EmployeeJobStatus string

const (
	EmployeeJobStatusActive   EmployeeJobStatus = "active"
	EmployeeJobStatusInactive EmployeeJobStatus = "inactive"
	EmployeeJobStatusOther    EmployeeJobStatus = "other"
)

func (e EmployeeJobStatus) ToPointer() *EmployeeJobStatus {
	return &e
}
func (e *EmployeeJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		fallthrough
	case "other":
		*e = EmployeeJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmployeeJobStatus: %v", v)
	}
}

type EmployeeJob struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A unique identifier for an object.
	EmployeeID *string `json:"employee_id,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The position and responsibilities of the person within the organization.
	Role *string `json:"role,omitempty"`
	// The date on which the employee starts working in their current job role.
	StartDate *types.Date `json:"start_date,omitempty"`
	// The date on which the employee leaves or is expected to leave their current job role.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The rate of pay for the employee in their current job role.
	CompensationRate *float64 `json:"compensation_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnit `json:"payment_unit,omitempty"`
	// The date on which the employee was hired by the organization
	HiredAt *types.Date `json:"hired_at,omitempty"`
	// Indicates whether this the employee's primary job.
	IsPrimary *bool `json:"is_primary,omitempty"`
	// Indicates whether this the employee has a manager role.
	IsManager *bool `json:"is_manager,omitempty"`
	// Indicates the status of the job.
	Status   *EmployeeJobStatus `json:"status,omitempty"`
	Location *Address           `json:"location,omitempty"`
}

func (e EmployeeJob) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmployeeJob) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmployeeJob) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EmployeeJob) GetEmployeeID() *string {
	if o == nil {
		return nil
	}
	return o.EmployeeID
}

func (o *EmployeeJob) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EmployeeJob) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *EmployeeJob) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *EmployeeJob) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *EmployeeJob) GetCompensationRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CompensationRate
}

func (o *EmployeeJob) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *EmployeeJob) GetPaymentUnit() *PaymentUnit {
	if o == nil {
		return nil
	}
	return o.PaymentUnit
}

func (o *EmployeeJob) GetHiredAt() *types.Date {
	if o == nil {
		return nil
	}
	return o.HiredAt
}

func (o *EmployeeJob) GetIsPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrimary
}

func (o *EmployeeJob) GetIsManager() *bool {
	if o == nil {
		return nil
	}
	return o.IsManager
}

func (o *EmployeeJob) GetStatus() *EmployeeJobStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EmployeeJob) GetLocation() *Address {
	if o == nil {
		return nil
	}
	return o.Location
}

type EmployeeJobInput struct {
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The position and responsibilities of the person within the organization.
	Role *string `json:"role,omitempty"`
	// The date on which the employee starts working in their current job role.
	StartDate *types.Date `json:"start_date,omitempty"`
	// The date on which the employee leaves or is expected to leave their current job role.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The rate of pay for the employee in their current job role.
	CompensationRate *float64 `json:"compensation_rate,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Unit of measurement for employee compensation.
	PaymentUnit *PaymentUnit `json:"payment_unit,omitempty"`
	// The date on which the employee was hired by the organization
	HiredAt *types.Date `json:"hired_at,omitempty"`
	// Indicates whether this the employee's primary job.
	IsPrimary *bool `json:"is_primary,omitempty"`
	// Indicates whether this the employee has a manager role.
	IsManager *bool `json:"is_manager,omitempty"`
	// Indicates the status of the job.
	Status   *EmployeeJobStatus `json:"status,omitempty"`
	Location *Address           `json:"location,omitempty"`
}

func (e EmployeeJobInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmployeeJobInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmployeeJobInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EmployeeJobInput) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *EmployeeJobInput) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *EmployeeJobInput) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *EmployeeJobInput) GetCompensationRate() *float64 {
	if o == nil {
		return nil
	}
	return o.CompensationRate
}

func (o *EmployeeJobInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *EmployeeJobInput) GetPaymentUnit() *PaymentUnit {
	if o == nil {
		return nil
	}
	return o.PaymentUnit
}

func (o *EmployeeJobInput) GetHiredAt() *types.Date {
	if o == nil {
		return nil
	}
	return o.HiredAt
}

func (o *EmployeeJobInput) GetIsPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrimary
}

func (o *EmployeeJobInput) GetIsManager() *bool {
	if o == nil {
		return nil
	}
	return o.IsManager
}

func (o *EmployeeJobInput) GetStatus() *EmployeeJobStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EmployeeJobInput) GetLocation() *Address {
	if o == nil {
		return nil
	}
	return o.Location
}
