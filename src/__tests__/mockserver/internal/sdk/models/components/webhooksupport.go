// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// WebhookSupportMode - Mode of the webhook support.
type WebhookSupportMode string

const (
	WebhookSupportModeNative  WebhookSupportMode = "native"
	WebhookSupportModeVirtual WebhookSupportMode = "virtual"
	WebhookSupportModeNone    WebhookSupportMode = "none"
)

func (e WebhookSupportMode) ToPointer() *WebhookSupportMode {
	return &e
}
func (e *WebhookSupportMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "native":
		fallthrough
	case "virtual":
		fallthrough
	case "none":
		*e = WebhookSupportMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebhookSupportMode: %v", v)
	}
}

// SubscriptionLevel - Received events are scoped to connection or across integration.
type SubscriptionLevel string

const (
	SubscriptionLevelConnection  SubscriptionLevel = "connection"
	SubscriptionLevelIntegration SubscriptionLevel = "integration"
)

func (e SubscriptionLevel) ToPointer() *SubscriptionLevel {
	return &e
}
func (e *SubscriptionLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "connection":
		fallthrough
	case "integration":
		*e = SubscriptionLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionLevel: %v", v)
	}
}

// ManagedVia - How the subscription is managed in the downstream.
type ManagedVia string

const (
	ManagedViaManual ManagedVia = "manual"
	ManagedViaAPI    ManagedVia = "api"
)

func (e ManagedVia) ToPointer() *ManagedVia {
	return &e
}
func (e *ManagedVia) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "api":
		*e = ManagedVia(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedVia: %v", v)
	}
}

// Unit - The window unit for the rate.
type Unit string

const (
	UnitSecond Unit = "second"
	UnitMinute Unit = "minute"
	UnitHour   Unit = "hour"
	UnitDay    Unit = "day"
)

func (e Unit) ToPointer() *Unit {
	return &e
}
func (e *Unit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "second":
		fallthrough
	case "minute":
		fallthrough
	case "hour":
		fallthrough
	case "day":
		*e = Unit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Unit: %v", v)
	}
}

// RequestRate - The rate at which requests for resources will be made to downstream.
type RequestRate struct {
	// The number of requests per window unit.
	Rate int64 `json:"rate"`
	// Size of request window.
	Size int64 `json:"size"`
	// The window unit for the rate.
	Unit Unit `json:"unit"`
}

func (o *RequestRate) GetRate() int64 {
	if o == nil {
		return 0
	}
	return o.Rate
}

func (o *RequestRate) GetSize() int64 {
	if o == nil {
		return 0
	}
	return o.Size
}

func (o *RequestRate) GetUnit() Unit {
	if o == nil {
		return Unit("")
	}
	return o.Unit
}

type Resources struct {
	Events []string `json:"events,omitempty"`
}

func (o *Resources) GetEvents() []string {
	if o == nil {
		return nil
	}
	return o.Events
}

// VirtualWebhooks - Virtual webhook config for the connector.
type VirtualWebhooks struct {
	// The rate at which requests for resources will be made to downstream.
	RequestRate RequestRate `json:"request_rate"`
	// The resources that will be requested from downstream.
	Resources map[string]Resources `json:"resources,omitempty"`
}

func (o *VirtualWebhooks) GetRequestRate() RequestRate {
	if o == nil {
		return RequestRate{}
	}
	return o.RequestRate
}

func (o *VirtualWebhooks) GetResources() map[string]Resources {
	if o == nil {
		return nil
	}
	return o.Resources
}

// WebhookSupport - How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
type WebhookSupport struct {
	// Mode of the webhook support.
	Mode *WebhookSupportMode `json:"mode,omitempty"`
	// Received events are scoped to connection or across integration.
	SubscriptionLevel *SubscriptionLevel `json:"subscription_level,omitempty"`
	// How the subscription is managed in the downstream.
	ManagedVia *ManagedVia `json:"managed_via,omitempty"`
	// Virtual webhook config for the connector.
	VirtualWebhooks *VirtualWebhooks `json:"virtual_webhooks,omitempty"`
}

func (o *WebhookSupport) GetMode() *WebhookSupportMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *WebhookSupport) GetSubscriptionLevel() *SubscriptionLevel {
	if o == nil {
		return nil
	}
	return o.SubscriptionLevel
}

func (o *WebhookSupport) GetManagedVia() *ManagedVia {
	if o == nil {
		return nil
	}
	return o.ManagedVia
}

func (o *WebhookSupport) GetVirtualWebhooks() *VirtualWebhooks {
	if o == nil {
		return nil
	}
	return o.VirtualWebhooks
}
