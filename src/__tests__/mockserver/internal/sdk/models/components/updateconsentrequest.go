// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// ResourcesEnum - Wildcard indicating all resources and fields when Data Scopes is disabled
type ResourcesEnum string

const (
	ResourcesEnumWildcard ResourcesEnum = "*"
)

func (e ResourcesEnum) ToPointer() *ResourcesEnum {
	return &e
}
func (e *ResourcesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "*":
		*e = ResourcesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourcesEnum: %v", v)
	}
}

type UpdateConsentRequestResources struct {
	// Whether the field can be read
	Read *bool `json:"read,omitempty"`
	// Whether the field can be written to
	Write *bool `json:"write,omitempty"`
}

func (u UpdateConsentRequestResources) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateConsentRequestResources) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateConsentRequestResources) GetRead() *bool {
	if o == nil {
		return nil
	}
	return o.Read
}

func (o *UpdateConsentRequestResources) GetWrite() *bool {
	if o == nil {
		return nil
	}
	return o.Write
}

type ResourcesType string

const (
	ResourcesTypeMapOfMapOfUpdateConsentRequestResources ResourcesType = "mapOfMapOfUpdateConsentRequestResources"
	ResourcesTypeResourcesEnum                           ResourcesType = "resources_enum"
)

type Resources struct {
	MapOfMapOfUpdateConsentRequestResources map[string]map[string]UpdateConsentRequestResources `queryParam:"inline"`
	ResourcesEnum                           *ResourcesEnum                                      `queryParam:"inline"`

	Type ResourcesType
}

func CreateResourcesMapOfMapOfUpdateConsentRequestResources(mapOfMapOfUpdateConsentRequestResources map[string]map[string]UpdateConsentRequestResources) Resources {
	typ := ResourcesTypeMapOfMapOfUpdateConsentRequestResources

	return Resources{
		MapOfMapOfUpdateConsentRequestResources: mapOfMapOfUpdateConsentRequestResources,
		Type:                                    typ,
	}
}

func CreateResourcesResourcesEnum(resourcesEnum ResourcesEnum) Resources {
	typ := ResourcesTypeResourcesEnum

	return Resources{
		ResourcesEnum: &resourcesEnum,
		Type:          typ,
	}
}

func (u *Resources) UnmarshalJSON(data []byte) error {

	var mapOfMapOfUpdateConsentRequestResources map[string]map[string]UpdateConsentRequestResources = map[string]map[string]UpdateConsentRequestResources{}
	if err := utils.UnmarshalJSON(data, &mapOfMapOfUpdateConsentRequestResources, "", true, nil); err == nil {
		u.MapOfMapOfUpdateConsentRequestResources = mapOfMapOfUpdateConsentRequestResources
		u.Type = ResourcesTypeMapOfMapOfUpdateConsentRequestResources
		return nil
	}

	var resourcesEnum ResourcesEnum = ResourcesEnum("")
	if err := utils.UnmarshalJSON(data, &resourcesEnum, "", true, nil); err == nil {
		u.ResourcesEnum = &resourcesEnum
		u.Type = ResourcesTypeResourcesEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Resources", string(data))
}

func (u Resources) MarshalJSON() ([]byte, error) {
	if u.MapOfMapOfUpdateConsentRequestResources != nil {
		return utils.MarshalJSON(u.MapOfMapOfUpdateConsentRequestResources, "", true)
	}

	if u.ResourcesEnum != nil {
		return utils.MarshalJSON(u.ResourcesEnum, "", true)
	}

	return nil, errors.New("could not marshal union type Resources: all fields are null")
}

type UpdateConsentRequest struct {
	Resources Resources `json:"resources"`
	// Whether consent is being granted (true) or denied/revoked (false)
	Granted bool `json:"granted"`
}

func (o *UpdateConsentRequest) GetResources() Resources {
	if o == nil {
		return Resources{}
	}
	return o.Resources
}

func (o *UpdateConsentRequest) GetGranted() bool {
	if o == nil {
		return false
	}
	return o.Granted
}
