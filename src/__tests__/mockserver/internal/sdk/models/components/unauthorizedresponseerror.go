// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type UnauthorizedResponseDetailType string

const (
	UnauthorizedResponseDetailTypeStr      UnauthorizedResponseDetailType = "str"
	UnauthorizedResponseDetailTypeMapOfAny UnauthorizedResponseDetailType = "mapOfAny"
)

// UnauthorizedResponseDetail - Contains parameter or domain specific information related to the error and why it occurred.
type UnauthorizedResponseDetail struct {
	Str      *string        `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type UnauthorizedResponseDetailType
}

func CreateUnauthorizedResponseDetailStr(str string) UnauthorizedResponseDetail {
	typ := UnauthorizedResponseDetailTypeStr

	return UnauthorizedResponseDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnauthorizedResponseDetailMapOfAny(mapOfAny map[string]any) UnauthorizedResponseDetail {
	typ := UnauthorizedResponseDetailTypeMapOfAny

	return UnauthorizedResponseDetail{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *UnauthorizedResponseDetail) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UnauthorizedResponseDetailTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = UnauthorizedResponseDetailTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UnauthorizedResponseDetail", string(data))
}

func (u UnauthorizedResponseDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type UnauthorizedResponseDetail: all fields are null")
}
