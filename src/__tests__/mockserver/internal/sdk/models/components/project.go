// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

// ProjectProjectStatus - Current status of the project
type ProjectProjectStatus string

const (
	ProjectProjectStatusActive     ProjectProjectStatus = "active"
	ProjectProjectStatusCompleted  ProjectProjectStatus = "completed"
	ProjectProjectStatusOnHold     ProjectProjectStatus = "on_hold"
	ProjectProjectStatusCancelled  ProjectProjectStatus = "cancelled"
	ProjectProjectStatusDraft      ProjectProjectStatus = "draft"
	ProjectProjectStatusInProgress ProjectProjectStatus = "in_progress"
	ProjectProjectStatusApproved   ProjectProjectStatus = "approved"
	ProjectProjectStatusOther      ProjectProjectStatus = "other"
)

func (e ProjectProjectStatus) ToPointer() *ProjectProjectStatus {
	return &e
}
func (e *ProjectProjectStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "completed":
		fallthrough
	case "on_hold":
		fallthrough
	case "cancelled":
		fallthrough
	case "draft":
		fallthrough
	case "in_progress":
		fallthrough
	case "approved":
		fallthrough
	case "other":
		*e = ProjectProjectStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectProjectStatus: %v", v)
	}
}

// ProjectType - Type or category of the project
type ProjectType string

const (
	ProjectTypeClientProject       ProjectType = "client_project"
	ProjectTypeInternalProject     ProjectType = "internal_project"
	ProjectTypeMaintenance         ProjectType = "maintenance"
	ProjectTypeResearchDevelopment ProjectType = "research_development"
	ProjectTypeTraining            ProjectType = "training"
	ProjectTypeOther               ProjectType = "other"
)

func (e ProjectType) ToPointer() *ProjectType {
	return &e
}
func (e *ProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_project":
		fallthrough
	case "internal_project":
		fallthrough
	case "maintenance":
		fallthrough
	case "research_development":
		fallthrough
	case "training":
		fallthrough
	case "other":
		*e = ProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectType: %v", v)
	}
}

// ProjectPriority - Priority level of the project
type ProjectPriority string

const (
	ProjectPriorityLow      ProjectPriority = "low"
	ProjectPriorityMedium   ProjectPriority = "medium"
	ProjectPriorityHigh     ProjectPriority = "high"
	ProjectPriorityCritical ProjectPriority = "critical"
)

func (e ProjectPriority) ToPointer() *ProjectPriority {
	return &e
}
func (e *ProjectPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		fallthrough
	case "critical":
		*e = ProjectPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectPriority: %v", v)
	}
}

// ProjectDepartment - Department or organizational unit associated with the project
type ProjectDepartment struct {
	// Unique identifier for the department
	ID *string `json:"id,omitempty"`
	// Name of the department
	Name *string `json:"name,omitempty"`
}

func (o *ProjectDepartment) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ProjectDepartment) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// ParentProject - Parent project if this is a subproject
type ParentProject struct {
	// Unique identifier for the parent project
	ID *string `json:"id,omitempty"`
	// Name of the parent project
	Name *string `json:"name,omitempty"`
}

func (o *ParentProject) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ParentProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// BillingMethod - Method used for billing this project
type BillingMethod string

const (
	BillingMethodFixedPrice       BillingMethod = "fixed_price"
	BillingMethodTimeAndMaterials BillingMethod = "time_and_materials"
	BillingMethodMilestoneBased   BillingMethod = "milestone_based"
	BillingMethodRetainer         BillingMethod = "retainer"
	BillingMethodNonBillable      BillingMethod = "non_billable"
)

func (e BillingMethod) ToPointer() *BillingMethod {
	return &e
}
func (e *BillingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_price":
		fallthrough
	case "time_and_materials":
		fallthrough
	case "milestone_based":
		fallthrough
	case "retainer":
		fallthrough
	case "non_billable":
		*e = BillingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingMethod: %v", v)
	}
}

// ProjectPhase - Current phase of the project lifecycle
type ProjectPhase string

const (
	ProjectPhaseInitiation ProjectPhase = "initiation"
	ProjectPhasePlanning   ProjectPhase = "planning"
	ProjectPhaseExecution  ProjectPhase = "execution"
	ProjectPhaseMonitoring ProjectPhase = "monitoring"
	ProjectPhaseClosure    ProjectPhase = "closure"
	ProjectPhaseOther      ProjectPhase = "other"
)

func (e ProjectPhase) ToPointer() *ProjectPhase {
	return &e
}
func (e *ProjectPhase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "initiation":
		fallthrough
	case "planning":
		fallthrough
	case "execution":
		fallthrough
	case "monitoring":
		fallthrough
	case "closure":
		fallthrough
	case "other":
		*e = ProjectPhase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectPhase: %v", v)
	}
}

// ScheduleStatus - Current status of project schedule compared to plan
type ScheduleStatus string

const (
	ScheduleStatusAheadOfSchedule ScheduleStatus = "ahead_of_schedule"
	ScheduleStatusOnSchedule      ScheduleStatus = "on_schedule"
	ScheduleStatusBehindSchedule  ScheduleStatus = "behind_schedule"
	ScheduleStatusCriticalDelay   ScheduleStatus = "critical_delay"
)

func (e ScheduleStatus) ToPointer() *ScheduleStatus {
	return &e
}
func (e *ScheduleStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ahead_of_schedule":
		fallthrough
	case "on_schedule":
		fallthrough
	case "behind_schedule":
		fallthrough
	case "critical_delay":
		*e = ScheduleStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleStatus: %v", v)
	}
}

type Project struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// The third-party API ID of original entity
	DownstreamID *string `json:"downstream_id,omitempty"`
	// Name of the project
	Name string `json:"name"`
	// User-friendly project identifier
	DisplayID *string `json:"display_id,omitempty"`
	// External reference identifier for the project
	ReferenceID *string `json:"reference_id,omitempty"`
	// Detailed description of the project
	Description *string `json:"description,omitempty"`
	// Current status of the project
	Status *ProjectProjectStatus `json:"status,omitempty"`
	// Indicates whether the project is currently active or inactive
	Active *bool `json:"active,omitempty"`
	// Type or category of the project
	ProjectType *ProjectType `json:"project_type,omitempty"`
	// Priority level of the project
	Priority *ProjectPriority `json:"priority,omitempty"`
	// Percentage of project completion (0-100)
	CompletionPercentage *float64 `json:"completion_percentage,omitempty"`
	// Start date of the project
	StartDate *types.Date `json:"start_date,omitempty"`
	// Expected or actual end date of the project
	EndDate *types.Date `json:"end_date,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomer `json:"customer,omitempty"`
	// Department or organizational unit associated with the project
	Department *ProjectDepartment `json:"department,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// ID of the user who owns/manages this project
	OwnerID *string `json:"owner_id,omitempty"`
	// Parent project if this is a subproject
	ParentProject *ParentProject `json:"parent_project,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Total budgeted amount for the project
	BudgetAmount *float64 `json:"budget_amount,omitempty"`
	// Approved budget amount for the project
	ApprovedAmount *float64 `json:"approved_amount,omitempty"`
	// Total actual amount spent on the project
	ActualAmount *float64 `json:"actual_amount,omitempty"`
	// Total budgeted hours for the project
	BudgetHours *float64 `json:"budget_hours,omitempty"`
	// Total actual hours worked on the project
	ActualHours *float64 `json:"actual_hours,omitempty"`
	// Default hourly rate for project work
	HourlyRate *float64 `json:"hourly_rate,omitempty"`
	// Method used for billing this project
	BillingMethod *BillingMethod `json:"billing_method,omitempty"`
	// Indicates if the project is billable to the customer
	IsBillable *bool `default:"true" json:"is_billable"`
	// Current phase of the project lifecycle
	Phase   *ProjectPhase  `json:"phase,omitempty"`
	TaxRate *LinkedTaxRate `json:"tax_rate,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Tags associated with the project
	Tags []string `json:"tags,omitempty"`
	// Additional notes about the project
	Notes *string `json:"notes,omitempty"`
	// Contract or agreement number associated with the project
	ContractNumber *string `json:"contract_number,omitempty"`
	// Expected profit margin percentage for the project
	ProfitMargin *float64 `json:"profit_margin,omitempty"`
	// Current status of project schedule compared to plan
	ScheduleStatus *ScheduleStatus `json:"schedule_status,omitempty"`
	// An array of addresses associated with the project (billing, job site, etc.)
	Addresses []Address `json:"addresses,omitempty"`
	// Number of team members assigned to the project
	TeamSize     *int64        `json:"team_size,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// The user who created the object.
	CreatedBy *string `json:"created_by,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (p Project) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Project) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *Project) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Project) GetDownstreamID() *string {
	if o == nil {
		return nil
	}
	return o.DownstreamID
}

func (o *Project) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *Project) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *Project) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Project) GetStatus() *ProjectProjectStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Project) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *Project) GetProjectType() *ProjectType {
	if o == nil {
		return nil
	}
	return o.ProjectType
}

func (o *Project) GetPriority() *ProjectPriority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *Project) GetCompletionPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletionPercentage
}

func (o *Project) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *Project) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *Project) GetCustomer() *LinkedCustomer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *Project) GetDepartment() *ProjectDepartment {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *Project) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *Project) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Project) GetParentProject() *ParentProject {
	if o == nil {
		return nil
	}
	return o.ParentProject
}

func (o *Project) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Project) GetBudgetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BudgetAmount
}

func (o *Project) GetApprovedAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ApprovedAmount
}

func (o *Project) GetActualAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ActualAmount
}

func (o *Project) GetBudgetHours() *float64 {
	if o == nil {
		return nil
	}
	return o.BudgetHours
}

func (o *Project) GetActualHours() *float64 {
	if o == nil {
		return nil
	}
	return o.ActualHours
}

func (o *Project) GetHourlyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.HourlyRate
}

func (o *Project) GetBillingMethod() *BillingMethod {
	if o == nil {
		return nil
	}
	return o.BillingMethod
}

func (o *Project) GetIsBillable() *bool {
	if o == nil {
		return nil
	}
	return o.IsBillable
}

func (o *Project) GetPhase() *ProjectPhase {
	if o == nil {
		return nil
	}
	return o.Phase
}

func (o *Project) GetTaxRate() *LinkedTaxRate {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *Project) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *Project) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Project) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *Project) GetContractNumber() *string {
	if o == nil {
		return nil
	}
	return o.ContractNumber
}

func (o *Project) GetProfitMargin() *float64 {
	if o == nil {
		return nil
	}
	return o.ProfitMargin
}

func (o *Project) GetScheduleStatus() *ScheduleStatus {
	if o == nil {
		return nil
	}
	return o.ScheduleStatus
}

func (o *Project) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *Project) GetTeamSize() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamSize
}

func (o *Project) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Project) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}

func (o *Project) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Project) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Project) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Project) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type ProjectInput struct {
	// Name of the project
	Name string `json:"name"`
	// User-friendly project identifier
	DisplayID *string `json:"display_id,omitempty"`
	// External reference identifier for the project
	ReferenceID *string `json:"reference_id,omitempty"`
	// Detailed description of the project
	Description *string `json:"description,omitempty"`
	// Current status of the project
	Status *ProjectProjectStatus `json:"status,omitempty"`
	// Indicates whether the project is currently active or inactive
	Active *bool `json:"active,omitempty"`
	// Type or category of the project
	ProjectType *ProjectType `json:"project_type,omitempty"`
	// Priority level of the project
	Priority *ProjectPriority `json:"priority,omitempty"`
	// Percentage of project completion (0-100)
	CompletionPercentage *float64 `json:"completion_percentage,omitempty"`
	// Start date of the project
	StartDate *types.Date `json:"start_date,omitempty"`
	// Expected or actual end date of the project
	EndDate *types.Date `json:"end_date,omitempty"`
	// The customer this entity is linked to.
	Customer *LinkedCustomerInput `json:"customer,omitempty"`
	// Department or organizational unit associated with the project
	Department *ProjectDepartment `json:"department,omitempty"`
	// The company ID the transaction belongs to
	CompanyID *string `json:"company_id,omitempty"`
	// ID of the user who owns/manages this project
	OwnerID *string `json:"owner_id,omitempty"`
	// Parent project if this is a subproject
	ParentProject *ParentProject `json:"parent_project,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	// Total budgeted amount for the project
	BudgetAmount *float64 `json:"budget_amount,omitempty"`
	// Approved budget amount for the project
	ApprovedAmount *float64 `json:"approved_amount,omitempty"`
	// Total budgeted hours for the project
	BudgetHours *float64 `json:"budget_hours,omitempty"`
	// Default hourly rate for project work
	HourlyRate *float64 `json:"hourly_rate,omitempty"`
	// Method used for billing this project
	BillingMethod *BillingMethod `json:"billing_method,omitempty"`
	// Indicates if the project is billable to the customer
	IsBillable *bool `default:"true" json:"is_billable"`
	// Current phase of the project lifecycle
	Phase   *ProjectPhase       `json:"phase,omitempty"`
	TaxRate *LinkedTaxRateInput `json:"tax_rate,omitempty"`
	// A list of linked tracking categories.
	TrackingCategories []*LinkedTrackingCategory `json:"tracking_categories,omitempty"`
	// Tags associated with the project
	Tags []string `json:"tags,omitempty"`
	// Additional notes about the project
	Notes *string `json:"notes,omitempty"`
	// Contract or agreement number associated with the project
	ContractNumber *string `json:"contract_number,omitempty"`
	// Expected profit margin percentage for the project
	ProfitMargin *float64 `json:"profit_margin,omitempty"`
	// Current status of project schedule compared to plan
	ScheduleStatus *ScheduleStatus `json:"schedule_status,omitempty"`
	// An array of addresses associated with the project (billing, job site, etc.)
	Addresses []Address `json:"addresses,omitempty"`
	// Number of team members assigned to the project
	TeamSize     *int64        `json:"team_size,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
	RowVersion *string `json:"row_version,omitempty"`
}

func (p ProjectInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProjectInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (o *ProjectInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectInput) GetDisplayID() *string {
	if o == nil {
		return nil
	}
	return o.DisplayID
}

func (o *ProjectInput) GetReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.ReferenceID
}

func (o *ProjectInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ProjectInput) GetStatus() *ProjectProjectStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ProjectInput) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *ProjectInput) GetProjectType() *ProjectType {
	if o == nil {
		return nil
	}
	return o.ProjectType
}

func (o *ProjectInput) GetPriority() *ProjectPriority {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ProjectInput) GetCompletionPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletionPercentage
}

func (o *ProjectInput) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ProjectInput) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ProjectInput) GetCustomer() *LinkedCustomerInput {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *ProjectInput) GetDepartment() *ProjectDepartment {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *ProjectInput) GetCompanyID() *string {
	if o == nil {
		return nil
	}
	return o.CompanyID
}

func (o *ProjectInput) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *ProjectInput) GetParentProject() *ParentProject {
	if o == nil {
		return nil
	}
	return o.ParentProject
}

func (o *ProjectInput) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *ProjectInput) GetBudgetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.BudgetAmount
}

func (o *ProjectInput) GetApprovedAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.ApprovedAmount
}

func (o *ProjectInput) GetBudgetHours() *float64 {
	if o == nil {
		return nil
	}
	return o.BudgetHours
}

func (o *ProjectInput) GetHourlyRate() *float64 {
	if o == nil {
		return nil
	}
	return o.HourlyRate
}

func (o *ProjectInput) GetBillingMethod() *BillingMethod {
	if o == nil {
		return nil
	}
	return o.BillingMethod
}

func (o *ProjectInput) GetIsBillable() *bool {
	if o == nil {
		return nil
	}
	return o.IsBillable
}

func (o *ProjectInput) GetPhase() *ProjectPhase {
	if o == nil {
		return nil
	}
	return o.Phase
}

func (o *ProjectInput) GetTaxRate() *LinkedTaxRateInput {
	if o == nil {
		return nil
	}
	return o.TaxRate
}

func (o *ProjectInput) GetTrackingCategories() []*LinkedTrackingCategory {
	if o == nil {
		return nil
	}
	return o.TrackingCategories
}

func (o *ProjectInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ProjectInput) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *ProjectInput) GetContractNumber() *string {
	if o == nil {
		return nil
	}
	return o.ContractNumber
}

func (o *ProjectInput) GetProfitMargin() *float64 {
	if o == nil {
		return nil
	}
	return o.ProfitMargin
}

func (o *ProjectInput) GetScheduleStatus() *ScheduleStatus {
	if o == nil {
		return nil
	}
	return o.ScheduleStatus
}

func (o *ProjectInput) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *ProjectInput) GetTeamSize() *int64 {
	if o == nil {
		return nil
	}
	return o.TeamSize
}

func (o *ProjectInput) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ProjectInput) GetRowVersion() *string {
	if o == nil {
		return nil
	}
	return o.RowVersion
}
