// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetEcommerceOrdersID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "ecommerce.ordersOne[0]":
			dir.HandlerFunc("ecommerce.ordersOne", testEcommerceOrdersOneEcommerceOrdersOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testEcommerceOrdersOneEcommerceOrdersOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetEcommerceOrderResponse = &components.GetEcommerceOrderResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "shopify",
		Resource:   "orders",
		Operation:  "one",
		Data: components.EcommerceOrder{
			ID:          "12345",
			OrderNumber: types.String("123456789"),
			Currency:    components.CurrencyUsd.ToPointer(),
			Discounts: []components.EcommerceDiscount{
				components.EcommerceDiscount{
					Code:       types.String("SUMMER20"),
					Amount:     types.String("5.99"),
					Percentage: types.String("0.1"),
				},
				components.EcommerceDiscount{
					Code:       types.String("SUMMER20"),
					Amount:     types.String("5.99"),
					Percentage: types.String("0.1"),
				},
				components.EcommerceDiscount{
					Code:       types.String("SUMMER20"),
					Amount:     types.String("5.99"),
					Percentage: types.String("0.1"),
				},
			},
			SubTotal:          types.String("45.17"),
			ShippingCost:      types.String("5.17"),
			CouponDiscount:    types.String("5.5"),
			TotalDiscount:     types.String("5.5"),
			TotalTax:          types.String("5.16"),
			TotalAmount:       types.String("50.17"),
			RefundedAmount:    types.String("5.5"),
			Status:            components.EcommerceOrderStatusActive.ToPointer(),
			PaymentStatus:     components.EcommerceOrderPaymentStatusPaid.ToPointer(),
			FulfillmentStatus: components.FulfillmentStatusShipped.ToPointer(),
			PaymentMethod:     types.String("credit_card"),
			Customer: &components.LinkedEcommerceCustomer{
				ID:          types.String("12345"),
				Name:        types.String("John Doe"),
				FirstName:   types.String("John"),
				LastName:    types.String("Doe"),
				CompanyName: types.String("Acme Inc."),
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
			},
			BillingAddress: &components.EcommerceAddress{
				Line1:       types.String("123 Main Street"),
				Line2:       types.String("Apt 1"),
				CompanyName: types.String("Acme Inc."),
				City:        types.String("New York"),
				State:       types.String("NY"),
				PostalCode:  types.String("10001"),
				Country:     types.String("US"),
			},
			ShippingAddress: &components.EcommerceAddress{
				Line1:       types.String("123 Main Street"),
				Line2:       types.String("Apt 1"),
				CompanyName: types.String("Acme Inc."),
				City:        types.String("New York"),
				State:       types.String("NY"),
				PostalCode:  types.String("10001"),
				Country:     types.String("US"),
			},
			Tracking: []components.TrackingItem{
				components.TrackingItem{
					Provider:  types.String("UPS"),
					Number:    types.String("1Z9999999999999999"),
					URL:       types.String("https://www.ups.com/track?tracknum=1Z9999999999999999"),
					UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				},
				components.TrackingItem{
					Provider:  types.String("UPS"),
					Number:    types.String("1Z9999999999999999"),
					URL:       types.String("https://www.ups.com/track?tracknum=1Z9999999999999999"),
					UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				},
			},
			LineItems: []components.EcommerceOrderLineItem{
				components.EcommerceOrderLineItem{
					ID:          types.String("12345"),
					ProductID:   types.String("def456"),
					VariantID:   types.String("ghi789"),
					Sku:         types.String("MBP123-16GB-SILVER-13"),
					Name:        types.String("Midnight 16inch MacBook Pro"),
					Description: types.String("Powerful and portable, the MacBook Pro is perfect for professionals and creatives."),
					Options: []components.EcommerceOrderLineItemOption{
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
					},
					Quantity:         types.String("2"),
					UnitPrice:        types.String("19.99"),
					TaxRate:          types.String("0.08"),
					TaxAmount:        types.String("1.6"),
					IsRefunded:       types.Bool(false),
					RefundedAmount:   types.String("0"),
					RefundedQuantity: types.String("0"),
					SubTotal:         types.String("43.18"),
					TotalAmount:      types.String("43.18"),
					Discounts: []components.EcommerceDiscount{
						components.EcommerceDiscount{
							Code:       types.String("SUMMER20"),
							Amount:     types.String("5.99"),
							Percentage: types.String("0.1"),
						},
						components.EcommerceDiscount{
							Code:       types.String("SUMMER20"),
							Amount:     types.String("5.99"),
							Percentage: types.String("0.1"),
						},
					},
				},
				components.EcommerceOrderLineItem{
					ID:          types.String("12345"),
					ProductID:   types.String("def456"),
					VariantID:   types.String("ghi789"),
					Sku:         types.String("MBP123-16GB-SILVER-13"),
					Name:        types.String("Midnight 16inch MacBook Pro"),
					Description: types.String("Powerful and portable, the MacBook Pro is perfect for professionals and creatives."),
					Options: []components.EcommerceOrderLineItemOption{
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
					},
					Quantity:         types.String("2"),
					UnitPrice:        types.String("19.99"),
					TaxRate:          types.String("0.08"),
					TaxAmount:        types.String("1.6"),
					IsRefunded:       types.Bool(false),
					RefundedAmount:   types.String("0"),
					RefundedQuantity: types.String("0"),
					SubTotal:         types.String("43.18"),
					TotalAmount:      types.String("43.18"),
					Discounts: []components.EcommerceDiscount{
						components.EcommerceDiscount{
							Code:       types.String("SUMMER20"),
							Amount:     types.String("5.99"),
							Percentage: types.String("0.1"),
						},
					},
				},
				components.EcommerceOrderLineItem{
					ID:          types.String("12345"),
					ProductID:   types.String("def456"),
					VariantID:   types.String("ghi789"),
					Sku:         types.String("MBP123-16GB-SILVER-13"),
					Name:        types.String("Midnight 16inch MacBook Pro"),
					Description: types.String("Powerful and portable, the MacBook Pro is perfect for professionals and creatives."),
					Options: []components.EcommerceOrderLineItemOption{
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
						components.EcommerceOrderLineItemOption{
							ID:    types.String("jkl012"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
					},
					Quantity:         types.String("2"),
					UnitPrice:        types.String("19.99"),
					TaxRate:          types.String("0.08"),
					TaxAmount:        types.String("1.6"),
					IsRefunded:       types.Bool(false),
					RefundedAmount:   types.String("0"),
					RefundedQuantity: types.String("0"),
					SubTotal:         types.String("43.18"),
					TotalAmount:      types.String("43.18"),
					Discounts: []components.EcommerceDiscount{
						components.EcommerceDiscount{
							Code:       types.String("SUMMER20"),
							Amount:     types.String("5.99"),
							Percentage: types.String("0.1"),
						},
						components.EcommerceDiscount{
							Code:       types.String("SUMMER20"),
							Amount:     types.String("5.99"),
							Percentage: types.String("0.1"),
						},
					},
				},
			},
			Note:      types.String("Special instructions for delivery"),
			CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
