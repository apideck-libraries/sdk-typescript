// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetHrisEmployeesID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "hris.employeesOne[0]":
			dir.HandlerFunc("hris.employeesOne", testHrisEmployeesOneHrisEmployeesOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testHrisEmployeesOneHrisEmployeesOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetEmployeeResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "sage-hr",
		Resource:   "Employees",
		Operation:  "one",
		Data: components.Employee{
			ID:            types.String("12345"),
			DownstreamID:  types.String("12345"),
			FirstName:     types.String("Elon"),
			LastName:      types.String("Musk"),
			MiddleName:    types.String("D."),
			DisplayName:   types.String("Technoking"),
			PreferredName: types.String("Elon Musk"),
			Initials:      types.String("EM"),
			Salutation:    types.String("Mr"),
			Title:         types.String("CEO"),
			MaritalStatus: types.String("married"),
			Partner: &components.Person{
				ID:         types.String("12345"),
				FirstName:  types.String("Elon"),
				LastName:   types.String("Musk"),
				MiddleName: types.String("D."),
				Gender:     components.GenderMale.ToPointer(),
				Initials:   types.String("EM"),
				Birthday:   types.MustNewDateFromString("2000-08-12"),
				DeceasedOn: types.MustNewDateFromString("2000-08-12"),
			},
			Division:       types.String("Europe"),
			DivisionID:     types.String("12345"),
			DepartmentID:   types.String("12345"),
			DepartmentName: types.String("12345"),
			Team: &components.Team{
				ID:   types.String("1234"),
				Name: types.String("Full Stack Engineers"),
			},
			CompanyID:           types.String("23456"),
			CompanyName:         types.String("SpaceX"),
			EmploymentStartDate: types.String("2021-10-26"),
			EmploymentEndDate:   types.String("2028-10-26"),
			LeavingReason:       components.LeavingReasonResigned.ToPointer(),
			EmployeeNumber:      types.String("123456-AB"),
			EmploymentStatus:    components.EmploymentStatusActive.ToPointer(),
			Ethnicity:           types.String("African American"),
			Manager: &components.Manager{
				ID:               types.String("12345"),
				Name:             types.String("Elon Musk"),
				FirstName:        types.String("Elon"),
				LastName:         types.String("Musk"),
				Email:            types.String("elon@musk.com"),
				EmploymentStatus: components.EmploymentStatusActive.ToPointer(),
			},
			DirectReports: []string{
				"a0d636c6-43b3-4bde-8c70-85b707d992f4",
				"a98lfd96-43b3-4bde-8c70-85b707d992e6",
			},
			SocialSecurityNumber: types.String("123456789"),
			Birthday:             types.MustNewDateFromString("2000-08-12"),
			DeceasedOn:           types.MustNewDateFromString("2000-08-12"),
			CountryOfBirth:       types.String("US"),
			Description:          types.String("A description"),
			Gender:               components.GenderMale.ToPointer(),
			Pronouns:             types.String("she,her"),
			PreferredLanguage:    types.String("EN"),
			Languages: []*string{
				types.String("EN"),
			},
			Nationalities: []*string{
				types.String("US"),
			},
			PhotoURL:  types.String("https://unavatar.io/elon-musk"),
			Timezone:  types.String("Europe/London"),
			Source:    types.String("lever"),
			SourceID:  types.String("12345"),
			RecordURL: types.String("https://app.intercom.io/contacts/12345"),
			Jobs: []components.EmployeeJob{
				components.EmployeeJob{
					ID:               types.String("12345"),
					EmployeeID:       types.String("12345"),
					Title:            types.String("CEO"),
					Role:             types.String("Sales"),
					StartDate:        types.MustNewDateFromString("2020-08-12"),
					EndDate:          types.MustNewDateFromString("2020-08-12"),
					CompensationRate: types.Float64(72000),
					Currency:         components.CurrencyUsd.ToPointer(),
					PaymentUnit:      components.PaymentUnitYear.ToPointer(),
					HiredAt:          types.MustNewDateFromString("2020-08-12"),
					IsPrimary:        types.Bool(true),
					IsManager:        types.Bool(true),
					Status:           components.EmployeeJobStatusActive.ToPointer(),
					Location: &components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				components.EmployeeJob{
					ID:               types.String("12345"),
					EmployeeID:       types.String("12345"),
					Title:            types.String("CEO"),
					Role:             types.String("Sales"),
					StartDate:        types.MustNewDateFromString("2020-08-12"),
					EndDate:          types.MustNewDateFromString("2020-08-12"),
					CompensationRate: types.Float64(72000),
					Currency:         components.CurrencyUsd.ToPointer(),
					PaymentUnit:      components.PaymentUnitYear.ToPointer(),
					HiredAt:          types.MustNewDateFromString("2020-08-12"),
					IsPrimary:        types.Bool(true),
					IsManager:        types.Bool(true),
					Status:           components.EmployeeJobStatusActive.ToPointer(),
					Location: &components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				components.EmployeeJob{
					ID:               types.String("12345"),
					EmployeeID:       types.String("12345"),
					Title:            types.String("CEO"),
					Role:             types.String("Sales"),
					StartDate:        types.MustNewDateFromString("2020-08-12"),
					EndDate:          types.MustNewDateFromString("2020-08-12"),
					CompensationRate: types.Float64(72000),
					Currency:         components.CurrencyUsd.ToPointer(),
					PaymentUnit:      components.PaymentUnitYear.ToPointer(),
					HiredAt:          types.MustNewDateFromString("2020-08-12"),
					IsPrimary:        types.Bool(true),
					IsManager:        types.Bool(true),
					Status:           components.EmployeeJobStatusActive.ToPointer(),
					Location: &components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
			},
			Compensations: []components.EmployeeCompensation{
				components.EmployeeCompensation{
					ID:            types.String("3404301363494309004"),
					JobID:         types.String("3490439050957906679"),
					Rate:          types.Float64(50),
					PaymentUnit:   components.PaymentUnitHour.ToPointer(),
					FlsaStatus:    components.FlsaStatusNonexempt.ToPointer(),
					EffectiveDate: types.String("2021-06-11"),
				},
			},
			WorksRemote: types.Bool(true),
			Addresses: []components.Address{
				components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
				components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
			},
			PhoneNumbers: []components.PhoneNumber{
				components.PhoneNumber{
					ID:          types.String("12345"),
					CountryCode: types.String("1"),
					AreaCode:    types.String("323"),
					Number:      "111-111-1111",
					Extension:   types.String("105"),
					Type:        components.PhoneNumberTypePrimary.ToPointer(),
				},
				components.PhoneNumber{
					ID:          types.String("12345"),
					CountryCode: types.String("1"),
					AreaCode:    types.String("323"),
					Number:      "111-111-1111",
					Extension:   types.String("105"),
					Type:        components.PhoneNumberTypePrimary.ToPointer(),
				},
			},
			Emails: []components.Email{
				components.Email{
					ID:    types.String("123"),
					Email: types.String("elon@musk.com"),
					Type:  components.EmailTypePrimary.ToPointer(),
				},
				components.Email{
					ID:    types.String("123"),
					Email: types.String("elon@musk.com"),
					Type:  components.EmailTypePrimary.ToPointer(),
				},
			},
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValueUnionBoolean(
						true,
					)),
				},
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValueUnionBoolean(
						true,
					)),
				},
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
						10,
					)),
				},
			},
			SocialLinks: []components.SocialLink{
				components.SocialLink{
					ID:   types.String("12345"),
					URL:  "https://www.twitter.com/apideck",
					Type: types.String("twitter"),
				},
			},
			BankAccounts: []components.BankAccount{
				components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
				components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
				components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
			},
			TaxCode:           types.String("1111"),
			TaxID:             types.String("234-32-0000"),
			DietaryPreference: types.String("Veggie"),
			FoodAllergies: []string{
				"No allergies",
			},
			ProbationPeriod: &components.ProbationPeriod{
				StartDate: types.MustNewDateFromString("2021-10-01"),
				EndDate:   types.MustNewDateFromString("2021-11-28"),
			},
			Tags: []string{
				"New",
			},
			RowVersion: types.String("1-12345"),
			Deleted:    types.Bool(true),
			UpdatedBy:  types.String("12345"),
			CreatedBy:  types.String("12345"),
			UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			PassThrough: []components.PassThroughBody{
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
