// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingBalanceSheet(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.balanceSheetOne[0]":
			dir.HandlerFunc("accounting.balanceSheetOne", testAccountingBalanceSheetOneAccountingBalanceSheetOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingBalanceSheetOneAccountingBalanceSheetOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetBalanceSheetResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "BalanceSheets",
		Operation:  "one",
		Data: components.BalanceSheet{
			Reports: []components.Report{
				components.Report{
					ID:         types.String("12345"),
					ReportName: types.String("BalanceSheet"),
					StartDate:  types.String("2017-01-01"),
					EndDate:    "2017-01-31",
					Currency:   components.CurrencyUsd.ToPointer(),
					Assets: components.BalanceSheetAssetsAccount{
						AccountID: types.String("1"),
						Code:      types.String("1000"),
						Name:      types.String("Assets"),
						Value:     types.Float64(50000),
						Items: []any{
							map[string]any{
								"account_id": "101",
								"code":       "1100",
								"name":       "Current Assets",
								"value":      20000,
								"items": []any{
									map[string]any{
										"account_id": "1011",
										"code":       "1101",
										"name":       "Cash and Cash Equivalents",
										"value":      10000,
									},
									map[string]any{
										"account_id": "1012",
										"code":       "1102",
										"name":       "Accounts Receivable",
										"value":      5000,
									},
									map[string]any{
										"account_id": "1013",
										"code":       "1103",
										"name":       "Inventory",
										"value":      3000,
									},
									map[string]any{
										"account_id": "1014",
										"code":       "1104",
										"name":       "Prepaid Expenses",
										"value":      2000,
									},
								},
							},
							map[string]any{
								"account_id": "102",
								"code":       "1200",
								"name":       "Non-Current Assets",
								"value":      30000,
								"items": []any{
									map[string]any{
										"account_id": "1021",
										"code":       "1201",
										"name":       "Property, Plant, and Equipment (PPE)",
										"value":      25000,
									},
									map[string]any{
										"account_id": "1022",
										"code":       "1202",
										"name":       "Intangible Assets",
										"value":      5000,
										"items": []any{
											map[string]any{
												"account_id": "10221",
												"code":       "1203",
												"name":       "Goodwill",
												"value":      3000,
											},
											map[string]any{
												"account_id": "10222",
												"code":       "1204",
												"name":       "Patents",
												"value":      2000,
											},
										},
									},
								},
							},
						},
					},
					Liabilities: components.BalanceSheetLiabilitiesAccount{
						AccountID: types.String("2"),
						Code:      types.String("2000"),
						Name:      types.String("Liabilities"),
						Value:     types.Float64(30000),
						Items: []any{
							map[string]any{
								"account_id": "201",
								"code":       "2100",
								"name":       "Current Liabilities",
								"value":      10000,
								"items": []any{
									map[string]any{
										"account_id": "2011",
										"code":       "2101",
										"name":       "Accounts Payable",
										"value":      4000,
									},
									map[string]any{
										"account_id": "2012",
										"code":       "2102",
										"name":       "Short-Term Debt",
										"value":      2000,
									},
									map[string]any{
										"account_id": "2013",
										"code":       "2103",
										"name":       "Accrued Expenses",
										"value":      1000,
									},
									map[string]any{
										"account_id": "2014",
										"code":       "2104",
										"name":       "Current Portion of Long-Term Debt",
										"value":      3000,
									},
								},
							},
							map[string]any{
								"account_id": "202",
								"code":       "2200",
								"name":       "Non-Current Liabilities",
								"value":      20000,
								"items": []any{
									map[string]any{
										"account_id": "2021",
										"code":       "2201",
										"name":       "Long-Term Debt",
										"value":      15000,
									},
									map[string]any{
										"account_id": "2022",
										"code":       "2202",
										"name":       "Deferred Tax Liabilities",
										"value":      3000,
									},
									map[string]any{
										"account_id": "2023",
										"code":       "2203",
										"name":       "Pension Liabilities",
										"value":      2000,
									},
								},
							},
						},
					},
					Equity: components.BalanceSheetEquityAccount{
						AccountID: types.String("3"),
						Code:      types.String("3000"),
						Name:      types.String("Equity"),
						Value:     types.Float64(20000),
						Items: []any{
							map[string]any{
								"account_id": "301",
								"code":       "3100",
								"name":       "Common Stock",
								"value":      5000,
							},
							map[string]any{
								"account_id": "302",
								"code":       "3200",
								"name":       "Retained Earnings",
								"value":      10000,
							},
							map[string]any{
								"account_id": "303",
								"code":       "3300",
								"name":       "Additional Paid-In Capital",
								"value":      3000,
							},
							map[string]any{
								"account_id": "304",
								"code":       "3400",
								"name":       "Treasury Stock",
								"value":      -1000,
							},
							map[string]any{
								"account_id": "305",
								"code":       "3500",
								"name":       "Other Comprehensive Income",
								"value":      3000,
							},
						},
					},
					NetAssets: types.Float64(1000),
					UpdatedBy: types.String("12345"),
					CreatedBy: types.String("12345"),
					UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					UncategorizedItems: &components.BalanceSheetUncategorizedItemsAccount{
						AccountID: types.String("3"),
						Code:      types.String("3000"),
						Name:      types.String("Uncategorized Items"),
						Value:     types.Float64(1000),
						Items: []any{
							map[string]any{
								"account_id": "301",
								"code":       "3100",
								"name":       "not linked account",
								"value":      1000,
							},
						},
					},
				},
				components.Report{
					ID:         types.String("12345"),
					ReportName: types.String("BalanceSheet"),
					StartDate:  types.String("2017-01-01"),
					EndDate:    "2017-01-31",
					Currency:   components.CurrencyUsd.ToPointer(),
					Assets: components.BalanceSheetAssetsAccount{
						AccountID: types.String("1"),
						Code:      types.String("1000"),
						Name:      types.String("Assets"),
						Value:     types.Float64(50000),
						Items: []any{
							map[string]any{
								"account_id": "101",
								"code":       "1100",
								"name":       "Current Assets",
								"value":      20000,
								"items": []any{
									map[string]any{
										"account_id": "1011",
										"code":       "1101",
										"name":       "Cash and Cash Equivalents",
										"value":      10000,
									},
									map[string]any{
										"account_id": "1012",
										"code":       "1102",
										"name":       "Accounts Receivable",
										"value":      5000,
									},
									map[string]any{
										"account_id": "1013",
										"code":       "1103",
										"name":       "Inventory",
										"value":      3000,
									},
									map[string]any{
										"account_id": "1014",
										"code":       "1104",
										"name":       "Prepaid Expenses",
										"value":      2000,
									},
								},
							},
							map[string]any{
								"account_id": "102",
								"code":       "1200",
								"name":       "Non-Current Assets",
								"value":      30000,
								"items": []any{
									map[string]any{
										"account_id": "1021",
										"code":       "1201",
										"name":       "Property, Plant, and Equipment (PPE)",
										"value":      25000,
									},
									map[string]any{
										"account_id": "1022",
										"code":       "1202",
										"name":       "Intangible Assets",
										"value":      5000,
										"items": []any{
											map[string]any{
												"account_id": "10221",
												"code":       "1203",
												"name":       "Goodwill",
												"value":      3000,
											},
											map[string]any{
												"account_id": "10222",
												"code":       "1204",
												"name":       "Patents",
												"value":      2000,
											},
										},
									},
								},
							},
						},
					},
					Liabilities: components.BalanceSheetLiabilitiesAccount{
						AccountID: types.String("2"),
						Code:      types.String("2000"),
						Name:      types.String("Liabilities"),
						Value:     types.Float64(30000),
						Items: []any{
							map[string]any{
								"account_id": "201",
								"code":       "2100",
								"name":       "Current Liabilities",
								"value":      10000,
								"items": []any{
									map[string]any{
										"account_id": "2011",
										"code":       "2101",
										"name":       "Accounts Payable",
										"value":      4000,
									},
									map[string]any{
										"account_id": "2012",
										"code":       "2102",
										"name":       "Short-Term Debt",
										"value":      2000,
									},
									map[string]any{
										"account_id": "2013",
										"code":       "2103",
										"name":       "Accrued Expenses",
										"value":      1000,
									},
									map[string]any{
										"account_id": "2014",
										"code":       "2104",
										"name":       "Current Portion of Long-Term Debt",
										"value":      3000,
									},
								},
							},
							map[string]any{
								"account_id": "202",
								"code":       "2200",
								"name":       "Non-Current Liabilities",
								"value":      20000,
								"items": []any{
									map[string]any{
										"account_id": "2021",
										"code":       "2201",
										"name":       "Long-Term Debt",
										"value":      15000,
									},
									map[string]any{
										"account_id": "2022",
										"code":       "2202",
										"name":       "Deferred Tax Liabilities",
										"value":      3000,
									},
									map[string]any{
										"account_id": "2023",
										"code":       "2203",
										"name":       "Pension Liabilities",
										"value":      2000,
									},
								},
							},
						},
					},
					Equity: components.BalanceSheetEquityAccount{
						AccountID: types.String("3"),
						Code:      types.String("3000"),
						Name:      types.String("Equity"),
						Value:     types.Float64(20000),
						Items: []any{
							map[string]any{
								"account_id": "301",
								"code":       "3100",
								"name":       "Common Stock",
								"value":      5000,
							},
							map[string]any{
								"account_id": "302",
								"code":       "3200",
								"name":       "Retained Earnings",
								"value":      10000,
							},
							map[string]any{
								"account_id": "303",
								"code":       "3300",
								"name":       "Additional Paid-In Capital",
								"value":      3000,
							},
							map[string]any{
								"account_id": "304",
								"code":       "3400",
								"name":       "Treasury Stock",
								"value":      -1000,
							},
							map[string]any{
								"account_id": "305",
								"code":       "3500",
								"name":       "Other Comprehensive Income",
								"value":      3000,
							},
						},
					},
					NetAssets: types.Float64(1000),
					UpdatedBy: types.String("12345"),
					CreatedBy: types.String("12345"),
					UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					UncategorizedItems: &components.BalanceSheetUncategorizedItemsAccount{
						AccountID: types.String("3"),
						Code:      types.String("3000"),
						Name:      types.String("Uncategorized Items"),
						Value:     types.Float64(1000),
						Items: []any{
							map[string]any{
								"account_id": "301",
								"code":       "3100",
								"name":       "not linked account",
								"value":      1000,
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
