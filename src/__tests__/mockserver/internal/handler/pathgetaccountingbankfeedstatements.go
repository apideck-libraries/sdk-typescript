// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingBankFeedStatements(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.bankFeedStatementsAll[0]":
			dir.HandlerFunc("accounting.bankFeedStatementsAll", testAccountingBankFeedStatementsAllAccountingBankFeedStatementsAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingBankFeedStatementsAllAccountingBankFeedStatementsAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetBankFeedStatementsResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "bank-feed-statements",
		Operation:  "all",
		Data: []components.BankFeedStatement{
			components.BankFeedStatement{
				ID:                        "12345",
				BankFeedAccountID:         types.String("acc_456"),
				Status:                    components.StatementStatusPending.ToPointer(),
				StartDate:                 types.MustNewTimeFromString("2021-05-01T12:00:00.000Z"),
				EndDate:                   types.MustNewTimeFromString("2025-01-31T12:00:00.000Z"),
				StartBalance:              types.Float64(10500.25),
				StartBalanceCreditOrDebit: components.CreditOrDebitDebit.ToPointer(),
				EndBalance:                types.Float64(9800.5),
				EndBalanceCreditOrDebit:   components.CreditOrDebitDebit.ToPointer(),
				Transactions: []components.Transactions{
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
				},
				CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy: types.String("12345"),
			},
			components.BankFeedStatement{
				ID:                        "12345",
				BankFeedAccountID:         types.String("acc_456"),
				Status:                    components.StatementStatusPending.ToPointer(),
				StartDate:                 types.MustNewTimeFromString("2021-05-01T12:00:00.000Z"),
				EndDate:                   types.MustNewTimeFromString("2025-01-31T12:00:00.000Z"),
				StartBalance:              types.Float64(10500.25),
				StartBalanceCreditOrDebit: components.CreditOrDebitDebit.ToPointer(),
				EndBalance:                types.Float64(9800.5),
				EndBalanceCreditOrDebit:   components.CreditOrDebitDebit.ToPointer(),
				Transactions: []components.Transactions{
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
				},
				CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy: types.String("12345"),
			},
			components.BankFeedStatement{
				ID:                        "12345",
				BankFeedAccountID:         types.String("acc_456"),
				Status:                    components.StatementStatusPending.ToPointer(),
				StartDate:                 types.MustNewTimeFromString("2021-05-01T12:00:00.000Z"),
				EndDate:                   types.MustNewTimeFromString("2025-01-31T12:00:00.000Z"),
				StartBalance:              types.Float64(10500.25),
				StartBalanceCreditOrDebit: components.CreditOrDebitDebit.ToPointer(),
				EndBalance:                types.Float64(9800.5),
				EndBalanceCreditOrDebit:   components.CreditOrDebitDebit.ToPointer(),
				Transactions: []components.Transactions{
					components.Transactions{
						PostedDate:          types.MustTimeFromString("2025-01-15T12:00:00.000Z"),
						Description:         types.String("Payment received from ACME Corp"),
						Amount:              250,
						CreditOrDebit:       components.CreditOrDebitDebit,
						SourceTransactionID: "txn_987",
						Counterparty:        types.String("ACME Corp"),
						Reference:           types.String("INV-2025-01"),
						TransactionType:     components.BankFeedStatementTransactionTypePayment.ToPointer(),
					},
				},
				CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy: types.String("12345"),
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
