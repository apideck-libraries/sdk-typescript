// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetVaultConsumers(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "vault.consumersAll[0]":
			dir.HandlerFunc("vault.consumersAll", testVaultConsumersAllVaultConsumersAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testVaultConsumersAllVaultConsumersAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetConsumersResponse = &components.GetConsumersResponse{
		StatusCode: 200,
		Status:     "OK",
		Data: []components.GetConsumersResponseData{
			components.GetConsumersResponseData{
				ConsumerID:    types.String("test_consumer_id"),
				ApplicationID: types.String("1111"),
				Metadata: &components.ConsumerMetadata{
					AccountName: types.String("SpaceX"),
					UserName:    types.String("Elon Musk"),
					Email:       types.String("elon@musk.com"),
					Image:       types.String("https://www.spacex.com/static/images/share.jpg"),
				},
				AggregatedRequestCount: types.Float64(101),
				RequestCounts: &components.RequestCountAllocation{
					Unify: types.Float64(100),
					Proxy: types.Float64(10),
					Vault: types.Float64(21),
				},
				Created:             types.String("2021-05-07T12:55:42.242Z"),
				Modified:            types.String("2021-05-07T12:55:42.242Z"),
				RequestCountUpdated: types.String("2021-05-07T12:55:42.242Z"),
				Services: []string{
					"salesforce",
					"stripe",
				},
			},
			components.GetConsumersResponseData{
				ConsumerID:    types.String("test_consumer_id"),
				ApplicationID: types.String("1111"),
				Metadata: &components.ConsumerMetadata{
					AccountName: types.String("SpaceX"),
					UserName:    types.String("Elon Musk"),
					Email:       types.String("elon@musk.com"),
					Image:       types.String("https://www.spacex.com/static/images/share.jpg"),
				},
				AggregatedRequestCount: types.Float64(101),
				RequestCounts: &components.RequestCountAllocation{
					Unify: types.Float64(100),
					Proxy: types.Float64(10),
					Vault: types.Float64(21),
				},
				Created:             types.String("2021-05-07T12:55:42.242Z"),
				Modified:            types.String("2021-05-07T12:55:42.242Z"),
				RequestCountUpdated: types.String("2021-05-07T12:55:42.242Z"),
				Services: []string{
					"salesforce",
					"stripe",
				},
			},
			components.GetConsumersResponseData{
				ConsumerID:    types.String("test_consumer_id"),
				ApplicationID: types.String("1111"),
				Metadata: &components.ConsumerMetadata{
					AccountName: types.String("SpaceX"),
					UserName:    types.String("Elon Musk"),
					Email:       types.String("elon@musk.com"),
					Image:       types.String("https://www.spacex.com/static/images/share.jpg"),
				},
				AggregatedRequestCount: types.Float64(101),
				RequestCounts: &components.RequestCountAllocation{
					Unify: types.Float64(100),
					Proxy: types.Float64(10),
					Vault: types.Float64(21),
				},
				Created:             types.String("2021-05-07T12:55:42.242Z"),
				Modified:            types.String("2021-05-07T12:55:42.242Z"),
				RequestCountUpdated: types.String("2021-05-07T12:55:42.242Z"),
				Services: []string{
					"salesforce",
					"stripe",
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
