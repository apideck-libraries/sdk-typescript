// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingAgedCreditors(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.agedCreditorsOne[0]":
			dir.HandlerFunc("accounting.agedCreditorsOne", testAccountingAgedCreditorsOneAccountingAgedCreditorsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingAgedCreditorsOneAccountingAgedCreditorsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetAgedCreditorsResponse = &components.GetAgedCreditorsResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "AgedCreditors",
		Operation:  "one",
		Data: components.AgedCreditors{
			ReportGeneratedAt: types.MustNewTimeFromString("2024-11-14T12:00:00.000Z"),
			ReportAsOfDate:    types.MustNewDateFromString("2024-11-13"),
			PeriodCount:       types.Int64(4),
			PeriodLength:      types.Int64(30),
			OutstandingBalances: []components.OutstandingBalanceBySupplier{
				components.OutstandingBalanceBySupplier{
					SupplierID:   types.String("123"),
					SupplierName: types.String("Super Store"),
					OutstandingBalancesByCurrency: []components.OutstandingBalanceByCurrency{
						components.OutstandingBalanceByCurrency{
							Currency: components.CurrencyUsd.ToPointer(),
							BalancesByPeriod: []components.BalanceByPeriod{
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
							},
						},
						components.OutstandingBalanceByCurrency{
							Currency: components.CurrencyUsd.ToPointer(),
							BalancesByPeriod: []components.BalanceByPeriod{
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
							},
						},
					},
				},
				components.OutstandingBalanceBySupplier{
					SupplierID:   types.String("123"),
					SupplierName: types.String("Super Store"),
					OutstandingBalancesByCurrency: []components.OutstandingBalanceByCurrency{
						components.OutstandingBalanceByCurrency{
							Currency: components.CurrencyUsd.ToPointer(),
							BalancesByPeriod: []components.BalanceByPeriod{
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
							},
						},
					},
				},
				components.OutstandingBalanceBySupplier{
					SupplierID:   types.String("123"),
					SupplierName: types.String("Super Store"),
					OutstandingBalancesByCurrency: []components.OutstandingBalanceByCurrency{
						components.OutstandingBalanceByCurrency{
							Currency: components.CurrencyUsd.ToPointer(),
							BalancesByPeriod: []components.BalanceByPeriod{
								components.BalanceByPeriod{
									StartDate:   types.MustNewDateFromString("2024-01-01"),
									EndDate:     types.MustNewDateFromString("2024-01-30"),
									TotalAmount: types.Float64(1500),
									BalancesByTransaction: []components.BalanceByTransaction{
										components.BalanceByTransaction{
											TransactionID:      types.String("INV-1001"),
											TransactionDate:    types.MustNewDateFromString("2024-01-15"),
											TransactionType:    components.BalanceByTransactionTransactionTypeInvoice.ToPointer(),
											DueDate:            types.MustNewDateFromString("2024-02-15"),
											OriginalAmount:     types.Float64(1000),
											OutstandingBalance: types.Float64(800),
											TransactionNumber:  types.String("INV-1001"),
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
