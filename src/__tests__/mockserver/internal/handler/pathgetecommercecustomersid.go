// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetEcommerceCustomersID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "ecommerce.customersOne[0]":
			dir.HandlerFunc("ecommerce.customersOne", testEcommerceCustomersOneEcommerceCustomersOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testEcommerceCustomersOneEcommerceCustomersOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetEcommerceCustomerResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "shopify",
		Resource:   "customers",
		Operation:  "one",
		Data: components.EcommerceCustomer{
			ID:          "12345",
			Name:        types.String("John Doe"),
			FirstName:   types.String("John"),
			LastName:    types.String("Doe"),
			CompanyName: types.String("Acme Inc."),
			Status:      components.CustomerStatusActive.ToPointer(),
			Currency:    components.CurrencyUsd.ToPointer(),
			Emails: []components.Email{
				components.Email{
					ID:    types.String("123"),
					Email: types.String("elon@musk.com"),
					Type:  components.EmailTypePrimary.ToPointer(),
				},
				components.Email{
					ID:    types.String("123"),
					Email: types.String("elon@musk.com"),
					Type:  components.EmailTypePrimary.ToPointer(),
				},
				components.Email{
					ID:    types.String("123"),
					Email: types.String("elon@musk.com"),
					Type:  components.EmailTypePrimary.ToPointer(),
				},
			},
			PhoneNumbers: []components.PhoneNumber{
				components.PhoneNumber{
					ID:          types.String("12345"),
					CountryCode: types.String("1"),
					AreaCode:    types.String("323"),
					Number:      "111-111-1111",
					Extension:   types.String("105"),
					Type:        components.PhoneNumberTypePrimary.ToPointer(),
				},
				components.PhoneNumber{
					ID:          types.String("12345"),
					CountryCode: types.String("1"),
					AreaCode:    types.String("323"),
					Number:      "111-111-1111",
					Extension:   types.String("105"),
					Type:        components.PhoneNumberTypePrimary.ToPointer(),
				},
			},
			Addresses: []components.Addresses{
				components.Addresses{
					Type:       components.EcommerceCustomerTypeBilling.ToPointer(),
					ID:         types.String("12345"),
					Line1:      types.String("Main street"),
					Line2:      types.String("apt #"),
					City:       types.String("Anytown"),
					State:      types.String("Ohio"),
					PostalCode: types.String("12345"),
					Country:    types.String("US"),
				},
				components.Addresses{
					Type:       components.EcommerceCustomerTypeBilling.ToPointer(),
					ID:         types.String("12345"),
					Line1:      types.String("Main street"),
					Line2:      types.String("apt #"),
					City:       types.String("Anytown"),
					State:      types.String("Ohio"),
					PostalCode: types.String("12345"),
					Country:    types.String("US"),
				},
			},
			Orders: []components.LinkedEcommerceOrder{
				components.LinkedEcommerceOrder{
					ID:     types.String("12345"),
					Total:  types.String("199.99"),
					Status: components.EcommerceOrderStatusActive.ToPointer(),
				},
				components.LinkedEcommerceOrder{
					ID:     types.String("12345"),
					Total:  types.String("199.99"),
					Status: components.EcommerceOrderStatusActive.ToPointer(),
				},
			},
			CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
