// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetEcommerceProductsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "ecommerce.productsOne[0]":
			dir.HandlerFunc("ecommerce.productsOne", testEcommerceProductsOneEcommerceProductsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testEcommerceProductsOneEcommerceProductsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetProductResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "shopify",
		Resource:   "products",
		Operation:  "one",
		Data: components.EcommerceProduct{
			ID:                "12345",
			Name:              types.String("MacBook Pro"),
			Description:       types.String("Powerful and portable, the MacBook Pro is perfect for professionals and creatives."),
			Status:            components.ProductStatusActive.ToPointer(),
			Price:             types.String("1999.99"),
			Sku:               types.String("MBP123"),
			InventoryQuantity: types.String("10"),
			Images: []components.Images{
				components.Images{
					ID:  types.String("12345"),
					URL: types.String("https://example.com/macbook-pro.jpg"),
				},
				components.Images{
					ID:  types.String("12345"),
					URL: types.String("https://example.com/macbook-pro.jpg"),
				},
				components.Images{
					ID:  types.String("12345"),
					URL: types.String("https://example.com/macbook-pro.jpg"),
				},
			},
			Weight:     types.String("1.25"),
			WeightUnit: types.String("lb"),
			Options: []components.EcommerceProductOptions{
				components.EcommerceProductOptions{
					ID:   types.String("1"),
					Name: types.String("Color"),
					Values: []*string{
						types.String("Red"),
					},
				},
				components.EcommerceProductOptions{
					ID:   types.String("1"),
					Name: types.String("Color"),
					Values: []*string{
						types.String("Red"),
					},
				},
			},
			Variants: []components.Variants{
				components.Variants{
					ID:                types.String("1"),
					Name:              types.String("Midnight 16inch MacBook Pro"),
					Price:             types.String("1999.99"),
					Sku:               types.String("MBP123-16GB-SILVER-13"),
					InventoryQuantity: types.String("5"),
					Weight:            types.String("1.25"),
					WeightUnit:        types.String("lb"),
					Options: []components.EcommerceProductVariantsOptions{
						components.EcommerceProductVariantsOptions{
							ID:    types.String("1"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
						components.EcommerceProductVariantsOptions{
							ID:    types.String("1"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
					},
					Images: []components.EcommerceProductImages{
						components.EcommerceProductImages{
							ID:  types.String("12345"),
							URL: types.String("https://example.com/macbook-pro.jpg"),
						},
						components.EcommerceProductImages{
							ID:  types.String("12345"),
							URL: types.String("https://example.com/macbook-pro.jpg"),
						},
						components.EcommerceProductImages{
							ID:  types.String("12345"),
							URL: types.String("https://example.com/macbook-pro.jpg"),
						},
					},
				},
				components.Variants{
					ID:                types.String("1"),
					Name:              types.String("Midnight 16inch MacBook Pro"),
					Price:             types.String("1999.99"),
					Sku:               types.String("MBP123-16GB-SILVER-13"),
					InventoryQuantity: types.String("5"),
					Weight:            types.String("1.25"),
					WeightUnit:        types.String("lb"),
					Options: []components.EcommerceProductVariantsOptions{
						components.EcommerceProductVariantsOptions{
							ID:    types.String("1"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
						components.EcommerceProductVariantsOptions{
							ID:    types.String("1"),
							Name:  types.String("Color"),
							Value: types.String("Silver"),
						},
					},
					Images: []components.EcommerceProductImages{
						components.EcommerceProductImages{
							ID:  types.String("12345"),
							URL: types.String("https://example.com/macbook-pro.jpg"),
						},
						components.EcommerceProductImages{
							ID:  types.String("12345"),
							URL: types.String("https://example.com/macbook-pro.jpg"),
						},
					},
				},
			},
			Tags: []*string{
				types.String("Apple"),
			},
			Categories: []components.EcommerceProductCategories{
				components.EcommerceProductCategories{
					ID:   types.String("12345"),
					Name: types.String("Laptops"),
				},
			},
			CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
