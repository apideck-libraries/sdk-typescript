// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingExpensesID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.expensesOne[0]":
			dir.HandlerFunc("accounting.expensesOne", testAccountingExpensesOneAccountingExpensesOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingExpensesOneAccountingExpensesOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetExpenseResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "Expenses",
		Operation:  "one",
		Data: components.Expense{
			ID:              types.String("12345"),
			Number:          types.String("OIT00546"),
			TransactionDate: types.MustNewTimeFromString("2021-05-01T12:00:00.000Z"),
			AccountID:       "123456",
			CustomerID:      types.String("12345"),
			SupplierID:      types.String("12345"),
			CompanyID:       types.String("12345"),
			DepartmentID:    types.String("12345"),
			PaymentType:     components.ExpensePaymentTypeCash.ToPointer(),
			Currency:        components.CurrencyUsd.ToPointer(),
			CurrencyRate:    types.Float64(0.69),
			Type:            components.ExpenseTypeExpense.ToPointer(),
			Memo:            types.String("For travel expenses incurred on 2024-05-15"),
			TaxRate: &components.LinkedTaxRate{
				ID:   types.String("123456"),
				Code: types.String("N-T"),
				Name: types.String("GST on Purchases"),
				Rate: types.Float64(10),
			},
			TotalAmount: types.Float64(275),
			LineItems: []components.ExpenseLineItem{
				components.ExpenseLineItem{
					ID: types.String("12345"),
					TrackingCategories: []*components.LinkedTrackingCategory{
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
					},
					AccountID:    types.String("123456"),
					CustomerID:   types.String("12345"),
					DepartmentID: types.String("12345"),
					LocationID:   types.String("12345"),
					SubsidiaryID: types.String("12345"),
					TaxRate: &components.LinkedTaxRate{
						ID:   types.String("123456"),
						Code: types.String("N-T"),
						Name: types.String("GST on Purchases"),
						Rate: types.Float64(10),
					},
					Description: types.String("Travel US."),
					TotalAmount: types.Float64(275),
					Billable:    types.Bool(true),
				},
				components.ExpenseLineItem{
					ID: types.String("12345"),
					TrackingCategories: []*components.LinkedTrackingCategory{
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
					},
					AccountID:    types.String("123456"),
					CustomerID:   types.String("12345"),
					DepartmentID: types.String("12345"),
					LocationID:   types.String("12345"),
					SubsidiaryID: types.String("12345"),
					TaxRate: &components.LinkedTaxRate{
						ID:   types.String("123456"),
						Code: types.String("N-T"),
						Name: types.String("GST on Purchases"),
						Rate: types.Float64(10),
					},
					Description: types.String("Travel US."),
					TotalAmount: types.Float64(275),
					Billable:    types.Bool(true),
				},
			},
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateValueArrayOf6(
						[]components.Six{
							components.Six{},
						},
					)),
				},
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateValueBoolean(
						true,
					)),
				},
			},
			UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			RowVersion: types.String("1-12345"),
			PassThrough: []components.PassThroughBody{
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPaths{
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
