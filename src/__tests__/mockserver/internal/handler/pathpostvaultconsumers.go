// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostVaultConsumers(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "vault.consumersAdd[0]":
			dir.HandlerFunc("vault.consumersAdd", testVaultConsumersAddVaultConsumersAdd0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testVaultConsumersAddVaultConsumersAdd0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.CreateConsumerResponse = &components.CreateConsumerResponse{
		StatusCode: 200,
		Status:     "OK",
		Data: components.Consumer{
			ConsumerID:    "test_consumer_id",
			ApplicationID: types.String("dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX"),
			Metadata: &components.ConsumerMetadata{
				AccountName: types.String("SpaceX"),
				UserName:    types.String("Elon Musk"),
				Email:       types.String("elon@musk.com"),
				Image:       types.String("https://www.spacex.com/static/images/share.jpg"),
			},
			Connections: []components.ConsumerConnection{
				components.ConsumerConnection{
					ID:         types.String("1111+test_user_id"),
					Name:       types.String("Salesforce"),
					Icon:       types.String("https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png"),
					Logo:       types.String("https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg"),
					Website:    types.String("https://www.salesforce.com"),
					TagLine:    types.String("CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial."),
					ServiceID:  types.String("teamleader"),
					UnifiedAPI: types.String("crm"),
					ConsumerID: types.String("test_user_id"),
					AuthType:   components.AuthTypeOauth2.ToPointer(),
					Enabled:    types.Bool(true),
					Settings: map[string]any{
						"instance_url": "https://eu28.salesforce.com",
					},
					Metadata: map[string]any{
						"account": map[string]any{
							"name": "My Company",
							"id":   "c01458a5-7276-41ce-bc19-639906b0450a",
						},
						"plan": "enterprise",
					},
					CreatedAt: types.String("2020-09-19T12:18:37.071Z"),
					UpdatedAt: types.String("2020-09-19T12:18:37.071Z"),
					State:     components.ConnectionStateAuthorized.ToPointer(),
				},
				components.ConsumerConnection{
					ID:         types.String("1111+test_user_id"),
					Name:       types.String("Salesforce"),
					Icon:       types.String("https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png"),
					Logo:       types.String("https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg"),
					Website:    types.String("https://www.salesforce.com"),
					TagLine:    types.String("CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial."),
					ServiceID:  types.String("teamleader"),
					UnifiedAPI: types.String("crm"),
					ConsumerID: types.String("test_user_id"),
					AuthType:   components.AuthTypeOauth2.ToPointer(),
					Enabled:    types.Bool(true),
					Settings: map[string]any{
						"instance_url": "https://eu28.salesforce.com",
					},
					Metadata: map[string]any{
						"account": map[string]any{
							"name": "My Company",
							"id":   "c01458a5-7276-41ce-bc19-639906b0450a",
						},
						"plan": "enterprise",
					},
					CreatedAt: types.String("2020-09-19T12:18:37.071Z"),
					UpdatedAt: types.String("2020-09-19T12:18:37.071Z"),
					State:     components.ConnectionStateAuthorized.ToPointer(),
				},
			},
			Services: []string{
				"salesforce",
				"stripe",
			},
			AggregatedRequestCount: types.Float64(101),
			RequestCounts: &components.RequestCountAllocation{
				Unify: types.Float64(100),
				Proxy: types.Float64(10),
				Vault: types.Float64(21),
			},
			Created:             types.String("2021-05-07T12:55:42.242Z"),
			Modified:            types.String("2021-05-07T12:55:42.242Z"),
			RequestCountUpdated: types.String("2021-05-07T12:55:42.242Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
