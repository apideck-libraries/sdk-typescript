// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingInvoiceItemsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.invoiceItemsOne[0]":
			dir.HandlerFunc("accounting.invoiceItemsOne", testAccountingInvoiceItemsOneAccountingInvoiceItemsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingInvoiceItemsOneAccountingInvoiceItemsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetInvoiceItemResponse = &components.GetInvoiceItemResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "xero",
		Resource:   "invoice-items",
		Operation:  "one",
		Data: components.InvoiceItem{
			ID:            types.String("123456"),
			Name:          types.String("Model Y"),
			Description:   types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
			Code:          types.String("120-C"),
			Sold:          types.Bool(true),
			Purchased:     types.Bool(true),
			Tracked:       types.Bool(true),
			Taxable:       types.Bool(true),
			InventoryDate: types.MustNewDateFromString("2020-10-30"),
			Type:          components.InvoiceItemTypeInventory.ToPointer(),
			SalesDetails: &components.SalesDetails{
				UnitPrice:     types.Float64(27500.5),
				UnitOfMeasure: types.String("pc."),
				TaxInclusive:  types.Bool(true),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
			},
			PurchaseDetails: &components.PurchaseDetails{
				UnitPrice:     types.Float64(27500.5),
				UnitOfMeasure: types.String("pc."),
				TaxInclusive:  types.Bool(true),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
			},
			Quantity:  types.Float64(1),
			UnitPrice: types.Float64(27500.5),
			AssetAccount: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
			},
			IncomeAccount: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
			},
			ExpenseAccount: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
			},
			TrackingCategories: []*components.LinkedTrackingCategory{
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
			},
			Active:        types.Bool(true),
			DepartmentID:  types.String("12345"),
			LocationID:    types.String("12345"),
			SubsidiaryID:  types.String("12345"),
			TaxScheduleID: types.String("123456"),
			RowVersion:    types.String("1-12345"),
			UpdatedBy:     types.String("12345"),
			CreatedBy:     types.String("12345"),
			UpdatedAt:     types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedAt:     types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			PassThrough: []components.PassThroughBody{
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
