// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingPurchaseOrdersID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.purchaseOrdersOne[0]":
			dir.HandlerFunc("accounting.purchaseOrdersOne", testAccountingPurchaseOrdersOneAccountingPurchaseOrdersOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingPurchaseOrdersOneAccountingPurchaseOrdersOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetPurchaseOrderResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "PurchaseOrders",
		Operation:  "one",
		Data: components.PurchaseOrder{
			ID:           types.String("12345"),
			DownstreamID: types.String("12345"),
			PoNumber:     types.String("90000117"),
			Reference:    types.String("123456"),
			Supplier: &components.LinkedSupplier{
				ID:          types.String("12345"),
				DisplayID:   types.String("SUPP00101"),
				DisplayName: types.String("Windsurf Shop"),
				CompanyName: types.String("The boring company"),
				Address: &components.Address{
					ID:           types.String("123"),
					Type:         components.TypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
			},
			CompanyID:           types.String("12345"),
			Status:              components.PurchaseOrderStatusOpen.ToPointer(),
			IssuedDate:          types.MustNewDateFromString("2020-09-30"),
			DeliveryDate:        types.MustNewDateFromString("2020-09-30"),
			ExpectedArrivalDate: types.MustNewDateFromString("2020-09-30"),
			Currency:            components.CurrencyUsd.ToPointer(),
			CurrencyRate:        types.Float64(0.69),
			SubTotal:            types.Float64(27500),
			TotalTax:            types.Float64(2500),
			Total:               types.Float64(27500),
			TaxInclusive:        types.Bool(true),
			LineItems: []components.InvoiceLineItem{
				components.InvoiceLineItem{
					ID:                 types.String("12345"),
					RowID:              types.String("12345"),
					Code:               types.String("120-C"),
					LineNumber:         types.Int64(1),
					Description:        types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
					Type:               components.InvoiceLineItemTypeSalesItem.ToPointer(),
					TaxAmount:          types.Float64(27500),
					TotalAmount:        types.Float64(27500),
					Quantity:           types.Float64(1),
					UnitPrice:          types.Float64(27500.5),
					UnitOfMeasure:      types.String("pc."),
					DiscountPercentage: types.Float64(0.01),
					DiscountAmount:     types.Float64(19.99),
					LocationID:         types.String("12345"),
					DepartmentID:       types.String("12345"),
					Item: &components.LinkedInvoiceItem{
						ID:   types.String("12344"),
						Code: types.String("120-C"),
						Name: types.String("Model Y"),
					},
					TaxRate: &components.LinkedTaxRate{
						ID:   types.String("123456"),
						Code: types.String("N-T"),
						Name: types.String("GST on Purchases"),
						Rate: types.Float64(10),
					},
					TrackingCategories: []*components.LinkedTrackingCategory{
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
					},
					LedgerAccount: &components.LinkedLedgerAccount{
						ID:          types.String("123456"),
						Name:        types.String("Bank account"),
						NominalCode: types.String("N091"),
						Code:        types.String("453"),
					},
					CustomFields: []components.CustomField{
						components.CustomField{
							ID:          types.String("2389328923893298"),
							Name:        types.String("employee_level"),
							Description: types.String("Employee Level"),
							Value: types.Pointer(components.CreateValueFour(
								components.Four{},
							)),
						},
						components.CustomField{
							ID:          types.String("2389328923893298"),
							Name:        types.String("employee_level"),
							Description: types.String("Employee Level"),
							Value: types.Pointer(components.CreateValueArrayOf6(
								[]components.Six{
									components.Six{},
								},
							)),
						},
					},
					RowVersion: types.String("1-12345"),
					UpdatedBy:  types.String("12345"),
					CreatedBy:  types.String("12345"),
					CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				},
				components.InvoiceLineItem{
					ID:                 types.String("12345"),
					RowID:              types.String("12345"),
					Code:               types.String("120-C"),
					LineNumber:         types.Int64(1),
					Description:        types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
					Type:               components.InvoiceLineItemTypeSalesItem.ToPointer(),
					TaxAmount:          types.Float64(27500),
					TotalAmount:        types.Float64(27500),
					Quantity:           types.Float64(1),
					UnitPrice:          types.Float64(27500.5),
					UnitOfMeasure:      types.String("pc."),
					DiscountPercentage: types.Float64(0.01),
					DiscountAmount:     types.Float64(19.99),
					LocationID:         types.String("12345"),
					DepartmentID:       types.String("12345"),
					Item: &components.LinkedInvoiceItem{
						ID:   types.String("12344"),
						Code: types.String("120-C"),
						Name: types.String("Model Y"),
					},
					TaxRate: &components.LinkedTaxRate{
						ID:   types.String("123456"),
						Code: types.String("N-T"),
						Name: types.String("GST on Purchases"),
						Rate: types.Float64(10),
					},
					TrackingCategories: []*components.LinkedTrackingCategory{
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
					},
					LedgerAccount: &components.LinkedLedgerAccount{
						ID:          types.String("123456"),
						Name:        types.String("Bank account"),
						NominalCode: types.String("N091"),
						Code:        types.String("453"),
					},
					CustomFields: []components.CustomField{
						components.CustomField{
							ID:          types.String("2389328923893298"),
							Name:        types.String("employee_level"),
							Description: types.String("Employee Level"),
							Value: types.Pointer(components.CreateValueNumber(
								10,
							)),
						},
					},
					RowVersion: types.String("1-12345"),
					UpdatedBy:  types.String("12345"),
					CreatedBy:  types.String("12345"),
					CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				},
				components.InvoiceLineItem{
					ID:                 types.String("12345"),
					RowID:              types.String("12345"),
					Code:               types.String("120-C"),
					LineNumber:         types.Int64(1),
					Description:        types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
					Type:               components.InvoiceLineItemTypeSalesItem.ToPointer(),
					TaxAmount:          types.Float64(27500),
					TotalAmount:        types.Float64(27500),
					Quantity:           types.Float64(1),
					UnitPrice:          types.Float64(27500.5),
					UnitOfMeasure:      types.String("pc."),
					DiscountPercentage: types.Float64(0.01),
					DiscountAmount:     types.Float64(19.99),
					LocationID:         types.String("12345"),
					DepartmentID:       types.String("12345"),
					Item: &components.LinkedInvoiceItem{
						ID:   types.String("12344"),
						Code: types.String("120-C"),
						Name: types.String("Model Y"),
					},
					TaxRate: &components.LinkedTaxRate{
						ID:   types.String("123456"),
						Code: types.String("N-T"),
						Name: types.String("GST on Purchases"),
						Rate: types.Float64(10),
					},
					TrackingCategories: []*components.LinkedTrackingCategory{
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
						&components.LinkedTrackingCategory{
							ID:   types.String("123456"),
							Name: types.String("New York"),
						},
					},
					LedgerAccount: &components.LinkedLedgerAccount{
						ID:          types.String("123456"),
						Name:        types.String("Bank account"),
						NominalCode: types.String("N091"),
						Code:        types.String("453"),
					},
					CustomFields: []components.CustomField{
						components.CustomField{
							ID:          types.String("2389328923893298"),
							Name:        types.String("employee_level"),
							Description: types.String("Employee Level"),
							Value: types.Pointer(components.CreateValueFour(
								components.Four{},
							)),
						},
						components.CustomField{
							ID:          types.String("2389328923893298"),
							Name:        types.String("employee_level"),
							Description: types.String("Employee Level"),
							Value: types.Pointer(components.CreateValueNumber(
								10,
							)),
						},
					},
					RowVersion: types.String("1-12345"),
					UpdatedBy:  types.String("12345"),
					CreatedBy:  types.String("12345"),
					CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
					UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				},
			},
			ShippingAddress: &components.Address{
				ID:           types.String("123"),
				Type:         components.TypePrimary.ToPointer(),
				String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
				Name:         types.String("HQ US"),
				Line1:        types.String("Main street"),
				Line2:        types.String("apt #"),
				Line3:        types.String("Suite #"),
				Line4:        types.String("delivery instructions"),
				StreetNumber: types.String("25"),
				City:         types.String("San Francisco"),
				State:        types.String("CA"),
				PostalCode:   types.String("94104"),
				Country:      types.String("US"),
				Latitude:     types.String("40.759211"),
				Longitude:    types.String("-73.984638"),
				County:       types.String("Santa Clara"),
				ContactName:  types.String("Elon Musk"),
				Salutation:   types.String("Mr"),
				PhoneNumber:  types.String("111-111-1111"),
				Fax:          types.String("122-111-1111"),
				Email:        types.String("elon@musk.com"),
				Website:      types.String("https://elonmusk.com"),
				Notes:        types.String("Address notes or delivery instructions."),
				RowVersion:   types.String("1-12345"),
			},
			LedgerAccount: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
			},
			TemplateID:         types.String("123456"),
			DiscountPercentage: types.Float64(5.5),
			BankAccount: &components.BankAccount{
				BankName:         types.String("Monzo"),
				AccountNumber:    types.String("123465"),
				AccountName:      types.String("SPACEX LLC"),
				AccountType:      components.AccountTypeCreditCard.ToPointer(),
				Iban:             types.String("CH2989144532982975332"),
				Bic:              types.String("AUDSCHGGXXX"),
				RoutingNumber:    types.String("012345678"),
				BsbNumber:        types.String("062-001"),
				BranchIdentifier: types.String("001"),
				BankCode:         types.String("BNH"),
				Currency:         components.CurrencyUsd.ToPointer(),
			},
			AccountingByRow: types.Bool(false),
			DueDate:         types.MustNewDateFromString("2020-10-30"),
			PaymentMethod:   types.String("cash"),
			TaxCode:         types.String("1234"),
			Channel:         types.String("email"),
			Memo:            types.String("Thank you for the partnership and have a great day!"),
			TrackingCategories: []*components.LinkedTrackingCategory{
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
			},
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateValueFour(
						components.Four{},
					)),
				},
			},
			RowVersion: types.String("1-12345"),
			UpdatedBy:  types.String("12345"),
			CreatedBy:  types.String("12345"),
			UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			PassThrough: []components.PassThroughBody{
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPaths{
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPaths{
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPaths{
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
						components.ExtendPaths{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
