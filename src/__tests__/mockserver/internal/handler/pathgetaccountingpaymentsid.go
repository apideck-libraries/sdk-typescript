// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingPaymentsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.paymentsOne[0]":
			dir.HandlerFunc("accounting.paymentsOne", testAccountingPaymentsOneAccountingPaymentsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingPaymentsOneAccountingPaymentsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetPaymentResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "xero",
		Resource:   "payments",
		Operation:  "one",
		Data: components.Payment{
			ID:                     "12345",
			DownstreamID:           types.String("12345"),
			Currency:               components.CurrencyUsd.ToPointer(),
			CurrencyRate:           types.Float64(0.69),
			TotalAmount:            types.Float64(49.99),
			Reference:              types.String("123456"),
			PaymentMethod:          types.String("cash"),
			PaymentMethodReference: types.String("123456"),
			PaymentMethodID:        types.String("12345"),
			Account: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
			},
			TransactionDate: types.MustNewTimeFromString("2021-05-01T12:00:00.000Z"),
			Customer: &components.LinkedCustomer{
				ID:          types.String("12345"),
				DisplayID:   types.String("CUST00101"),
				DisplayName: types.String("Windsurf Shop"),
				CompanyName: types.String("The boring company"),
				Email:       types.String("boring@boring.com"),
			},
			CompanyID:  types.String("12345"),
			Reconciled: types.Bool(true),
			Status:     components.PaymentStatusAuthorised.ToPointer(),
			Type:       components.PaymentTypeAccountsReceivable.ToPointer(),
			Allocations: []components.Allocation{
				components.Allocation{
					ID:           types.String("123456"),
					Code:         types.String("N091"),
					Amount:       types.Float64(49.99),
					AllocationID: types.String("123456"),
				},
				components.Allocation{
					ID:           types.String("123456"),
					Code:         types.String("N091"),
					Amount:       types.Float64(49.99),
					AllocationID: types.String("123456"),
				},
				components.Allocation{
					ID:           types.String("123456"),
					Code:         types.String("N091"),
					Amount:       types.Float64(49.99),
					AllocationID: types.String("123456"),
				},
			},
			Note:   types.String("Some notes about this transaction"),
			Number: types.String("123456"),
			TrackingCategories: []*components.LinkedTrackingCategory{
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
				&components.LinkedTrackingCategory{
					ID:   types.String("123456"),
					Name: types.String("New York"),
				},
			},
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
						components.CustomFieldValue1{},
					)),
				},
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValueUnionArrayOfCustomFieldValue2(
						[]components.CustomFieldValue2{
							components.CustomFieldValue2{},
						},
					)),
				},
			},
			RowVersion: types.String("1-12345"),
			DisplayID:  types.String("123456"),
			UpdatedBy:  types.String("12345"),
			CreatedBy:  types.String("12345"),
			CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			PassThrough: []components.PassThroughBody{
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
				components.PassThroughBody{
					ServiceID: "<id>",
					ExtendPaths: []components.ExtendPath{
						components.ExtendPath{
							Path: "$.nested.property",
							Value: map[string]any{
								"TaxClassificationRef": map[string]any{
									"value": "EUC-99990201-V1-00020000",
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
