// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetHrisPayrollsEmployeesEmployeeID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "hris.employeePayrollsAll[0]":
			dir.HandlerFunc("hris.employeePayrollsAll", testHrisEmployeePayrollsAllHrisEmployeePayrollsAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testHrisEmployeePayrollsAllHrisEmployeePayrollsAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetEmployeePayrollsResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "sage-hr",
		Resource:   "Employees",
		Operation:  "all",
		Data: []components.EmployeePayroll{
			components.EmployeePayroll{
				ID:            types.String("12345"),
				EmployeeID:    types.String("12345"),
				CompanyID:     types.String("23456"),
				Processed:     types.Bool(false),
				ProcessedDate: types.String("2022-04-08"),
				CheckDate:     types.String("2022-04-08"),
				StartDate:     types.String("2022-04-08"),
				EndDate:       types.String("2022-04-21"),
				Totals: &components.PayrollTotals{
					CompanyDebit:                 types.Float64(27992.49),
					TaxDebit:                     types.Float64(8655.32),
					CheckAmount:                  types.Float64(27966.23),
					NetPay:                       types.Float64(19337.17),
					GrossPay:                     types.Float64(27966.23),
					EmployerTaxes:                types.Float64(2038.93),
					EmployeeTaxes:                types.Float64(6616.39),
					EmployerBenefitContributions: types.Float64(0),
					EmployeeBenefitDeductions:    types.Float64(0),
				},
				Compensations: []components.Compensation{
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
				},
			},
			components.EmployeePayroll{
				ID:            types.String("12345"),
				EmployeeID:    types.String("12345"),
				CompanyID:     types.String("23456"),
				Processed:     types.Bool(false),
				ProcessedDate: types.String("2022-04-08"),
				CheckDate:     types.String("2022-04-08"),
				StartDate:     types.String("2022-04-08"),
				EndDate:       types.String("2022-04-21"),
				Totals: &components.PayrollTotals{
					CompanyDebit:                 types.Float64(27992.49),
					TaxDebit:                     types.Float64(8655.32),
					CheckAmount:                  types.Float64(27966.23),
					NetPay:                       types.Float64(19337.17),
					GrossPay:                     types.Float64(27966.23),
					EmployerTaxes:                types.Float64(2038.93),
					EmployeeTaxes:                types.Float64(6616.39),
					EmployerBenefitContributions: types.Float64(0),
					EmployeeBenefitDeductions:    types.Float64(0),
				},
				Compensations: []components.Compensation{
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
				},
			},
			components.EmployeePayroll{
				ID:            types.String("12345"),
				EmployeeID:    types.String("12345"),
				CompanyID:     types.String("23456"),
				Processed:     types.Bool(false),
				ProcessedDate: types.String("2022-04-08"),
				CheckDate:     types.String("2022-04-08"),
				StartDate:     types.String("2022-04-08"),
				EndDate:       types.String("2022-04-21"),
				Totals: &components.PayrollTotals{
					CompanyDebit:                 types.Float64(27992.49),
					TaxDebit:                     types.Float64(8655.32),
					CheckAmount:                  types.Float64(27966.23),
					NetPay:                       types.Float64(19337.17),
					GrossPay:                     types.Float64(27966.23),
					EmployerTaxes:                types.Float64(2038.93),
					EmployeeTaxes:                types.Float64(6616.39),
					EmployerBenefitContributions: types.Float64(0),
					EmployeeBenefitDeductions:    types.Float64(0),
				},
				Compensations: []components.Compensation{
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
					components.Compensation{
						EmployeeID: types.String("12345"),
						NetPay:     types.Float64(2199.93),
						GrossPay:   types.Float64(3000),
						Taxes: []components.Tax{
							components.Tax{
								Name:     types.String("CA State Income Tax"),
								Employer: types.Bool(false),
								Amount:   types.Float64(1.97),
							},
						},
						Deductions: []components.Deduction{
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
							components.Deduction{
								Name:   types.String("Company Car"),
								Amount: types.Float64(10.97),
							},
						},
						Benefits: []components.Benefit{
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
							components.Benefit{
								Name:                 types.String("Health Insurance"),
								EmployeeDeduction:    types.Float64(142.94),
								EmployerContribution: types.Float64(141.14),
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
