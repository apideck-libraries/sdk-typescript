// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetCrmActivities(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "crm.activitiesAll[0]":
			dir.HandlerFunc("crm.activitiesAll", testCrmActivitiesAllCrmActivitiesAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCrmActivitiesAllCrmActivitiesAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetActivitiesResponse = &components.GetActivitiesResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "zoho-crm",
		Resource:   "activities",
		Operation:  "all",
		Data: []components.Activity{
			components.Activity{
				ID:               types.String("12345"),
				DownstreamID:     types.String("12345"),
				ActivityDatetime: types.String("2021-05-01T12:00:00.000Z"),
				DurationSeconds:  types.Int64(1800),
				UserID:           types.String("12345"),
				AccountID:        types.String("12345"),
				ContactID:        types.String("12345"),
				CompanyID:        types.String("12345"),
				OpportunityID:    types.String("12345"),
				LeadID:           types.String("12345"),
				OwnerID:          types.String("12345"),
				CampaignID:       types.String("12345"),
				CaseID:           types.String("12345"),
				AssetID:          types.String("12345"),
				ContractID:       types.String("12345"),
				ProductID:        types.String("12345"),
				SolutionID:       types.String("12345"),
				CustomObjectID:   types.String("12345"),
				Type:             components.ActivityTypeMeeting.ToPointer(),
				Title:            types.String("Meeting"),
				Description:      types.String("More info about the meeting"),
				Note:             types.String("An internal note about the meeting"),
				Location:         types.String("Space"),
				LocationAddress: &components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
				AllDayEvent:        types.Bool(false),
				Private:            types.Bool(true),
				GroupEvent:         types.Bool(true),
				EventSubType:       types.String("debrief"),
				GroupEventType:     types.String("Proposed"),
				Child:              types.Bool(false),
				Archived:           types.Bool(false),
				Deleted:            types.Bool(false),
				ShowAs:             components.ShowAsBusy.ToPointer(),
				Done:               types.Bool(false),
				StartDatetime:      types.String("2021-05-01T12:00:00.000Z"),
				EndDatetime:        types.String("2021-05-01T12:30:00.000Z"),
				DurationMinutes:    types.Int64(30),
				ActivityDate:       types.String("2021-05-01"),
				EndDate:            types.String("2021-05-01"),
				Recurrent:          types.Bool(false),
				ReminderDatetime:   types.String("2021-05-01T17:00:00.000Z"),
				ReminderSet:        types.Bool(false),
				VideoConferenceURL: types.String("https://us02web.zoom.us/j/88120759396"),
				VideoConferenceID:  types.String("zoom:88120759396"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2MapOfAny(
							map[string]any{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Number(
							10,
						)),
					},
				},
				Attendees: []components.ActivityAttendee{
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
				},
				UpdatedBy: types.String("12345"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.String("2020-09-30T07:43:32.000Z"),
				CreatedAt: types.String("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Activity{
				ID:               types.String("12345"),
				DownstreamID:     types.String("12345"),
				ActivityDatetime: types.String("2021-05-01T12:00:00.000Z"),
				DurationSeconds:  types.Int64(1800),
				UserID:           types.String("12345"),
				AccountID:        types.String("12345"),
				ContactID:        types.String("12345"),
				CompanyID:        types.String("12345"),
				OpportunityID:    types.String("12345"),
				LeadID:           types.String("12345"),
				OwnerID:          types.String("12345"),
				CampaignID:       types.String("12345"),
				CaseID:           types.String("12345"),
				AssetID:          types.String("12345"),
				ContractID:       types.String("12345"),
				ProductID:        types.String("12345"),
				SolutionID:       types.String("12345"),
				CustomObjectID:   types.String("12345"),
				Type:             components.ActivityTypeMeeting.ToPointer(),
				Title:            types.String("Meeting"),
				Description:      types.String("More info about the meeting"),
				Note:             types.String("An internal note about the meeting"),
				Location:         types.String("Space"),
				LocationAddress: &components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
				AllDayEvent:        types.Bool(false),
				Private:            types.Bool(true),
				GroupEvent:         types.Bool(true),
				EventSubType:       types.String("debrief"),
				GroupEventType:     types.String("Proposed"),
				Child:              types.Bool(false),
				Archived:           types.Bool(false),
				Deleted:            types.Bool(false),
				ShowAs:             components.ShowAsBusy.ToPointer(),
				Done:               types.Bool(false),
				StartDatetime:      types.String("2021-05-01T12:00:00.000Z"),
				EndDatetime:        types.String("2021-05-01T12:30:00.000Z"),
				DurationMinutes:    types.Int64(30),
				ActivityDate:       types.String("2021-05-01"),
				EndDate:            types.String("2021-05-01"),
				Recurrent:          types.Bool(false),
				ReminderDatetime:   types.String("2021-05-01T17:00:00.000Z"),
				ReminderSet:        types.Bool(false),
				VideoConferenceURL: types.String("https://us02web.zoom.us/j/88120759396"),
				VideoConferenceID:  types.String("zoom:88120759396"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2MapOfAny(
							map[string]any{
								"0": "<value>",
								"1": "<value>",
							},
						)),
					},
				},
				Attendees: []components.ActivityAttendee{
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
				},
				UpdatedBy: types.String("12345"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.String("2020-09-30T07:43:32.000Z"),
				CreatedAt: types.String("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Activity{
				ID:               types.String("12345"),
				DownstreamID:     types.String("12345"),
				ActivityDatetime: types.String("2021-05-01T12:00:00.000Z"),
				DurationSeconds:  types.Int64(1800),
				UserID:           types.String("12345"),
				AccountID:        types.String("12345"),
				ContactID:        types.String("12345"),
				CompanyID:        types.String("12345"),
				OpportunityID:    types.String("12345"),
				LeadID:           types.String("12345"),
				OwnerID:          types.String("12345"),
				CampaignID:       types.String("12345"),
				CaseID:           types.String("12345"),
				AssetID:          types.String("12345"),
				ContractID:       types.String("12345"),
				ProductID:        types.String("12345"),
				SolutionID:       types.String("12345"),
				CustomObjectID:   types.String("12345"),
				Type:             components.ActivityTypeMeeting.ToPointer(),
				Title:            types.String("Meeting"),
				Description:      types.String("More info about the meeting"),
				Note:             types.String("An internal note about the meeting"),
				Location:         types.String("Space"),
				LocationAddress: &components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
				AllDayEvent:        types.Bool(false),
				Private:            types.Bool(true),
				GroupEvent:         types.Bool(true),
				EventSubType:       types.String("debrief"),
				GroupEventType:     types.String("Proposed"),
				Child:              types.Bool(false),
				Archived:           types.Bool(false),
				Deleted:            types.Bool(false),
				ShowAs:             components.ShowAsBusy.ToPointer(),
				Done:               types.Bool(false),
				StartDatetime:      types.String("2021-05-01T12:00:00.000Z"),
				EndDatetime:        types.String("2021-05-01T12:30:00.000Z"),
				DurationMinutes:    types.Int64(30),
				ActivityDate:       types.String("2021-05-01"),
				EndDate:            types.String("2021-05-01"),
				Recurrent:          types.Bool(false),
				ReminderDatetime:   types.String("2021-05-01T17:00:00.000Z"),
				ReminderSet:        types.Bool(false),
				VideoConferenceURL: types.String("https://us02web.zoom.us/j/88120759396"),
				VideoConferenceID:  types.String("zoom:88120759396"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Boolean(
							true,
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				Attendees: []components.ActivityAttendee{
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
					components.ActivityAttendee{
						ID:           types.String("12345"),
						Name:         types.String("Elon Musk"),
						FirstName:    types.String("Elon"),
						MiddleName:   types.String("D."),
						LastName:     types.String("Musk"),
						Prefix:       types.String("Mr."),
						Suffix:       types.String("PhD"),
						EmailAddress: types.String("elon@musk.com"),
						IsOrganizer:  types.Bool(true),
						Status:       components.ActivityAttendeeStatusAccepted.ToPointer(),
						UserID:       types.String("12345"),
						ContactID:    types.String("12345"),
						UpdatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
						CreatedAt:    types.MustNewTimeFromString("2017-08-12T20:43:21.291Z"),
					},
				},
				UpdatedBy: types.String("12345"),
				CreatedBy: types.String("12345"),
				UpdatedAt: types.String("2020-09-30T07:43:32.000Z"),
				CreatedAt: types.String("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
