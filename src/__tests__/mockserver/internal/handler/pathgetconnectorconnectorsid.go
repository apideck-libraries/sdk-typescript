// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetConnectorConnectorsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "connector.connectorsOne[0]":
			dir.HandlerFunc("connector.connectorsOne", testConnectorConnectorsOneConnectorConnectorsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testConnectorConnectorsOneConnectorConnectorsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetConnectorResponse{
		StatusCode: 200,
		Status:     "OK",
		Data: components.Connector{
			ID:                     types.String("crm+salesforce"),
			Name:                   types.String("Salesforce"),
			Description:            types.String("A description"),
			IconURL:                types.String("https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png"),
			LogoURL:                types.String("https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg"),
			WebsiteURL:             types.String("https://www.salesforce.com"),
			SignupURL:              types.String("https://www.salesforce.com/signup"),
			PartnerSignupURL:       types.String("https://www.salesforce.com/partners"),
			AuthType:               components.ConnectorAuthTypeOauth2.ToPointer(),
			AuthOnly:               types.Bool(true),
			BlindMapped:            types.Bool(true),
			OauthGrantType:         components.ConnectorOauthGrantTypeAuthorizationCode.ToPointer(),
			OauthCredentialsSource: components.OauthCredentialsSourceIntegration.ToPointer(),
			OauthScopes: []components.OauthScopes{
				components.OauthScopes{
					ID:    types.String("contacts:all"),
					Label: types.String("Read/write on the Contacts resource"),
					DefaultApis: []string{
						"crm",
					},
				},
				components.OauthScopes{
					ID:    types.String("contacts:all"),
					Label: types.String("Read/write on the Contacts resource"),
					DefaultApis: []string{
						"crm",
					},
				},
				components.OauthScopes{
					ID:    types.String("contacts:all"),
					Label: types.String("Read/write on the Contacts resource"),
					DefaultApis: []string{
						"crm",
					},
				},
			},
			CustomScopes:          types.Bool(true),
			HasSandboxCredentials: types.Bool(true),
			Settings: []components.ConnectorSetting{
				components.ConnectorSetting{
					ID:    types.String("pipeline_id"),
					Label: types.String("Pipeline"),
					Type:  components.ConnectorSettingTypeSelect.ToPointer(),
				},
				components.ConnectorSetting{
					ID:    types.String("pipeline_id"),
					Label: types.String("Pipeline"),
					Type:  components.ConnectorSettingTypeSelect.ToPointer(),
				},
			},
			ServiceID: types.String("close"),
			UnifiedApis: []components.UnifiedApis{
				components.UnifiedApis{
					ID:       components.UnifiedAPIIDCrm.ToPointer(),
					Name:     types.String("File Storage API"),
					AuthOnly: types.Bool(true),
					OauthScopes: []components.ConnectorOauthScopes{
						components.ConnectorOauthScopes{
							ID:    types.String("contacts:all"),
							Label: types.String("Read/write on the Contacts resource"),
						},
					},
					SupportedResources: []components.LinkedConnectorResource{
						components.LinkedConnectorResource{
							ID:             types.String("companies"),
							Name:           types.String("Companies"),
							DownstreamID:   types.String("accounts"),
							DownstreamName: types.String("Accounts"),
						},
						components.LinkedConnectorResource{
							ID:             types.String("companies"),
							Name:           types.String("Companies"),
							DownstreamID:   types.String("accounts"),
							DownstreamName: types.String("Accounts"),
						},
					},
					DownstreamUnsupportedResources: []string{
						"companies",
					},
					SupportedEvents: []components.ConnectorEvent{
						components.ConnectorEvent{
							EventType:           types.String("employee.created"),
							EventSource:         components.EventSourceNative.ToPointer(),
							DownstreamEventType: types.String("person_created"),
							Resources: []string{
								"companies",
							},
							EntityType: types.String("employee"),
						},
						components.ConnectorEvent{
							EventType:           types.String("employee.created"),
							EventSource:         components.EventSourceNative.ToPointer(),
							DownstreamEventType: types.String("person_created"),
							Resources: []string{
								"companies",
							},
							EntityType: types.String("employee"),
						},
						components.ConnectorEvent{
							EventType:           types.String("employee.created"),
							EventSource:         components.EventSourceNative.ToPointer(),
							DownstreamEventType: types.String("person_created"),
							Resources: []string{
								"companies",
							},
							EntityType: types.String("employee"),
						},
					},
				},
				components.UnifiedApis{
					ID:       components.UnifiedAPIIDCrm.ToPointer(),
					Name:     types.String("File Storage API"),
					AuthOnly: types.Bool(true),
					OauthScopes: []components.ConnectorOauthScopes{
						components.ConnectorOauthScopes{
							ID:    types.String("contacts:all"),
							Label: types.String("Read/write on the Contacts resource"),
						},
					},
					SupportedResources: []components.LinkedConnectorResource{
						components.LinkedConnectorResource{
							ID:             types.String("companies"),
							Name:           types.String("Companies"),
							DownstreamID:   types.String("accounts"),
							DownstreamName: types.String("Accounts"),
						},
						components.LinkedConnectorResource{
							ID:             types.String("companies"),
							Name:           types.String("Companies"),
							DownstreamID:   types.String("accounts"),
							DownstreamName: types.String("Accounts"),
						},
					},
					DownstreamUnsupportedResources: []string{
						"companies",
					},
					SupportedEvents: []components.ConnectorEvent{
						components.ConnectorEvent{
							EventType:           types.String("employee.created"),
							EventSource:         components.EventSourceNative.ToPointer(),
							DownstreamEventType: types.String("person_created"),
							Resources: []string{
								"companies",
							},
							EntityType: types.String("employee"),
						},
						components.ConnectorEvent{
							EventType:           types.String("employee.created"),
							EventSource:         components.EventSourceNative.ToPointer(),
							DownstreamEventType: types.String("person_created"),
							Resources: []string{
								"companies",
							},
							EntityType: types.String("employee"),
						},
					},
				},
			},
			SupportedResources: []components.LinkedConnectorResource{
				components.LinkedConnectorResource{
					ID:             types.String("companies"),
					Name:           types.String("Companies"),
					DownstreamID:   types.String("accounts"),
					DownstreamName: types.String("Accounts"),
				},
			},
			ConfigurableResources: []string{
				"leads",
				"companies",
			},
			SupportedEvents: []components.ConnectorEvent{
				components.ConnectorEvent{
					EventType:           types.String("employee.created"),
					EventSource:         components.EventSourceNative.ToPointer(),
					DownstreamEventType: types.String("person_created"),
					Resources: []string{
						"companies",
					},
					EntityType: types.String("employee"),
				},
			},
			WebhookSupport: &components.WebhookSupport{
				Mode:              components.ModeNative.ToPointer(),
				SubscriptionLevel: components.SubscriptionLevelIntegration.ToPointer(),
				ManagedVia:        components.ManagedViaAPI.ToPointer(),
			},
			SchemaSupport: &components.SchemaSupport{
				Supported: types.Bool(true),
			},
			Docs: []components.ConnectorDoc{
				components.ConnectorDoc{
					ID:   types.String("12345"),
					Name: types.String("connection"),
					URL:  types.String("https://unify.apideck.com/connector/connectors/workday/docs/consumer+connection"),
				},
				components.ConnectorDoc{
					ID:   types.String("12345"),
					Name: types.String("connection"),
					URL:  types.String("https://unify.apideck.com/connector/connectors/workday/docs/consumer+connection"),
				},
				components.ConnectorDoc{
					ID:   types.String("12345"),
					Name: types.String("connection"),
					URL:  types.String("https://unify.apideck.com/connector/connectors/workday/docs/consumer+connection"),
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
