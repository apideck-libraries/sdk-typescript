// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAtsApplicants(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "ats.applicantsAll[0]":
			dir.HandlerFunc("ats.applicantsAll", testAtsApplicantsAllAtsApplicantsAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAtsApplicantsAllAtsApplicantsAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetApplicantsResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "lever",
		Resource:   "Applicants",
		Operation:  "all",
		Data: []components.Applicant{
			components.Applicant{
				ID:          types.String("12345"),
				Name:        types.String("Elon Musk"),
				FirstName:   types.String("Elon"),
				LastName:    types.String("Musk"),
				MiddleName:  types.String("D."),
				Initials:    types.String("EM"),
				Birthday:    types.MustNewDateFromString("2000-08-12"),
				CoverLetter: types.String("I submit this application to express my sincere interest in the API developer position. In the previous role, I was responsible for leadership and ..."),
				JobURL:      types.String("https://democompany.recruitee.com/o/example-talent-pool"),
				PhotoURL:    types.String("https://unavatar.io/elon-musk"),
				Headline:    types.String("PepsiCo, Inc, Central Perk"),
				Title:       types.String("CEO"),
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
							10,
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
							10,
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				Websites: []components.ApplicantWebsite{
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
				},
				SocialLinks: []components.ApplicantSocialLink{
					components.ApplicantSocialLink{
						ID:   types.String("12345"),
						URL:  "https://www.twitter.com/apideck",
						Type: types.String("twitter"),
					},
					components.ApplicantSocialLink{
						ID:   types.String("12345"),
						URL:  "https://www.twitter.com/apideck",
						Type: types.String("twitter"),
					},
					components.ApplicantSocialLink{
						ID:   types.String("12345"),
						URL:  "https://www.twitter.com/apideck",
						Type: types.String("twitter"),
					},
				},
				StageID:       types.String("12345"),
				RecruiterID:   types.String("12345"),
				CoordinatorID: types.String("12345"),
				ApplicationIds: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Applications: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Followers: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Sources: []string{
					"Job site",
				},
				SourceID:     types.String("12345"),
				Confidential: types.Bool(false),
				Anonymized:   types.Bool(true),
				Tags: []string{
					"New",
				},
				Archived:          types.Bool(false),
				LastInteractionAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				OwnerID:           types.String("54321"),
				SourcedBy:         types.String("12345"),
				CvURL:             types.String("https://recruitee-main.s3.eu-central-1.amazonaws.com/candidates/36615291/pdf_cv_38swhu4w42k1.pdf?response-content-disposition=inline&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAQYHB7CA5RLR4Y3ON%2F20220514%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220514T235654Z&X-Amz-Expires=36000&X-Amz-SignedHeaders=host&X-Amz-Signature=72c0621f5976db75b54de487eb821a8e73480d7f2a6a4a9713ab997944b0561f"),
				RecordURL:         types.String("https://app.intercom.io/contacts/12345"),
				RejectedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				Deleted:           types.Bool(true),
				DeletedBy:         types.String("12345"),
				DeletedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy:         types.String("12345"),
				CreatedBy:         types.String("12345"),
				UpdatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Applicant{
				ID:          types.String("12345"),
				Name:        types.String("Elon Musk"),
				FirstName:   types.String("Elon"),
				LastName:    types.String("Musk"),
				MiddleName:  types.String("D."),
				Initials:    types.String("EM"),
				Birthday:    types.MustNewDateFromString("2000-08-12"),
				CoverLetter: types.String("I submit this application to express my sincere interest in the API developer position. In the previous role, I was responsible for leadership and ..."),
				JobURL:      types.String("https://democompany.recruitee.com/o/example-talent-pool"),
				PhotoURL:    types.String("https://unavatar.io/elon-musk"),
				Headline:    types.String("PepsiCo, Inc, Central Perk"),
				Title:       types.String("CEO"),
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				Websites: []components.ApplicantWebsite{
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
				},
				SocialLinks: []components.ApplicantSocialLink{
					components.ApplicantSocialLink{
						ID:   types.String("12345"),
						URL:  "https://www.twitter.com/apideck",
						Type: types.String("twitter"),
					},
				},
				StageID:       types.String("12345"),
				RecruiterID:   types.String("12345"),
				CoordinatorID: types.String("12345"),
				ApplicationIds: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Applications: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Followers: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Sources: []string{
					"Job site",
				},
				SourceID:     types.String("12345"),
				Confidential: types.Bool(false),
				Anonymized:   types.Bool(true),
				Tags: []string{
					"New",
				},
				Archived:          types.Bool(false),
				LastInteractionAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				OwnerID:           types.String("54321"),
				SourcedBy:         types.String("12345"),
				CvURL:             types.String("https://recruitee-main.s3.eu-central-1.amazonaws.com/candidates/36615291/pdf_cv_38swhu4w42k1.pdf?response-content-disposition=inline&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAQYHB7CA5RLR4Y3ON%2F20220514%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220514T235654Z&X-Amz-Expires=36000&X-Amz-SignedHeaders=host&X-Amz-Signature=72c0621f5976db75b54de487eb821a8e73480d7f2a6a4a9713ab997944b0561f"),
				RecordURL:         types.String("https://app.intercom.io/contacts/12345"),
				RejectedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				Deleted:           types.Bool(true),
				DeletedBy:         types.String("12345"),
				DeletedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy:         types.String("12345"),
				CreatedBy:         types.String("12345"),
				UpdatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Applicant{
				ID:          types.String("12345"),
				Name:        types.String("Elon Musk"),
				FirstName:   types.String("Elon"),
				LastName:    types.String("Musk"),
				MiddleName:  types.String("D."),
				Initials:    types.String("EM"),
				Birthday:    types.MustNewDateFromString("2000-08-12"),
				CoverLetter: types.String("I submit this application to express my sincere interest in the API developer position. In the previous role, I was responsible for leadership and ..."),
				JobURL:      types.String("https://democompany.recruitee.com/o/example-talent-pool"),
				PhotoURL:    types.String("https://unavatar.io/elon-musk"),
				Headline:    types.String("PepsiCo, Inc, Central Perk"),
				Title:       types.String("CEO"),
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				Websites: []components.ApplicantWebsite{
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
					components.ApplicantWebsite{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.ApplicantTypePrimary.ToPointer(),
					},
				},
				SocialLinks: []components.ApplicantSocialLink{
					components.ApplicantSocialLink{
						ID:   types.String("12345"),
						URL:  "https://www.twitter.com/apideck",
						Type: types.String("twitter"),
					},
				},
				StageID:       types.String("12345"),
				RecruiterID:   types.String("12345"),
				CoordinatorID: types.String("12345"),
				ApplicationIds: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Applications: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Followers: []string{
					"a0d636c6-43b3-4bde-8c70-85b707d992f4",
					"a98lfd96-43b3-4bde-8c70-85b707d992e6",
				},
				Sources: []string{
					"Job site",
				},
				SourceID:     types.String("12345"),
				Confidential: types.Bool(false),
				Anonymized:   types.Bool(true),
				Tags: []string{
					"New",
				},
				Archived:          types.Bool(false),
				LastInteractionAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				OwnerID:           types.String("54321"),
				SourcedBy:         types.String("12345"),
				CvURL:             types.String("https://recruitee-main.s3.eu-central-1.amazonaws.com/candidates/36615291/pdf_cv_38swhu4w42k1.pdf?response-content-disposition=inline&response-content-type=application%2Fpdf&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAQYHB7CA5RLR4Y3ON%2F20220514%2Feu-central-1%2Fs3%2Faws4_request&X-Amz-Date=20220514T235654Z&X-Amz-Expires=36000&X-Amz-SignedHeaders=host&X-Amz-Signature=72c0621f5976db75b54de487eb821a8e73480d7f2a6a4a9713ab997944b0561f"),
				RecordURL:         types.String("https://app.intercom.io/contacts/12345"),
				RejectedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				Deleted:           types.Bool(true),
				DeletedBy:         types.String("12345"),
				DeletedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				UpdatedBy:         types.String("12345"),
				CreatedBy:         types.String("12345"),
				UpdatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:         types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
