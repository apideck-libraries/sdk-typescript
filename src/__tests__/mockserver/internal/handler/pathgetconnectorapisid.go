// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetConnectorApisID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "connector.apisOne[0]":
			dir.HandlerFunc("connector.apisOne", testConnectorApisOneConnectorApisOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testConnectorApisOneConnectorApisOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetAPIResponse{
		StatusCode: 200,
		Status:     "OK",
		Data: components.API{
			ID:                  types.String("file-storage"),
			Name:                types.String("File Storage API"),
			Description:         types.String("Manage API keys, access tokens, OAuth flows and integrations."),
			SpecURL:             types.String("https://specs.apideck.com/file-storage.yml"),
			APIReferenceURL:     types.String("https://developers.apideck.com/apis/file-storage/reference"),
			PostmanCollectionID: types.String("1311564-00e7266b-a3d6-4f40-b172-baaa66a3ed6f"),
			Categories: []string{
				"files",
				"file-storage",
				"cloud-storage",
				"object-storage",
			},
			Resources: []components.Resources{
				components.Resources{
					ID:                   types.String("companies"),
					Name:                 types.String("Companies"),
					ExcludedFromCoverage: types.Bool(false),
				},
				components.Resources{
					ID:                   types.String("companies"),
					Name:                 types.String("Companies"),
					ExcludedFromCoverage: types.Bool(false),
				},
				components.Resources{
					ID:                   types.String("companies"),
					Name:                 types.String("Companies"),
					ExcludedFromCoverage: types.Bool(false),
				},
			},
			Events: []string{
				"crm.contact.updated",
				"accounting.invoice.created",
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
