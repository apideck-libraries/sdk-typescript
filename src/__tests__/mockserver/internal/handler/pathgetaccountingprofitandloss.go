// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingProfitAndLoss(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.profitAndLossOne[0]":
			dir.HandlerFunc("accounting.profitAndLossOne", testAccountingProfitAndLossOneAccountingProfitAndLossOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingProfitAndLossOneAccountingProfitAndLossOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetProfitAndLossResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "ProfitAndLosses",
		Operation:  "one",
		Data: components.ProfitAndLoss{
			ID:         types.String("12345"),
			ReportName: "ProfitAndLoss",
			StartDate:  types.String("2017-01-01"),
			EndDate:    types.String("2017-01-31"),
			Currency:   components.CurrencyUsd.ToPointer(),
			Income: components.Income{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Operating Income"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(60000),
				Records: []any{
					map[string]any{
						"id":    "137",
						"title": "Sales of products",
						"code":  "137",
						"type":  "Section",
						"total": 20000,
						"records": []any{
							map[string]any{
								"id":    "13701",
								"title": "Sales of products",
								"code":  "13701",
								"type":  "Record",
								"total": 20000,
							},
						},
					},
					map[string]any{
						"id":    "138",
						"title": "Sales of services",
						"code":  "138",
						"type":  "Section",
						"total": 40000,
						"records": []any{
							map[string]any{
								"id":    "789",
								"code":  "789",
								"title": "Sales of External Services",
								"type":  "Record",
								"total": 10000,
							},
							map[string]any{
								"id":    "101",
								"code":  "101",
								"title": "Sales of Internal Services",
								"type":  "Record",
								"total": 30000,
							},
						},
					},
				},
			},
			CostOfGoodsSold: &components.CostOfGoodsSold{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Cost of Goods Sold"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(12000),
				Records: []any{
					map[string]any{
						"id":    "123",
						"code":  "123",
						"title": "COGS Sales",
						"type":  "Record",
						"total": 12000,
					},
				},
			},
			Expenses: components.Expenses{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Operating Expenses"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(14000),
				Records: []any{
					map[string]any{
						"id":    "137",
						"title": "Maintenance",
						"code":  "137",
						"type":  "Record",
						"total": 1000,
					},
					map[string]any{
						"id":    "138",
						"title": "Rent",
						"code":  "138",
						"type":  "Record",
						"total": 10000,
					},
					map[string]any{
						"id":    "789",
						"code":  "789",
						"title": "Utilities",
						"type":  "Section",
						"total": 3000,
						"records": []any{
							map[string]any{
								"id":    "101",
								"code":  "101",
								"title": "Electricity",
								"type":  "Record",
								"total": 2000,
							},
							map[string]any{
								"id":    "102",
								"code":  "102",
								"title": "Telephone",
								"type":  "Record",
								"total": 1000,
							},
						},
					},
				},
			},
			OtherIncome: &components.OtherIncome{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Other Income"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(3000),
				Records: []any{
					map[string]any{
						"id":    "123",
						"code":  "123",
						"title": "Interest Income",
						"type":  "Record",
						"total": 2000,
					},
					map[string]any{
						"id":    "123",
						"code":  "123",
						"title": "Foreign Exchange Gain",
						"type":  "Record",
						"total": 1000,
					},
				},
			},
			OtherExpenses: &components.OtherExpenses{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Other Expenses"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(1000),
				Records: []any{
					map[string]any{
						"id":    "123",
						"code":  "123",
						"title": "Unrealized Gain/Loss",
						"type":  "Record",
						"total": 1000,
					},
				},
			},
			UncategorizedAccounts: &components.UncategorizedAccounts{
				ID:    types.String("123"),
				Code:  types.String("123"),
				Title: types.String("Uncategorized Accounts"),
				Type:  components.ProfitAndLossTypeSection.ToPointer(),
				Total: types.Float64(0),
				Records: []any{
					map[string]any{
						"id":    "123",
						"code":  "123",
						"title": "Elimination Adjustments",
						"type":  "Record",
						"total": 0,
					},
				},
			},
			GrossProfit: &components.ProfitAndLossIndicator{
				Total: types.Float64(10000),
			},
			NetOperatingIncome: &components.ProfitAndLossIndicator{
				Total: types.Float64(10000),
			},
			NetIncome: &components.ProfitAndLossIndicator{
				Total: types.Float64(10000),
			},
			Customer: types.String("123"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
