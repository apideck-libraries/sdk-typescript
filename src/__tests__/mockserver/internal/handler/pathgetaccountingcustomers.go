// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingCustomers(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.customersAll[0]":
			dir.HandlerFunc("accounting.customersAll", testAccountingCustomersAllAccountingCustomersAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingCustomersAllAccountingCustomersAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetCustomersResponse = &components.GetCustomersResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "xero",
		Resource:   "customers",
		Operation:  "all",
		Data: []components.Customer{
			components.Customer{
				ID:           "12345",
				DownstreamID: types.String("12345"),
				DisplayID:    types.String("EMP00101"),
				DisplayName:  types.String("Windsurf Shop"),
				CompanyName:  types.String("SpaceX"),
				CompanyID:    types.String("12345"),
				Title:        types.String("CEO"),
				FirstName:    types.String("Elon"),
				MiddleName:   types.String("D."),
				LastName:     types.String("Musk"),
				Suffix:       types.String("Jr."),
				Individual:   types.Bool(true),
				Project:      types.Bool(false),
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				Websites: []components.Website{
					components.Website{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.WebsiteTypePrimary.ToPointer(),
					},
				},
				BankAccounts: []components.BankAccount{
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
				},
				Notes: types.String("Some notes about this customer"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				TaxNumber: types.String("US123945459"),
				Currency:  components.CurrencyUsd.ToPointer(),
				Account: &components.LinkedLedgerAccount{
					ID:          types.String("123456"),
					Name:        types.String("Bank account"),
					NominalCode: types.String("N091"),
					Code:        types.String("453"),
				},
				Parent: &components.LinkedParentCustomer{
					ID:   "12345",
					Name: types.String("Windsurf Shop"),
				},
				Status:        components.CustomerStatusActive.ToPointer(),
				PaymentMethod: types.String("cash"),
				Channel:       types.String("email"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2MapOfAny(
							map[string]any{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion: types.String("1-12345"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Customer{
				ID:           "12345",
				DownstreamID: types.String("12345"),
				DisplayID:    types.String("EMP00101"),
				DisplayName:  types.String("Windsurf Shop"),
				CompanyName:  types.String("SpaceX"),
				CompanyID:    types.String("12345"),
				Title:        types.String("CEO"),
				FirstName:    types.String("Elon"),
				MiddleName:   types.String("D."),
				LastName:     types.String("Musk"),
				Suffix:       types.String("Jr."),
				Individual:   types.Bool(true),
				Project:      types.Bool(false),
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				Websites: []components.Website{
					components.Website{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.WebsiteTypePrimary.ToPointer(),
					},
				},
				BankAccounts: []components.BankAccount{
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
				},
				Notes: types.String("Some notes about this customer"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				TaxNumber: types.String("US123945459"),
				Currency:  components.CurrencyUsd.ToPointer(),
				Account: &components.LinkedLedgerAccount{
					ID:          types.String("123456"),
					Name:        types.String("Bank account"),
					NominalCode: types.String("N091"),
					Code:        types.String("453"),
				},
				Parent: &components.LinkedParentCustomer{
					ID:   "12345",
					Name: types.String("Windsurf Shop"),
				},
				Status:        components.CustomerStatusActive.ToPointer(),
				PaymentMethod: types.String("cash"),
				Channel:       types.String("email"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2MapOfAny(
							map[string]any{
								"0": map[string]any{},
								"1": map[string]any{},
							},
						)),
					},
				},
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion: types.String("1-12345"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Customer{
				ID:           "12345",
				DownstreamID: types.String("12345"),
				DisplayID:    types.String("EMP00101"),
				DisplayName:  types.String("Windsurf Shop"),
				CompanyName:  types.String("SpaceX"),
				CompanyID:    types.String("12345"),
				Title:        types.String("CEO"),
				FirstName:    types.String("Elon"),
				MiddleName:   types.String("D."),
				LastName:     types.String("Musk"),
				Suffix:       types.String("Jr."),
				Individual:   types.Bool(true),
				Project:      types.Bool(false),
				Addresses: []components.Address{
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
					components.Address{
						ID:           types.String("123"),
						Type:         components.AddressTypePrimary.ToPointer(),
						String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
						Name:         types.String("HQ US"),
						Line1:        types.String("Main street"),
						Line2:        types.String("apt #"),
						Line3:        types.String("Suite #"),
						Line4:        types.String("delivery instructions"),
						StreetNumber: types.String("25"),
						City:         types.String("San Francisco"),
						State:        types.String("CA"),
						PostalCode:   types.String("94104"),
						Country:      types.String("US"),
						Latitude:     types.String("40.759211"),
						Longitude:    types.String("-73.984638"),
						County:       types.String("Santa Clara"),
						ContactName:  types.String("Elon Musk"),
						Salutation:   types.String("Mr"),
						PhoneNumber:  types.String("111-111-1111"),
						Fax:          types.String("122-111-1111"),
						Email:        types.String("elon@musk.com"),
						Website:      types.String("https://elonmusk.com"),
						Notes:        types.String("Address notes or delivery instructions."),
						RowVersion:   types.String("1-12345"),
					},
				},
				PhoneNumbers: []components.PhoneNumber{
					components.PhoneNumber{
						ID:          types.String("12345"),
						CountryCode: types.String("1"),
						AreaCode:    types.String("323"),
						Number:      "111-111-1111",
						Extension:   types.String("105"),
						Type:        components.PhoneNumberTypePrimary.ToPointer(),
					},
				},
				Emails: []components.Email{
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
					components.Email{
						ID:    types.String("123"),
						Email: types.String("elon@musk.com"),
						Type:  components.EmailTypePrimary.ToPointer(),
					},
				},
				Websites: []components.Website{
					components.Website{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.WebsiteTypePrimary.ToPointer(),
					},
					components.Website{
						ID:   types.String("12345"),
						URL:  "http://example.com",
						Type: components.WebsiteTypePrimary.ToPointer(),
					},
				},
				BankAccounts: []components.BankAccount{
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
					components.BankAccount{
						BankName:         types.String("Monzo"),
						AccountNumber:    types.String("123465"),
						AccountName:      types.String("SPACEX LLC"),
						AccountType:      components.BankAccountAccountTypeCreditCard.ToPointer(),
						Iban:             types.String("CH2989144532982975332"),
						Bic:              types.String("AUDSCHGGXXX"),
						RoutingNumber:    types.String("012345678"),
						BsbNumber:        types.String("062-001"),
						BranchIdentifier: types.String("001"),
						BankCode:         types.String("BNH"),
						Currency:         components.CurrencyUsd.ToPointer(),
					},
				},
				Notes: types.String("Some notes about this customer"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				TaxNumber: types.String("US123945459"),
				Currency:  components.CurrencyUsd.ToPointer(),
				Account: &components.LinkedLedgerAccount{
					ID:          types.String("123456"),
					Name:        types.String("Bank account"),
					NominalCode: types.String("N091"),
					Code:        types.String("453"),
				},
				Parent: &components.LinkedParentCustomer{
					ID:   "12345",
					Name: types.String("Windsurf Shop"),
				},
				Status:        components.CustomerStatusActive.ToPointer(),
				PaymentMethod: types.String("cash"),
				Channel:       types.String("email"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValue2Str(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion: types.String("1-12345"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
