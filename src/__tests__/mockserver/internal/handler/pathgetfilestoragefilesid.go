// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetFileStorageFilesID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "fileStorage.filesOne[0]":
			dir.HandlerFunc("fileStorage.filesOne", testFileStorageFilesOneFileStorageFilesOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testFileStorageFilesOneFileStorageFilesOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetFileResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "google-drive",
		Resource:   "files",
		Operation:  "one",
		Data: components.UnifiedFile{
			ID:           "12345",
			DownstreamID: types.String("12345"),
			Name:         types.String("sample.jpg"),
			Description:  types.String("A sample image"),
			Type:         components.FileTypeFile.ToPointer(),
			Path:         types.String("/Documents/sample.jpg"),
			MimeType:     types.String("image/jpeg"),
			Size:         types.Int64(1810673),
			Owner: &components.Owner{
				ID:    types.String("12345"),
				Email: types.String("hello@apideck.com"),
				Name:  types.String("Elon Musk"),
			},
			ParentFolders: []components.LinkedFolder{
				components.LinkedFolder{
					ID:   "12345",
					Name: types.String("Personal"),
				},
				components.LinkedFolder{
					ID:   "12345",
					Name: types.String("Personal"),
				},
				components.LinkedFolder{
					ID:   "12345",
					Name: types.String("Personal"),
				},
			},
			ExportFormats: []string{
				"application/pdf",
				"application/vnd.oasis.opendocument.presentation",
				"text/plain",
			},
			UpdatedBy: types.String("12345"),
			CreatedBy: types.String("12345"),
			UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
