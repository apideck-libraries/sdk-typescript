// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetCrmOpportunities(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "crm.opportunitiesAll[0]":
			dir.HandlerFunc("crm.opportunitiesAll", testCrmOpportunitiesAllCrmOpportunitiesAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCrmOpportunitiesAllCrmOpportunitiesAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetOpportunitiesResponse = &components.GetOpportunitiesResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "zoho-crm",
		Resource:   "opportunities",
		Operation:  "all",
		Data: []components.Opportunity{
			components.Opportunity{
				ID:               types.String("12345"),
				Title:            "New Rocket",
				PrimaryContactID: types.String("12345"),
				Description:      types.String("Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines."),
				Type:             types.String("Existing Customer - Upgrade"),
				MonetaryAmount:   types.Float64(75000),
				Currency:         components.CurrencyUsd.ToPointer(),
				WinProbability:   types.Float64(40),
				ExpectedRevenue:  types.Float64(75000),
				CloseDate:        types.MustNewDateFromString("2020-10-30"),
				LossReasonID:     types.String("12345"),
				LossReason:       types.String("No budget"),
				WonReasonID:      types.String("12345"),
				WonReason:        types.String("Best pitch"),
				PipelineID:       types.String("12345"),
				PipelineStageID:  types.String("12345"),
				SourceID:         types.String("12345"),
				LeadID:           types.String("12345"),
				LeadSource:       types.String("Website"),
				ContactID:        types.String("12345"),
				ContactIds: []string{
					"12345",
				},
				CompanyID:   types.String("12345"),
				CompanyName: types.String("Copper"),
				OwnerID:     types.String("12345"),
				Priority:    types.String("None"),
				Status:      types.String("Open"),
				StatusID:    types.String("12345"),
				Tags: []string{
					"New",
				},
				InteractionCount: types.Float64(0),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
							10,
						)),
					},
				},
				StageLastChangedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				LastActivityAt:     types.String("2020-09-30T07:43:32.000Z"),
				Deleted:            types.Bool(false),
				DateStageChanged:   types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLastContacted:  types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLeadCreated:    types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				UpdatedBy:          types.String("12345"),
				CreatedBy:          types.String("12345"),
				UpdatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Opportunity{
				ID:               types.String("12345"),
				Title:            "New Rocket",
				PrimaryContactID: types.String("12345"),
				Description:      types.String("Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines."),
				Type:             types.String("Existing Customer - Upgrade"),
				MonetaryAmount:   types.Float64(75000),
				Currency:         components.CurrencyUsd.ToPointer(),
				WinProbability:   types.Float64(40),
				ExpectedRevenue:  types.Float64(75000),
				CloseDate:        types.MustNewDateFromString("2020-10-30"),
				LossReasonID:     types.String("12345"),
				LossReason:       types.String("No budget"),
				WonReasonID:      types.String("12345"),
				WonReason:        types.String("Best pitch"),
				PipelineID:       types.String("12345"),
				PipelineStageID:  types.String("12345"),
				SourceID:         types.String("12345"),
				LeadID:           types.String("12345"),
				LeadSource:       types.String("Website"),
				ContactID:        types.String("12345"),
				ContactIds: []string{
					"12345",
				},
				CompanyID:   types.String("12345"),
				CompanyName: types.String("Copper"),
				OwnerID:     types.String("12345"),
				Priority:    types.String("None"),
				Status:      types.String("Open"),
				StatusID:    types.String("12345"),
				Tags: []string{
					"New",
				},
				InteractionCount: types.Float64(0),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
				},
				StageLastChangedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				LastActivityAt:     types.String("2020-09-30T07:43:32.000Z"),
				Deleted:            types.Bool(false),
				DateStageChanged:   types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLastContacted:  types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLeadCreated:    types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				UpdatedBy:          types.String("12345"),
				CreatedBy:          types.String("12345"),
				UpdatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.Opportunity{
				ID:               types.String("12345"),
				Title:            "New Rocket",
				PrimaryContactID: types.String("12345"),
				Description:      types.String("Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines."),
				Type:             types.String("Existing Customer - Upgrade"),
				MonetaryAmount:   types.Float64(75000),
				Currency:         components.CurrencyUsd.ToPointer(),
				WinProbability:   types.Float64(40),
				ExpectedRevenue:  types.Float64(75000),
				CloseDate:        types.MustNewDateFromString("2020-10-30"),
				LossReasonID:     types.String("12345"),
				LossReason:       types.String("No budget"),
				WonReasonID:      types.String("12345"),
				WonReason:        types.String("Best pitch"),
				PipelineID:       types.String("12345"),
				PipelineStageID:  types.String("12345"),
				SourceID:         types.String("12345"),
				LeadID:           types.String("12345"),
				LeadSource:       types.String("Website"),
				ContactID:        types.String("12345"),
				ContactIds: []string{
					"12345",
				},
				CompanyID:   types.String("12345"),
				CompanyName: types.String("Copper"),
				OwnerID:     types.String("12345"),
				Priority:    types.String("None"),
				Status:      types.String("Open"),
				StatusID:    types.String("12345"),
				Tags: []string{
					"New",
				},
				InteractionCount: types.Float64(0),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				StageLastChangedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				LastActivityAt:     types.String("2020-09-30T07:43:32.000Z"),
				Deleted:            types.Bool(false),
				DateStageChanged:   types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLastContacted:  types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				DateLeadCreated:    types.MustNewTimeFromString("2020-09-30T00:00:00.000Z"),
				UpdatedBy:          types.String("12345"),
				CreatedBy:          types.String("12345"),
				UpdatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:          types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
