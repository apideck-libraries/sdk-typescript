// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPatchVaultConnectionsUnifiedAPIServiceIDConsent(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "vault.connectionConsentUpdate[0]":
			dir.HandlerFunc("vault.connectionConsentUpdate", testVaultConnectionConsentUpdateVaultConnectionConsentUpdate0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testVaultConnectionConsentUpdateVaultConnectionConsentUpdate0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.UpdateConsentResponse = &components.UpdateConsentResponse{
		StatusCode: 200,
		Status:     "OK",
		Data: components.ConsentRecord{
			ID:        "con_1234567890",
			CreatedAt: "2025-04-15T14:30:00Z",
			Granted:   true,
			Resources: components.CreateDataScopesResourcesUnionMapOfMapOfDataScopesResources(
				map[string]map[string]components.DataScopesResources{
					"hris.employees": map[string]components.DataScopesResources{
						"id": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
						"first_name": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(true),
						},
						"last_name": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(true),
						},
						"email": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(true),
						},
						"addresses[].street": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
						"addresses[].city": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
						"employment.job_title": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(true),
						},
						"custom_fields[].employee_number": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
					},
					"hris.departments": map[string]components.DataScopesResources{
						"id": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
						"name": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(true),
						},
						"code": components.DataScopesResources{
							Read:  types.Bool(true),
							Write: types.Bool(false),
						},
					},
				},
			),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
