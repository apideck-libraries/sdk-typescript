// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingProjectsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.projectsOne[0]":
			dir.HandlerFunc("accounting.projectsOne", testAccountingProjectsOneAccountingProjectsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingProjectsOneAccountingProjectsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetProjectResponse = &components.GetProjectResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "Projects",
		Operation:  "one",
		Data: components.Project{
			ID:                   types.String("12345"),
			DownstreamID:         types.String("12345"),
			Name:                 "Website Redesign Project",
			DisplayID:            types.String("PROJ-001"),
			ReferenceID:          types.String("WD-REF-2024-001"),
			Description:          types.String("Complete redesign of the company website including new branding and improved user experience"),
			Status:               components.ProjectProjectStatusActive.ToPointer(),
			Active:               types.Bool(true),
			ProjectType:          components.ProjectTypeClientProject.ToPointer(),
			Priority:             components.ProjectPriorityHigh.ToPointer(),
			CompletionPercentage: types.Float64(75.5),
			StartDate:            types.MustNewDateFromString("2024-01-15"),
			EndDate:              types.MustNewDateFromString("2024-06-30"),
			Customer: &components.LinkedCustomer{
				ID:          types.String("12345"),
				DisplayID:   types.String("CUST00101"),
				DisplayName: types.String("Windsurf Shop"),
				CompanyName: types.String("The boring company"),
				Email:       types.String("boring@boring.com"),
			},
			Department: &components.ProjectDepartment{
				ID:   types.String("DEPT-001"),
				Name: types.String("Marketing"),
			},
			CompanyID: types.String("12345"),
			OwnerID:   types.String("12345"),
			ParentProject: &components.ParentProject{
				ID:   types.String("PROJ-PARENT-001"),
				Name: types.String("Company Website Overhaul"),
			},
			Currency:       components.CurrencyUsd.ToPointer(),
			BudgetAmount:   types.Float64(50000),
			ApprovedAmount: types.Float64(48000),
			ActualAmount:   types.Float64(45250.75),
			BudgetHours:    types.Float64(400),
			ActualHours:    types.Float64(385.5),
			HourlyRate:     types.Float64(125),
			BillingMethod:  components.BillingMethodTimeAndMaterials.ToPointer(),
			IsBillable:     types.Bool(true),
			Phase:          components.ProjectPhaseExecution.ToPointer(),
			TaxRate: &components.LinkedTaxRate{
				ID:   types.String("123456"),
				Code: types.String("N-T"),
				Name: types.String("GST on Purchases"),
				Rate: types.Float64(10),
			},
			TrackingCategories: []*components.LinkedTrackingCategory{
				&components.LinkedTrackingCategory{
					ID:         types.String("123456"),
					Name:       types.String("New York"),
					ParentID:   types.String("123456"),
					ParentName: types.String("New York"),
				},
			},
			Tags: []string{
				"website",
				"redesign",
				"urgent",
			},
			Notes:          types.String("Client has requested modern design with mobile-first approach"),
			ContractNumber: types.String("CNT-2024-001"),
			ProfitMargin:   types.Float64(15.5),
			ScheduleStatus: components.ScheduleStatusOnSchedule.ToPointer(),
			Addresses: []components.Address{
				components.Address{
					ID:           types.String("123"),
					Type:         components.AddressTypePrimary.ToPointer(),
					String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
					Name:         types.String("HQ US"),
					Line1:        types.String("Main street"),
					Line2:        types.String("apt #"),
					Line3:        types.String("Suite #"),
					Line4:        types.String("delivery instructions"),
					Line5:        types.String("Attention: Finance Dept"),
					StreetNumber: types.String("25"),
					City:         types.String("San Francisco"),
					State:        types.String("CA"),
					PostalCode:   types.String("94104"),
					Country:      types.String("US"),
					Latitude:     types.String("40.759211"),
					Longitude:    types.String("-73.984638"),
					County:       types.String("Santa Clara"),
					ContactName:  types.String("Elon Musk"),
					Salutation:   types.String("Mr"),
					PhoneNumber:  types.String("111-111-1111"),
					Fax:          types.String("122-111-1111"),
					Email:        types.String("elon@musk.com"),
					Website:      types.String("https://elonmusk.com"),
					Notes:        types.String("Address notes or delivery instructions."),
					RowVersion:   types.String("1-12345"),
				},
			},
			TeamSize: types.Int64(8),
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValue2Str(
						"Uses Salesforce and Marketo",
					)),
				},
			},
			RowVersion: types.String("1-12345"),
			UpdatedBy:  types.String("12345"),
			CreatedBy:  types.String("12345"),
			CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
