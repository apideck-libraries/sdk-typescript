// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingJournalEntries(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.journalEntriesAll[0]":
			dir.HandlerFunc("accounting.journalEntriesAll", testAccountingJournalEntriesAllAccountingJournalEntriesAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingJournalEntriesAllAccountingJournalEntriesAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetJournalEntriesResponse = &components.GetJournalEntriesResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "quickbooks",
		Resource:   "journal-entries",
		Operation:  "all",
		Data: []components.JournalEntry{
			components.JournalEntry{
				ID:           types.String("12345"),
				Title:        types.String("Purchase Invoice-Inventory (USD): 2019/02/01 Batch Summary Entry"),
				CurrencyRate: types.Float64(0.69),
				Currency:     components.CurrencyUsd.ToPointer(),
				CompanyID:    types.String("12345"),
				LineItems: []components.JournalEntryLineItem{
					components.JournalEntryLineItem{
						ID:          types.String("12345"),
						Description: types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
						TaxAmount:   types.Float64(27500),
						SubTotal:    types.Float64(27500),
						TotalAmount: types.Float64(27500),
						Type:        components.JournalEntryLineItemTypeDebit,
						TaxRate: &components.LinkedTaxRate{
							ID:   types.String("123456"),
							Code: types.String("N-T"),
							Name: types.String("GST on Purchases"),
							Rate: types.Float64(10),
						},
						TrackingCategories: []*components.LinkedTrackingCategory{
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
						},
						LedgerAccount: &components.LinkedLedgerAccount{
							ID:          types.String("123456"),
							Name:        types.String("Bank account"),
							NominalCode: types.String("N091"),
							Code:        types.String("453"),
						},
						Customer: &components.LinkedCustomer{
							ID:          types.String("12345"),
							DisplayID:   types.String("CUST00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Email:       types.String("boring@boring.com"),
						},
						Supplier: &components.LinkedSupplier{
							ID:          types.String("12345"),
							DisplayID:   types.String("SUPP00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Address: &components.Address{
								ID:           types.String("123"),
								Type:         components.AddressTypePrimary.ToPointer(),
								String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
								Name:         types.String("HQ US"),
								Line1:        types.String("Main street"),
								Line2:        types.String("apt #"),
								Line3:        types.String("Suite #"),
								Line4:        types.String("delivery instructions"),
								StreetNumber: types.String("25"),
								City:         types.String("San Francisco"),
								State:        types.String("CA"),
								PostalCode:   types.String("94104"),
								Country:      types.String("US"),
								Latitude:     types.String("40.759211"),
								Longitude:    types.String("-73.984638"),
								County:       types.String("Santa Clara"),
								ContactName:  types.String("Elon Musk"),
								Salutation:   types.String("Mr"),
								PhoneNumber:  types.String("111-111-1111"),
								Fax:          types.String("122-111-1111"),
								Email:        types.String("elon@musk.com"),
								Website:      types.String("https://elonmusk.com"),
								Notes:        types.String("Address notes or delivery instructions."),
								RowVersion:   types.String("1-12345"),
							},
						},
						DepartmentID: types.String("12345"),
						LocationID:   types.String("12345"),
						LineNumber:   types.Int64(1),
					},
					components.JournalEntryLineItem{
						ID:          types.String("12345"),
						Description: types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
						TaxAmount:   types.Float64(27500),
						SubTotal:    types.Float64(27500),
						TotalAmount: types.Float64(27500),
						Type:        components.JournalEntryLineItemTypeDebit,
						TaxRate: &components.LinkedTaxRate{
							ID:   types.String("123456"),
							Code: types.String("N-T"),
							Name: types.String("GST on Purchases"),
							Rate: types.Float64(10),
						},
						TrackingCategories: []*components.LinkedTrackingCategory{
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
						},
						LedgerAccount: &components.LinkedLedgerAccount{
							ID:          types.String("123456"),
							Name:        types.String("Bank account"),
							NominalCode: types.String("N091"),
							Code:        types.String("453"),
						},
						Customer: &components.LinkedCustomer{
							ID:          types.String("12345"),
							DisplayID:   types.String("CUST00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Email:       types.String("boring@boring.com"),
						},
						Supplier: &components.LinkedSupplier{
							ID:          types.String("12345"),
							DisplayID:   types.String("SUPP00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Address: &components.Address{
								ID:           types.String("123"),
								Type:         components.AddressTypePrimary.ToPointer(),
								String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
								Name:         types.String("HQ US"),
								Line1:        types.String("Main street"),
								Line2:        types.String("apt #"),
								Line3:        types.String("Suite #"),
								Line4:        types.String("delivery instructions"),
								StreetNumber: types.String("25"),
								City:         types.String("San Francisco"),
								State:        types.String("CA"),
								PostalCode:   types.String("94104"),
								Country:      types.String("US"),
								Latitude:     types.String("40.759211"),
								Longitude:    types.String("-73.984638"),
								County:       types.String("Santa Clara"),
								ContactName:  types.String("Elon Musk"),
								Salutation:   types.String("Mr"),
								PhoneNumber:  types.String("111-111-1111"),
								Fax:          types.String("122-111-1111"),
								Email:        types.String("elon@musk.com"),
								Website:      types.String("https://elonmusk.com"),
								Notes:        types.String("Address notes or delivery instructions."),
								RowVersion:   types.String("1-12345"),
							},
						},
						DepartmentID: types.String("12345"),
						LocationID:   types.String("12345"),
						LineNumber:   types.Int64(1),
					},
				},
				Memo:          types.String("Thank you for your business and have a great day!"),
				PostedAt:      types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				JournalSymbol: types.String("IND"),
				TaxType:       types.String("sales"),
				TaxCode:       types.String("1234"),
				Number:        types.String("OIT00546"),
				TrackingCategories: []*components.LinkedTrackingCategory{
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
				},
				AccountingPeriod: types.String("01-24"),
				UpdatedBy:        types.String("12345"),
				CreatedBy:        types.String("12345"),
				UpdatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion:       types.String("1-12345"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
				},
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.JournalEntry{
				ID:           types.String("12345"),
				Title:        types.String("Purchase Invoice-Inventory (USD): 2019/02/01 Batch Summary Entry"),
				CurrencyRate: types.Float64(0.69),
				Currency:     components.CurrencyUsd.ToPointer(),
				CompanyID:    types.String("12345"),
				LineItems: []components.JournalEntryLineItem{
					components.JournalEntryLineItem{
						ID:          types.String("12345"),
						Description: types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
						TaxAmount:   types.Float64(27500),
						SubTotal:    types.Float64(27500),
						TotalAmount: types.Float64(27500),
						Type:        components.JournalEntryLineItemTypeDebit,
						TaxRate: &components.LinkedTaxRate{
							ID:   types.String("123456"),
							Code: types.String("N-T"),
							Name: types.String("GST on Purchases"),
							Rate: types.Float64(10),
						},
						TrackingCategories: []*components.LinkedTrackingCategory{
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
						},
						LedgerAccount: &components.LinkedLedgerAccount{
							ID:          types.String("123456"),
							Name:        types.String("Bank account"),
							NominalCode: types.String("N091"),
							Code:        types.String("453"),
						},
						Customer: &components.LinkedCustomer{
							ID:          types.String("12345"),
							DisplayID:   types.String("CUST00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Email:       types.String("boring@boring.com"),
						},
						Supplier: &components.LinkedSupplier{
							ID:          types.String("12345"),
							DisplayID:   types.String("SUPP00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Address: &components.Address{
								ID:           types.String("123"),
								Type:         components.AddressTypePrimary.ToPointer(),
								String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
								Name:         types.String("HQ US"),
								Line1:        types.String("Main street"),
								Line2:        types.String("apt #"),
								Line3:        types.String("Suite #"),
								Line4:        types.String("delivery instructions"),
								StreetNumber: types.String("25"),
								City:         types.String("San Francisco"),
								State:        types.String("CA"),
								PostalCode:   types.String("94104"),
								Country:      types.String("US"),
								Latitude:     types.String("40.759211"),
								Longitude:    types.String("-73.984638"),
								County:       types.String("Santa Clara"),
								ContactName:  types.String("Elon Musk"),
								Salutation:   types.String("Mr"),
								PhoneNumber:  types.String("111-111-1111"),
								Fax:          types.String("122-111-1111"),
								Email:        types.String("elon@musk.com"),
								Website:      types.String("https://elonmusk.com"),
								Notes:        types.String("Address notes or delivery instructions."),
								RowVersion:   types.String("1-12345"),
							},
						},
						DepartmentID: types.String("12345"),
						LocationID:   types.String("12345"),
						LineNumber:   types.Int64(1),
					},
				},
				Memo:          types.String("Thank you for your business and have a great day!"),
				PostedAt:      types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				JournalSymbol: types.String("IND"),
				TaxType:       types.String("sales"),
				TaxCode:       types.String("1234"),
				Number:        types.String("OIT00546"),
				TrackingCategories: []*components.LinkedTrackingCategory{
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
				},
				AccountingPeriod: types.String("01-24"),
				UpdatedBy:        types.String("12345"),
				CreatedBy:        types.String("12345"),
				UpdatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion:       types.String("1-12345"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionCustomFieldValue1(
							components.CustomFieldValue1{},
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
				},
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.JournalEntry{
				ID:           types.String("12345"),
				Title:        types.String("Purchase Invoice-Inventory (USD): 2019/02/01 Batch Summary Entry"),
				CurrencyRate: types.Float64(0.69),
				Currency:     components.CurrencyUsd.ToPointer(),
				CompanyID:    types.String("12345"),
				LineItems: []components.JournalEntryLineItem{
					components.JournalEntryLineItem{
						ID:          types.String("12345"),
						Description: types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
						TaxAmount:   types.Float64(27500),
						SubTotal:    types.Float64(27500),
						TotalAmount: types.Float64(27500),
						Type:        components.JournalEntryLineItemTypeDebit,
						TaxRate: &components.LinkedTaxRate{
							ID:   types.String("123456"),
							Code: types.String("N-T"),
							Name: types.String("GST on Purchases"),
							Rate: types.Float64(10),
						},
						TrackingCategories: []*components.LinkedTrackingCategory{
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
						},
						LedgerAccount: &components.LinkedLedgerAccount{
							ID:          types.String("123456"),
							Name:        types.String("Bank account"),
							NominalCode: types.String("N091"),
							Code:        types.String("453"),
						},
						Customer: &components.LinkedCustomer{
							ID:          types.String("12345"),
							DisplayID:   types.String("CUST00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Email:       types.String("boring@boring.com"),
						},
						Supplier: &components.LinkedSupplier{
							ID:          types.String("12345"),
							DisplayID:   types.String("SUPP00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Address: &components.Address{
								ID:           types.String("123"),
								Type:         components.AddressTypePrimary.ToPointer(),
								String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
								Name:         types.String("HQ US"),
								Line1:        types.String("Main street"),
								Line2:        types.String("apt #"),
								Line3:        types.String("Suite #"),
								Line4:        types.String("delivery instructions"),
								StreetNumber: types.String("25"),
								City:         types.String("San Francisco"),
								State:        types.String("CA"),
								PostalCode:   types.String("94104"),
								Country:      types.String("US"),
								Latitude:     types.String("40.759211"),
								Longitude:    types.String("-73.984638"),
								County:       types.String("Santa Clara"),
								ContactName:  types.String("Elon Musk"),
								Salutation:   types.String("Mr"),
								PhoneNumber:  types.String("111-111-1111"),
								Fax:          types.String("122-111-1111"),
								Email:        types.String("elon@musk.com"),
								Website:      types.String("https://elonmusk.com"),
								Notes:        types.String("Address notes or delivery instructions."),
								RowVersion:   types.String("1-12345"),
							},
						},
						DepartmentID: types.String("12345"),
						LocationID:   types.String("12345"),
						LineNumber:   types.Int64(1),
					},
					components.JournalEntryLineItem{
						ID:          types.String("12345"),
						Description: types.String("Model Y is a fully electric, mid-size SUV, with seating for up to seven, dual motor AWD and unparalleled protection."),
						TaxAmount:   types.Float64(27500),
						SubTotal:    types.Float64(27500),
						TotalAmount: types.Float64(27500),
						Type:        components.JournalEntryLineItemTypeDebit,
						TaxRate: &components.LinkedTaxRate{
							ID:   types.String("123456"),
							Code: types.String("N-T"),
							Name: types.String("GST on Purchases"),
							Rate: types.Float64(10),
						},
						TrackingCategories: []*components.LinkedTrackingCategory{
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
							&components.LinkedTrackingCategory{
								ID:   types.String("123456"),
								Name: types.String("New York"),
							},
						},
						LedgerAccount: &components.LinkedLedgerAccount{
							ID:          types.String("123456"),
							Name:        types.String("Bank account"),
							NominalCode: types.String("N091"),
							Code:        types.String("453"),
						},
						Customer: &components.LinkedCustomer{
							ID:          types.String("12345"),
							DisplayID:   types.String("CUST00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Email:       types.String("boring@boring.com"),
						},
						Supplier: &components.LinkedSupplier{
							ID:          types.String("12345"),
							DisplayID:   types.String("SUPP00101"),
							DisplayName: types.String("Windsurf Shop"),
							CompanyName: types.String("The boring company"),
							Address: &components.Address{
								ID:           types.String("123"),
								Type:         components.AddressTypePrimary.ToPointer(),
								String:       types.String("25 Spring Street, Blackburn, VIC 3130"),
								Name:         types.String("HQ US"),
								Line1:        types.String("Main street"),
								Line2:        types.String("apt #"),
								Line3:        types.String("Suite #"),
								Line4:        types.String("delivery instructions"),
								StreetNumber: types.String("25"),
								City:         types.String("San Francisco"),
								State:        types.String("CA"),
								PostalCode:   types.String("94104"),
								Country:      types.String("US"),
								Latitude:     types.String("40.759211"),
								Longitude:    types.String("-73.984638"),
								County:       types.String("Santa Clara"),
								ContactName:  types.String("Elon Musk"),
								Salutation:   types.String("Mr"),
								PhoneNumber:  types.String("111-111-1111"),
								Fax:          types.String("122-111-1111"),
								Email:        types.String("elon@musk.com"),
								Website:      types.String("https://elonmusk.com"),
								Notes:        types.String("Address notes or delivery instructions."),
								RowVersion:   types.String("1-12345"),
							},
						},
						DepartmentID: types.String("12345"),
						LocationID:   types.String("12345"),
						LineNumber:   types.Int64(1),
					},
				},
				Memo:          types.String("Thank you for your business and have a great day!"),
				PostedAt:      types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				JournalSymbol: types.String("IND"),
				TaxType:       types.String("sales"),
				TaxCode:       types.String("1234"),
				Number:        types.String("OIT00546"),
				TrackingCategories: []*components.LinkedTrackingCategory{
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
					&components.LinkedTrackingCategory{
						ID:   types.String("123456"),
						Name: types.String("New York"),
					},
				},
				AccountingPeriod: types.String("01-24"),
				UpdatedBy:        types.String("12345"),
				CreatedBy:        types.String("12345"),
				UpdatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:        types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				RowVersion:       types.String("1-12345"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionBoolean(
							true,
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
							10,
						)),
					},
				},
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
