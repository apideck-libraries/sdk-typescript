// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingBankAccountsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.bankAccountsOne[0]":
			dir.HandlerFunc("accounting.bankAccountsOne", testAccountingBankAccountsOneAccountingBankAccountsOne0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingBankAccountsOneAccountingBankAccountsOne0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.GetBankAccountResponse = &components.GetBankAccountResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    types.String("quickbooks"),
		Resource:   types.String("bank-accounts"),
		Operation:  types.String("one"),
		Data: components.AccountingBankAccount{
			ID:            "12345",
			DisplayID:     types.String("BA-001"),
			Name:          types.String("Main Operating Account"),
			AccountNumber: types.String("123465"),
			AccountType:   components.AccountingBankAccountAccountTypeChecking.ToPointer(),
			LedgerAccount: &components.LinkedLedgerAccount{
				ID:          types.String("123456"),
				Name:        types.String("Bank account"),
				NominalCode: types.String("N091"),
				Code:        types.String("453"),
				ParentID:    types.String("123456"),
				DisplayID:   types.String("123456"),
			},
			BankName:         types.String("Chase Bank"),
			Currency:         components.CurrencyUsd.ToPointer(),
			Balance:          types.Float64(25000),
			AvailableBalance: types.Float64(24500),
			OverdraftLimit:   types.Float64(5000),
			RoutingNumber:    types.String("021000021"),
			Iban:             types.String("GB33BUKB20201555555555"),
			Bic:              types.String("CHASUS33"),
			BsbNumber:        types.String("062-001"),
			BranchIdentifier: types.String("001"),
			BankCode:         types.String("BNH"),
			Country:          types.String("US"),
			Status:           components.AccountingBankAccountStatusActive.ToPointer(),
			Description:      types.String("Primary operating account for daily transactions"),
			CustomFields: []components.CustomField{
				components.CustomField{
					ID:          types.String("2389328923893298"),
					Name:        types.String("employee_level"),
					Description: types.String("Employee Level"),
					Value: types.Pointer(components.CreateCustomFieldValue2Str(
						"Uses Salesforce and Marketo",
					)),
				},
			},
			CreatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			UpdatedAt: types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
			CreatedBy: types.String("12345"),
			UpdatedBy: types.String("12345"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
