// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetAccountingLedgerAccounts(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "accounting.ledgerAccountsAll[0]":
			dir.HandlerFunc("accounting.ledgerAccountsAll", testAccountingLedgerAccountsAllAccountingLedgerAccountsAll0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAccountingLedgerAccountsAllAccountingLedgerAccountsAll0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetLedgerAccountsResponse{
		StatusCode: 200,
		Status:     "OK",
		Service:    "xero",
		Resource:   "ledger-accounts",
		Operation:  "all",
		Data: []components.LedgerAccount{
			components.LedgerAccount{
				ID:                 types.String("12345"),
				DisplayID:          types.String("1-12345"),
				Code:               types.String("453"),
				Classification:     components.ClassificationAsset.ToPointer(),
				Type:               components.LedgerAccountTypeBank.ToPointer(),
				SubType:            types.String("CHECKING_ACCOUNT"),
				Name:               types.String("Bank account"),
				FullyQualifiedName: types.String("Asset.Bank.Checking_Account"),
				Description:        types.String("Main checking account"),
				OpeningBalance:     types.Float64(75000),
				CurrentBalance:     types.Float64(20000),
				Currency:           components.CurrencyUsd.ToPointer(),
				TaxType:            types.String("NONE"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				Level:  types.Float64(1),
				Active: types.Bool(true),
				Status: components.AccountStatusActive.ToPointer(),
				Header: types.Bool(true),
				BankAccount: &components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
				Categories: []components.LedgerAccountCategory{
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
				},
				ParentAccount: &components.ParentAccount{
					ID:        types.String("12345"),
					Name:      types.String("Bank Accounts"),
					DisplayID: types.String("1-1100"),
				},
				SubAccount: types.Bool(false),
				SubAccounts: []components.SubAccount{
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
				},
				LastReconciliationDate: types.MustNewDateFromString("2020-09-30"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionNumber(
							10,
						)),
					},
				},
				RowVersion: types.String("1-12345"),
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.LedgerAccount{
				ID:                 types.String("12345"),
				DisplayID:          types.String("1-12345"),
				Code:               types.String("453"),
				Classification:     components.ClassificationAsset.ToPointer(),
				Type:               components.LedgerAccountTypeBank.ToPointer(),
				SubType:            types.String("CHECKING_ACCOUNT"),
				Name:               types.String("Bank account"),
				FullyQualifiedName: types.String("Asset.Bank.Checking_Account"),
				Description:        types.String("Main checking account"),
				OpeningBalance:     types.Float64(75000),
				CurrentBalance:     types.Float64(20000),
				Currency:           components.CurrencyUsd.ToPointer(),
				TaxType:            types.String("NONE"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				Level:  types.Float64(1),
				Active: types.Bool(true),
				Status: components.AccountStatusActive.ToPointer(),
				Header: types.Bool(true),
				BankAccount: &components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
				Categories: []components.LedgerAccountCategory{
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
				},
				ParentAccount: &components.ParentAccount{
					ID:        types.String("12345"),
					Name:      types.String("Bank Accounts"),
					DisplayID: types.String("1-1100"),
				},
				SubAccount: types.Bool(false),
				SubAccounts: []components.SubAccount{
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
				},
				LastReconciliationDate: types.MustNewDateFromString("2020-09-30"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionStr(
							"Uses Salesforce and Marketo",
						)),
					},
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionArrayOfStr(
							[]string{
								"<value>",
								"<value>",
							},
						)),
					},
				},
				RowVersion: types.String("1-12345"),
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
			components.LedgerAccount{
				ID:                 types.String("12345"),
				DisplayID:          types.String("1-12345"),
				Code:               types.String("453"),
				Classification:     components.ClassificationAsset.ToPointer(),
				Type:               components.LedgerAccountTypeBank.ToPointer(),
				SubType:            types.String("CHECKING_ACCOUNT"),
				Name:               types.String("Bank account"),
				FullyQualifiedName: types.String("Asset.Bank.Checking_Account"),
				Description:        types.String("Main checking account"),
				OpeningBalance:     types.Float64(75000),
				CurrentBalance:     types.Float64(20000),
				Currency:           components.CurrencyUsd.ToPointer(),
				TaxType:            types.String("NONE"),
				TaxRate: &components.LinkedTaxRate{
					ID:   types.String("123456"),
					Code: types.String("N-T"),
					Name: types.String("GST on Purchases"),
					Rate: types.Float64(10),
				},
				Level:  types.Float64(1),
				Active: types.Bool(true),
				Status: components.AccountStatusActive.ToPointer(),
				Header: types.Bool(true),
				BankAccount: &components.BankAccount{
					BankName:         types.String("Monzo"),
					AccountNumber:    types.String("123465"),
					AccountName:      types.String("SPACEX LLC"),
					AccountType:      components.AccountTypeCreditCard.ToPointer(),
					Iban:             types.String("CH2989144532982975332"),
					Bic:              types.String("AUDSCHGGXXX"),
					RoutingNumber:    types.String("012345678"),
					BsbNumber:        types.String("062-001"),
					BranchIdentifier: types.String("001"),
					BankCode:         types.String("BNH"),
					Currency:         components.CurrencyUsd.ToPointer(),
				},
				Categories: []components.LedgerAccountCategory{
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
					components.LedgerAccountCategory{
						ID:   types.String("12345"),
						Name: types.String("Finance Charges Expense"),
					},
				},
				ParentAccount: &components.ParentAccount{
					ID:        types.String("12345"),
					Name:      types.String("Bank Accounts"),
					DisplayID: types.String("1-1100"),
				},
				SubAccount: types.Bool(false),
				SubAccounts: []components.SubAccount{
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
					components.SubAccount{
						ID:             types.String("12345"),
						AccountSubName: types.String("Petty Cash"),
					},
				},
				LastReconciliationDate: types.MustNewDateFromString("2020-09-30"),
				CustomFields: []components.CustomField{
					components.CustomField{
						ID:          types.String("2389328923893298"),
						Name:        types.String("employee_level"),
						Description: types.String("Employee Level"),
						Value: types.Pointer(components.CreateCustomFieldValueUnionArrayOfCustomFieldValue2(
							[]components.CustomFieldValue2{
								components.CustomFieldValue2{},
								components.CustomFieldValue2{},
							},
						)),
					},
				},
				RowVersion: types.String("1-12345"),
				UpdatedBy:  types.String("12345"),
				CreatedBy:  types.String("12345"),
				UpdatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				CreatedAt:  types.MustNewTimeFromString("2020-09-30T07:43:32.000Z"),
				PassThrough: []components.PassThroughBody{
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
					components.PassThroughBody{
						ServiceID: "<id>",
						ExtendPaths: []components.ExtendPath{
							components.ExtendPath{
								Path: "$.nested.property",
								Value: map[string]any{
									"TaxClassificationRef": map[string]any{
										"value": "EUC-99990201-V1-00020000",
									},
								},
							},
						},
					},
				},
			},
		},
		Meta: &components.Meta{
			ItemsOnPage: types.Int64(50),
			Cursors: &components.Cursors{
				Previous: types.String("em9oby1jcm06OnBhZ2U6OjE="),
				Current:  types.String("em9oby1jcm06OnBhZ2U6OjI="),
				Next:     types.String("em9oby1jcm06OnBhZ2U6OjM="),
			},
		},
		Links: &components.Links{
			Previous: types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"),
			Current:  types.String("https://unify.apideck.com/crm/companies"),
			Next:     types.String("https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
