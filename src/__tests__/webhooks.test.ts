/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Webhooks Webhook Webhooks All", async () => {
  const testHttpClient = createTestHTTPClient("webhook.webhooksAll");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.webhook.webhooks.list({});
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getWebhooksResponse).toBeDefined();
  expect(result.getWebhooksResponse).toEqual({
    statusCode: 200,
    status: "OK",
    data: [
      {
        id: "1234",
        description: "A description",
        unifiedApi: "crm",
        status: "enabled",
        disabledReason: "retry_limit",
        deliveryUrl: "https://example.com/my/webhook/endpoint",
        executeBaseUrl:
          "https://unify.apideck.com/webhook/webhooks/1234/execute",
        events: [
          "vault.connection.created",
          "vault.connection.updated",
        ],
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
      },
      {
        id: "1234",
        description: "A description",
        unifiedApi: "crm",
        status: "enabled",
        disabledReason: "retry_limit",
        deliveryUrl: "https://example.com/my/webhook/endpoint",
        executeBaseUrl:
          "https://unify.apideck.com/webhook/webhooks/1234/execute",
        events: [
          "vault.connection.created",
          "vault.connection.updated",
        ],
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
      },
      {
        id: "1234",
        description: "A description",
        unifiedApi: "crm",
        status: "enabled",
        disabledReason: "retry_limit",
        deliveryUrl: "https://example.com/my/webhook/endpoint",
        executeBaseUrl:
          "https://unify.apideck.com/webhook/webhooks/1234/execute",
        events: [
          "vault.connection.created",
          "vault.connection.updated",
        ],
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
      },
    ],
    meta: {
      itemsOnPage: 50,
      cursors: {
        previous: "em9oby1jcm06OnBhZ2U6OjE=",
        current: "em9oby1jcm06OnBhZ2U6OjI=",
        next: "em9oby1jcm06OnBhZ2U6OjM=",
      },
    },
    links: {
      previous:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D",
      current: "https://unify.apideck.com/crm/companies",
      next:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM",
    },
  });
});

test("Webhooks Webhook Webhooks Add", async () => {
  const testHttpClient = createTestHTTPClient("webhook.webhooksAdd");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.webhook.webhooks.create({
    createWebhookRequest: {
      description: "A description",
      unifiedApi: "crm",
      status: "enabled",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
    },
  });
  expect(result.httpMeta.response.status).toBe(201);
  expect(result.createWebhookResponse).toBeDefined();
  expect(result.createWebhookResponse).toEqual({
    statusCode: 200,
    status: "OK",
    data: {
      id: "1234",
      description: "A description",
      unifiedApi: "crm",
      status: "enabled",
      disabledReason: "retry_limit",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      executeBaseUrl: "https://unify.apideck.com/webhook/webhooks/1234/execute",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});

test("Webhooks Webhook Webhooks One", async () => {
  const testHttpClient = createTestHTTPClient("webhook.webhooksOne");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.webhook.webhooks.get({
    id: "<id>",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getWebhookResponse).toBeDefined();
  expect(result.getWebhookResponse).toEqual({
    statusCode: 200,
    status: "OK",
    data: {
      id: "1234",
      description: "A description",
      unifiedApi: "crm",
      status: "enabled",
      disabledReason: "retry_limit",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      executeBaseUrl: "https://unify.apideck.com/webhook/webhooks/1234/execute",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});

test("Webhooks Webhook Webhooks Update", async () => {
  const testHttpClient = createTestHTTPClient("webhook.webhooksUpdate");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.webhook.webhooks.update({
    id: "<id>",
    updateWebhookRequest: {
      description: "A description",
      status: "enabled",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
    },
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.updateWebhookResponse).toBeDefined();
  expect(result.updateWebhookResponse).toEqual({
    statusCode: 200,
    status: "OK",
    data: {
      id: "1234",
      description: "A description",
      unifiedApi: "crm",
      status: "enabled",
      disabledReason: "retry_limit",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      executeBaseUrl: "https://unify.apideck.com/webhook/webhooks/1234/execute",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});

test("Webhooks Webhook Webhooks Delete", async () => {
  const testHttpClient = createTestHTTPClient("webhook.webhooksDelete");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.webhook.webhooks.delete({
    id: "<id>",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteWebhookResponse).toBeDefined();
  expect(result.deleteWebhookResponse).toEqual({
    statusCode: 200,
    status: "OK",
    data: {
      id: "1234",
      description: "A description",
      unifiedApi: "crm",
      status: "enabled",
      disabledReason: "retry_limit",
      deliveryUrl: "https://example.com/my/webhook/endpoint",
      executeBaseUrl: "https://unify.apideck.com/webhook/webhooks/1234/execute",
      events: [
        "vault.connection.created",
        "vault.connection.updated",
      ],
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});
