/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Uploadsessions File Storage Upload Sessions Add", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step fileStorage.uploadSessionsAdd.test referencing operation fileStorage.uploadSessionsAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.uploadSessionsAdd.test referencing operation fileStorage.uploadSessionsAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.uploadSessionsAdd.test referencing operation fileStorage.uploadSessionsAdd with expression in requestBody with type  not currently supported`, `workflow step fileStorage.uploadSessionsAdd.test referencing operation fileStorage.uploadSessionsAdd with expression in requestBody with type  not currently supported`]",
  );
});

test("Uploadsessions File Storage Upload Sessions One", async () => {
  const testHttpClient = createTestHTTPClient("fileStorage.uploadSessionsOne");

  const apideck = new Apideck({
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.fileStorage.uploadSessions.get({
    id: "<id>",
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
    fields: "id,updated_at",
  }, {
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getUploadSessionResponse).toBeDefined();
  expect(result.getUploadSessionResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "dropbox",
    resource: "UploadSessions",
    operation: "one",
    data: {
      id: "12345",
      success: true,
      partSize: 1000000,
      parallelUploadSupported: true,
      uploadedByteRange: "0-42",
      expiresAt: new Date("2022-09-30T07:43:32.000Z"),
    },
  });
});

test("Uploadsessions File Storage Upload Sessions Delete", async () => {
  const testHttpClient = createTestHTTPClient(
    "fileStorage.uploadSessionsDelete",
  );

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.fileStorage.uploadSessions.delete({
    id: "<id>",
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteUploadSessionResponse).toBeDefined();
  expect(result.deleteUploadSessionResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "dropbox",
    resource: "UploadSessions",
    operation: "one",
    data: {
      id: "12345",
    },
  });
});

test("Uploadsessions File Storage Upload Sessions Finish", async () => {
  const testHttpClient = createTestHTTPClient(
    "fileStorage.uploadSessionsFinish",
  );

  const apideck = new Apideck({
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.fileStorage.uploadSessions.finish({
    id: "<id>",
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
    digest: "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
  }, {
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
  });
  expect(result.httpMeta.response.status).toBe(201);
  expect(result.getFileResponse).toBeDefined();
  expect(result.getFileResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "google-drive",
    resource: "files",
    operation: "one",
    data: {
      id: "12345",
      downstreamId: "12345",
      name: "sample.jpg",
      description: "A sample image",
      type: "file",
      path: "/Documents/sample.jpg",
      mimeType: "image/jpeg",
      size: 1810673,
      owner: {
        id: "12345",
        email: "hello@apideck.com",
        name: "Elon Musk",
      },
      parentFolders: [
        {
          id: "12345",
          name: "Personal",
        },
        {
          id: "12345",
          name: "Personal",
        },
        {
          id: "12345",
          name: "Personal",
        },
      ],
      exportFormats: [
        "application/pdf",
        "application/vnd.oasis.opendocument.presentation",
        "text/plain",
      ],
      updatedBy: "12345",
      createdBy: "12345",
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
    },
  });
});
