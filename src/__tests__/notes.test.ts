/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Notes Crm Notes All", async () => {
  const testHttpClient = createTestHTTPClient("crm.notesAll");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.crm.notes.list({
    serviceId: "salesforce",
    passThrough: {
      "search": "San Francisco",
    },
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getNotesResponse).toBeDefined();
  expect(result.getNotesResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "zoho-crm",
    resource: "notes",
    operation: "all",
    data: [
      {
        id: "12345",
        title: "Meeting Notes",
        content: "Office hours are 9AM-6PM",
        ownerId: "12345",
        contactId: "12345",
        companyId: "12345",
        opportunityId: "12345",
        leadId: "12345",
        active: true,
        updatedBy: "12345",
        createdBy: "12345",
        updatedAt: "2020-09-30T07:43:32.000Z",
        createdAt: "2020-09-30T07:43:32.000Z",
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        title: "Meeting Notes",
        content: "Office hours are 9AM-6PM",
        ownerId: "12345",
        contactId: "12345",
        companyId: "12345",
        opportunityId: "12345",
        leadId: "12345",
        active: true,
        updatedBy: "12345",
        createdBy: "12345",
        updatedAt: "2020-09-30T07:43:32.000Z",
        createdAt: "2020-09-30T07:43:32.000Z",
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        title: "Meeting Notes",
        content: "Office hours are 9AM-6PM",
        ownerId: "12345",
        contactId: "12345",
        companyId: "12345",
        opportunityId: "12345",
        leadId: "12345",
        active: true,
        updatedBy: "12345",
        createdBy: "12345",
        updatedAt: "2020-09-30T07:43:32.000Z",
        createdAt: "2020-09-30T07:43:32.000Z",
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
    ],
    meta: {
      itemsOnPage: 50,
      cursors: {
        previous: "em9oby1jcm06OnBhZ2U6OjE=",
        current: "em9oby1jcm06OnBhZ2U6OjI=",
        next: "em9oby1jcm06OnBhZ2U6OjM=",
      },
    },
    links: {
      previous:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D",
      current: "https://unify.apideck.com/crm/companies",
      next:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM",
    },
  });
});

it.skip("Notes Crm Notes Add", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step crm.notesAdd.test referencing operation crm.notesAdd with expression in requestBody with type  not currently supported`, `workflow step crm.notesAdd.test referencing operation crm.notesAdd with expression in requestBody with type  not currently supported`, `workflow step crm.notesAdd.test referencing operation crm.notesAdd with expression in requestBody with type  not currently supported`, `workflow step crm.notesAdd.test referencing operation crm.notesAdd with expression in requestBody with type  not currently supported`]",
  );
});

test("Notes Crm Notes One", async () => {
  const testHttpClient = createTestHTTPClient("crm.notesOne");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.crm.notes.get({
    id: "<id>",
    serviceId: "salesforce",
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getNoteResponse).toBeDefined();
  expect(result.getNoteResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "zoho-crm",
    resource: "notes",
    operation: "one",
    data: {
      id: "12345",
      title: "Meeting Notes",
      content: "Office hours are 9AM-6PM",
      ownerId: "12345",
      contactId: "12345",
      companyId: "12345",
      opportunityId: "12345",
      leadId: "12345",
      active: true,
      updatedBy: "12345",
      createdBy: "12345",
      updatedAt: "2020-09-30T07:43:32.000Z",
      createdAt: "2020-09-30T07:43:32.000Z",
      passThrough: [
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
      ],
    },
  });
});

it.skip("Notes Crm Notes Update", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`, `workflow step crm.notesUpdate.test referencing operation crm.notesUpdate with expression in requestBody with type  not currently supported`]",
  );
});

test("Notes Crm Notes Delete", async () => {
  const testHttpClient = createTestHTTPClient("crm.notesDelete");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.crm.notes.delete({
    id: "<id>",
    serviceId: "salesforce",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteNoteResponse).toBeDefined();
  expect(result.deleteNoteResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "zoho-crm",
    resource: "notes",
    operation: "delete",
    data: {
      id: "12345",
    },
  });
});
