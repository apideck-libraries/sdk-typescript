/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Collectionticketcomments Issue Tracking Collection Ticket Comments All", async () => {
  const testHttpClient = createTestHTTPClient(
    "issueTracking.collectionTicketCommentsAll",
  );

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.issueTracking.collectionTicketComments.list({
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
    collectionId: "apideck-io",
    ticketId: "<id>",
    sort: {
      by: "created_at",
      direction: "desc",
    },
    passThrough: {
      "search": "San Francisco",
    },
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getCommentsResponse).toBeDefined();
  expect(result.getCommentsResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "jira",
    resource: "Tickets",
    operation: "all",
    data: [
      {
        id: "12345",
        body: "What internet provider do you use?",
        createdBy: "12345",
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        body: "What internet provider do you use?",
        createdBy: "12345",
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        body: "What internet provider do you use?",
        createdBy: "12345",
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
    ],
    meta: {
      itemsOnPage: 50,
      cursors: {
        previous: "em9oby1jcm06OnBhZ2U6OjE=",
        current: "em9oby1jcm06OnBhZ2U6OjI=",
        next: "em9oby1jcm06OnBhZ2U6OjM=",
      },
    },
    links: {
      previous:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D",
      current: "https://unify.apideck.com/crm/companies",
      next:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM",
    },
  });
});

it.skip("Collectionticketcomments Issue Tracking Collection Ticket Comments Add", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step issueTracking.collectionTicketCommentsAdd.test referencing operation issueTracking.collectionTicketCommentsAdd with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsAdd.test referencing operation issueTracking.collectionTicketCommentsAdd with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsAdd.test referencing operation issueTracking.collectionTicketCommentsAdd with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsAdd.test referencing operation issueTracking.collectionTicketCommentsAdd with expression in requestBody with type  not currently supported`]",
  );
});

test("Collectionticketcomments Issue Tracking Collection Ticket Comments One", async () => {
  const testHttpClient = createTestHTTPClient(
    "issueTracking.collectionTicketCommentsOne",
  );

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.issueTracking.collectionTicketComments.get({
    id: "<id>",
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
    collectionId: "apideck-io",
    ticketId: "<id>",
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getCommentResponse).toBeDefined();
  expect(result.getCommentResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "sage-hr",
    resource: "Tickets",
    operation: "one",
    data: {
      id: "12345",
      body: "What internet provider do you use?",
      createdBy: "12345",
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
      passThrough: [
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
      ],
    },
  });
});

it.skip("Collectionticketcomments Issue Tracking Collection Ticket Comments Update", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`, `workflow step issueTracking.collectionTicketCommentsUpdate.test referencing operation issueTracking.collectionTicketCommentsUpdate with expression in requestBody with type  not currently supported`]",
  );
});

test("Collectionticketcomments Issue Tracking Collection Ticket Comments Delete", async () => {
  const testHttpClient = createTestHTTPClient(
    "issueTracking.collectionTicketCommentsDelete",
  );

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.issueTracking.collectionTicketComments.delete({
    id: "<id>",
    consumerId: "test-consumer",
    appId: "dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX",
    serviceId: "salesforce",
    collectionId: "apideck-io",
    ticketId: "<id>",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteCommentResponse).toBeDefined();
  expect(result.deleteCommentResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "jira",
    resource: "Tickets",
    operation: "add",
    data: {
      id: "12345",
    },
  });
});
