/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Apideck } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Billpayments Accounting Bill Payments All", async () => {
  const testHttpClient = createTestHTTPClient("accounting.billPaymentsAll");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.accounting.billPayments.list({
    serviceId: "salesforce",
    filter: {
      updatedSince: new Date("2020-09-30T07:43:32.000Z"),
    },
    sort: {
      by: "updated_at",
    },
    passThrough: {
      "search": "San Francisco",
    },
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getBillPaymentsResponse).toBeDefined();
  expect(result.getBillPaymentsResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "xero",
    resource: "payments",
    operation: "all",
    data: [
      {
        id: "12345",
        downstreamId: "12345",
        currency: "USD",
        currencyRate: 0.69,
        totalAmount: 49.99,
        reference: "123456",
        paymentMethod: "cash",
        paymentMethodReference: "123456",
        paymentMethodId: "12345",
        account: {
          id: "123456",
          name: "Bank account",
          nominalCode: "N091",
          code: "453",
        },
        transactionDate: new Date("2021-05-01T12:00:00.000Z"),
        supplier: {
          id: "12345",
          displayId: "SUPP00101",
          displayName: "Windsurf Shop",
          companyName: "The boring company",
          address: {
            id: "123",
            type: "primary",
            string: "25 Spring Street, Blackburn, VIC 3130",
            name: "HQ US",
            line1: "Main street",
            line2: "apt #",
            line3: "Suite #",
            line4: "delivery instructions",
            streetNumber: "25",
            city: "San Francisco",
            state: "CA",
            postalCode: "94104",
            country: "US",
            latitude: "40.759211",
            longitude: "-73.984638",
            county: "Santa Clara",
            contactName: "Elon Musk",
            salutation: "Mr",
            phoneNumber: "111-111-1111",
            fax: "122-111-1111",
            email: "elon@musk.com",
            website: "https://elonmusk.com",
            notes: "Address notes or delivery instructions.",
            rowVersion: "1-12345",
          },
        },
        companyId: "12345",
        reconciled: true,
        status: "authorised",
        type: "accounts_payable",
        allocations: [
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
        ],
        note: "Some notes about this transaction",
        number: "123456",
        trackingCategories: [
          {
            id: "123456",
            name: "New York",
          },
          {
            id: "123456",
            name: "New York",
          },
          {
            id: "123456",
            name: "New York",
          },
        ],
        customFields: [
          {
            id: "2389328923893298",
            name: "employee_level",
            description: "Employee Level",
            value: 10,
          },
        ],
        rowVersion: "1-12345",
        displayId: "123456",
        updatedBy: "12345",
        createdBy: "12345",
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        downstreamId: "12345",
        currency: "USD",
        currencyRate: 0.69,
        totalAmount: 49.99,
        reference: "123456",
        paymentMethod: "cash",
        paymentMethodReference: "123456",
        paymentMethodId: "12345",
        account: {
          id: "123456",
          name: "Bank account",
          nominalCode: "N091",
          code: "453",
        },
        transactionDate: new Date("2021-05-01T12:00:00.000Z"),
        supplier: {
          id: "12345",
          displayId: "SUPP00101",
          displayName: "Windsurf Shop",
          companyName: "The boring company",
          address: {
            id: "123",
            type: "primary",
            string: "25 Spring Street, Blackburn, VIC 3130",
            name: "HQ US",
            line1: "Main street",
            line2: "apt #",
            line3: "Suite #",
            line4: "delivery instructions",
            streetNumber: "25",
            city: "San Francisco",
            state: "CA",
            postalCode: "94104",
            country: "US",
            latitude: "40.759211",
            longitude: "-73.984638",
            county: "Santa Clara",
            contactName: "Elon Musk",
            salutation: "Mr",
            phoneNumber: "111-111-1111",
            fax: "122-111-1111",
            email: "elon@musk.com",
            website: "https://elonmusk.com",
            notes: "Address notes or delivery instructions.",
            rowVersion: "1-12345",
          },
        },
        companyId: "12345",
        reconciled: true,
        status: "authorised",
        type: "accounts_payable",
        allocations: [
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
        ],
        note: "Some notes about this transaction",
        number: "123456",
        trackingCategories: [
          {
            id: "123456",
            name: "New York",
          },
        ],
        customFields: [
          {
            id: "2389328923893298",
            name: "employee_level",
            description: "Employee Level",
            value: "Uses Salesforce and Marketo",
          },
          {
            id: "2389328923893298",
            name: "employee_level",
            description: "Employee Level",
            value: "Uses Salesforce and Marketo",
          },
          {
            id: "2389328923893298",
            name: "employee_level",
            description: "Employee Level",
            value: [
              "<value>",
              "<value>",
            ],
          },
        ],
        rowVersion: "1-12345",
        displayId: "123456",
        updatedBy: "12345",
        createdBy: "12345",
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
      {
        id: "12345",
        downstreamId: "12345",
        currency: "USD",
        currencyRate: 0.69,
        totalAmount: 49.99,
        reference: "123456",
        paymentMethod: "cash",
        paymentMethodReference: "123456",
        paymentMethodId: "12345",
        account: {
          id: "123456",
          name: "Bank account",
          nominalCode: "N091",
          code: "453",
        },
        transactionDate: new Date("2021-05-01T12:00:00.000Z"),
        supplier: {
          id: "12345",
          displayId: "SUPP00101",
          displayName: "Windsurf Shop",
          companyName: "The boring company",
          address: {
            id: "123",
            type: "primary",
            string: "25 Spring Street, Blackburn, VIC 3130",
            name: "HQ US",
            line1: "Main street",
            line2: "apt #",
            line3: "Suite #",
            line4: "delivery instructions",
            streetNumber: "25",
            city: "San Francisco",
            state: "CA",
            postalCode: "94104",
            country: "US",
            latitude: "40.759211",
            longitude: "-73.984638",
            county: "Santa Clara",
            contactName: "Elon Musk",
            salutation: "Mr",
            phoneNumber: "111-111-1111",
            fax: "122-111-1111",
            email: "elon@musk.com",
            website: "https://elonmusk.com",
            notes: "Address notes or delivery instructions.",
            rowVersion: "1-12345",
          },
        },
        companyId: "12345",
        reconciled: true,
        status: "authorised",
        type: "accounts_payable",
        allocations: [
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
          {
            id: "12345",
            type: "bill",
            code: "N091",
            amount: 49.99,
            allocationId: "123456",
          },
        ],
        note: "Some notes about this transaction",
        number: "123456",
        trackingCategories: [
          {
            id: "123456",
            name: "New York",
          },
          {
            id: "123456",
            name: "New York",
          },
        ],
        customFields: [
          {
            id: "2389328923893298",
            name: "employee_level",
            description: "Employee Level",
            value: [
              {},
              {},
            ],
          },
        ],
        rowVersion: "1-12345",
        displayId: "123456",
        updatedBy: "12345",
        createdBy: "12345",
        createdAt: new Date("2020-09-30T07:43:32.000Z"),
        updatedAt: new Date("2020-09-30T07:43:32.000Z"),
        passThrough: [
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
          {
            serviceId: "<id>",
            extendPaths: [
              {
                path: "$.nested.property",
                value: {
                  "TaxClassificationRef": {
                    "value": "EUC-99990201-V1-00020000",
                  },
                },
              },
            ],
          },
        ],
      },
    ],
    meta: {
      itemsOnPage: 50,
      cursors: {
        previous: "em9oby1jcm06OnBhZ2U6OjE=",
        current: "em9oby1jcm06OnBhZ2U6OjI=",
        next: "em9oby1jcm06OnBhZ2U6OjM=",
      },
    },
    links: {
      previous:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D",
      current: "https://unify.apideck.com/crm/companies",
      next:
        "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM",
    },
  });
});

it.skip("Billpayments Accounting Bill Payments Add", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step accounting.billPaymentsAdd.test referencing operation accounting.billPaymentsAdd with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsAdd.test referencing operation accounting.billPaymentsAdd with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsAdd.test referencing operation accounting.billPaymentsAdd with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsAdd.test referencing operation accounting.billPaymentsAdd with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsAdd.test referencing operation accounting.billPaymentsAdd with expression in requestBody with type  not currently supported`]",
  );
});

test("Billpayments Accounting Bill Payments One", async () => {
  const testHttpClient = createTestHTTPClient("accounting.billPaymentsOne");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.accounting.billPayments.get({
    id: "<id>",
    serviceId: "salesforce",
    fields: "id,updated_at",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.getBillPaymentResponse).toBeDefined();
  expect(result.getBillPaymentResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "xero",
    resource: "payments",
    operation: "one",
    data: {
      id: "12345",
      downstreamId: "12345",
      currency: "USD",
      currencyRate: 0.69,
      totalAmount: 49.99,
      reference: "123456",
      paymentMethod: "cash",
      paymentMethodReference: "123456",
      paymentMethodId: "12345",
      account: {
        id: "123456",
        name: "Bank account",
        nominalCode: "N091",
        code: "453",
      },
      transactionDate: new Date("2021-05-01T12:00:00.000Z"),
      supplier: {
        id: "12345",
        displayId: "SUPP00101",
        displayName: "Windsurf Shop",
        companyName: "The boring company",
        address: {
          id: "123",
          type: "primary",
          string: "25 Spring Street, Blackburn, VIC 3130",
          name: "HQ US",
          line1: "Main street",
          line2: "apt #",
          line3: "Suite #",
          line4: "delivery instructions",
          streetNumber: "25",
          city: "San Francisco",
          state: "CA",
          postalCode: "94104",
          country: "US",
          latitude: "40.759211",
          longitude: "-73.984638",
          county: "Santa Clara",
          contactName: "Elon Musk",
          salutation: "Mr",
          phoneNumber: "111-111-1111",
          fax: "122-111-1111",
          email: "elon@musk.com",
          website: "https://elonmusk.com",
          notes: "Address notes or delivery instructions.",
          rowVersion: "1-12345",
        },
      },
      companyId: "12345",
      reconciled: true,
      status: "authorised",
      type: "accounts_payable",
      allocations: [
        {
          id: "12345",
          type: "bill",
          code: "N091",
          amount: 49.99,
          allocationId: "123456",
        },
        {
          id: "12345",
          type: "bill",
          code: "N091",
          amount: 49.99,
          allocationId: "123456",
        },
        {
          id: "12345",
          type: "bill",
          code: "N091",
          amount: 49.99,
          allocationId: "123456",
        },
      ],
      note: "Some notes about this transaction",
      number: "123456",
      trackingCategories: [
        {
          id: "123456",
          name: "New York",
        },
        {
          id: "123456",
          name: "New York",
        },
      ],
      customFields: [
        {
          id: "2389328923893298",
          name: "employee_level",
          description: "Employee Level",
          value: {},
        },
        {
          id: "2389328923893298",
          name: "employee_level",
          description: "Employee Level",
          value: [
            {},
          ],
        },
      ],
      rowVersion: "1-12345",
      displayId: "123456",
      updatedBy: "12345",
      createdBy: "12345",
      createdAt: new Date("2020-09-30T07:43:32.000Z"),
      updatedAt: new Date("2020-09-30T07:43:32.000Z"),
      passThrough: [
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
        {
          serviceId: "<id>",
          extendPaths: [
            {
              path: "$.nested.property",
              value: {
                "TaxClassificationRef": {
                  "value": "EUC-99990201-V1-00020000",
                },
              },
            },
          ],
        },
      ],
    },
  });
});

it.skip("Billpayments Accounting Bill Payments Update", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`, `workflow step accounting.billPaymentsUpdate.test referencing operation accounting.billPaymentsUpdate with expression in requestBody with type  not currently supported`]",
  );
});

test("Billpayments Accounting Bill Payments Delete", async () => {
  const testHttpClient = createTestHTTPClient("accounting.billPaymentsDelete");

  const apideck = new Apideck({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiKey: process.env["APIDECK_API_KEY"] ?? "value",
  });

  const result = await apideck.accounting.billPayments.delete({
    id: "<id>",
    serviceId: "salesforce",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.deleteBillPaymentResponse).toBeDefined();
  expect(result.deleteBillPaymentResponse).toEqual({
    statusCode: 200,
    status: "OK",
    service: "xero",
    resource: "payments",
    operation: "delete",
    data: {
      id: "12345",
    },
  });
});
